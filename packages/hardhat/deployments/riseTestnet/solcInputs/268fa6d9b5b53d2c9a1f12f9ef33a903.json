{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/EventManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title EventManager\n * @notice Decentralized event management with accountability deposits\n * @dev Participants put down deposits that are forfeited if they don't attend.\n *      Forfeits are shared among actual attendees as rewards for showing up.\n */\ncontract EventManager is Ownable, ReentrancyGuard {\n    // ═══════════════════════════════════════════════════════════════════\n    //                           IMMUTABLES & STATE\n    // ═══════════════════════════════════════════════════════════════════\n\n    /// @notice ERC20 token used for all deposits and bonds\n    IERC20 public immutable token;\n\n    /// @notice Global deposit amount required for all events\n    uint256 public attendeeDepositAmount;\n\n    /// @notice Global bond amount required for all organizers\n    uint256 public organizerBondAmount;\n\n    /// @notice Global minimum attendance ratio for all events (in basis points, 3000 = 30%)\n    uint16 public minAttendanceRatio;\n\n    /// @notice Global refund policy configuration\n    PolicyConfig public policy;\n\n    /// @notice Tracks if a user has created an account\n    mapping(address => bool) public isRegisteredUser;\n\n    /// @notice User balances available for withdrawal\n    mapping(address => uint256) public balances;\n\n    /// @notice All events stored by ID\n    mapping(uint256 => Event) public events;\n\n    /// @notice Next event ID to assign. Currently we can use this for the sake of the hackathn.\n    uint256 public nextEventId = 1;\n\n    /// @notice Time after event ends when anyone can complete it (24 hours)\n    uint256 public constant COMPLETION_DEADLINE = 24 hours;\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                               STRUCTS\n    // ═══════════════════════════════════════════════════════════════════\n\n    /// @notice Global policy for refunds and forfeit distribution\n    struct PolicyConfig {\n        uint256 fullRefundHours; // Hours before event for 100% refund\n        uint256 partialRefundHours; // Hours before event for partial refund\n        uint256 partialRefundPercent; // Percent for partial refund (0-100)\n        uint256 attendeeSharePercent; // Percent of forfeits going to attendees (0-100)\n    }\n\n    /// @notice Individual participant registration\n    struct Registration {\n        RegStatus status; // Current registration state\n        bool exists; // Whether registration record exists\n    }\n\n    /// @notice Complete event data and state\n    struct Event {\n        // Basic event info\n        address organizer; // Who created the event\n        string description; // Event description\n        uint64 startTime; // When event begins\n        uint64 endTime; // When event ends (for completion deadline)\n        uint32 capacity; // Maximum participants\n        // State management\n        EventStatus status; // Current event state\n        bool published; // Whether visible to participants\n        bool bondReleased; // Whether organizer bond was distributed\n        bool checkInClosed; // Whether check-in period is closed\n        // Participation tracking\n        uint32 confirmedCount; // Number of confirmed registrations\n        uint32 attendedCount; // Number who actually showed up\n        // Financial state\n        uint256 forfeitPool; // Total forfeited deposits\n        uint256 rewardPerAttendee; // Reward each attendee gets\n        // Per-participant data\n        mapping(address => Registration) registrations; // Registration status\n        mapping(address => bool) rewardsClaimed; // Claim tracking\n    }\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                               ENUMS\n    // ═══════════════════════════════════════════════════════════════════\n\n    /// @notice Event lifecycle states\n    enum EventStatus {\n        Created, // Event created but not visible\n        Published, // Event visible and accepting registrations\n        Canceled, // Event canceled (full refunds)\n        Completed // Event finished (settlements processed)\n    }\n\n    /// @notice Participant registration states\n    enum RegStatus {\n        None, // Not registered\n        Confirmed, // Registered and deposit paid\n        CanceledByParticipant, // Canceled before event\n        Attended // Actually showed up\n    }\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                               EVENTS\n    // ═══════════════════════════════════════════════════════════════════\n\n    event AccountCreated(address indexed user);\n    event EventCreated(uint256 indexed eventId, address indexed organizer);\n    event EventPublished(uint256 indexed eventId);\n    event EventCanceled(uint256 indexed eventId);\n    event EventCompleted(uint256 indexed eventId);\n    event CheckInClosed(uint256 indexed eventId);\n    event RegistrationConfirmed(uint256 indexed eventId, address indexed participant);\n    event RegistrationCanceled(uint256 indexed eventId, address indexed participant);\n    event ParticipantCheckedIn(uint256 indexed eventId, address indexed participant);\n    event RewardsClaimed(uint256 indexed eventId, address indexed participant, uint256 amount);\n    event Withdrawal(address indexed user, uint256 amount);\n    event PolicyUpdated(\n        uint256 fullRefundHours,\n        uint256 partialRefundHours,\n        uint256 partialRefundPercent,\n        uint256 attendeeSharePercent\n    );\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                             CONSTRUCTOR\n    // ═══════════════════════════════════════════════════════════════════\n\n    constructor(address _token, address _owner) Ownable(_owner) {\n        token = IERC20(_token);\n\n        // Set default global deposit and bond amounts\n        attendeeDepositAmount = 1e18; // 1 token default deposit\n        organizerBondAmount = 10e18; // 10 token default organizer bond\n        minAttendanceRatio = 3000; // 30% default minimum attendance\n\n        // Set default refund policy\n        policy = PolicyConfig({\n            fullRefundHours: 24, // Full refund if cancel >24h before\n            partialRefundHours: 2, // Partial refund if cancel >2h before\n            partialRefundPercent: 50, // 50% refund in partial window\n            attendeeSharePercent: 50 // 50% of forfeits go to attendees\n        });\n    }\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                         ADMIN FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════\n\n    /**\n     * @notice Update global refund and forfeit policy\n     * @param _fullRefundHours Hours before event for 100% refund\n     * @param _partialRefundHours Hours before event for partial refund\n     * @param _partialRefundPercent Percentage refund in partial window (0-100)\n     * @param _attendeeSharePercent Percentage of forfeits going to attendees (0-100)\n     */\n    function updatePolicy(\n        uint256 _fullRefundHours,\n        uint256 _partialRefundHours,\n        uint256 _partialRefundPercent,\n        uint256 _attendeeSharePercent\n    ) external onlyOwner {\n        require(_partialRefundPercent <= 100, \"Invalid partial refund percent\");\n        require(_attendeeSharePercent <= 100, \"Invalid attendee share percent\");\n        require(_fullRefundHours >= _partialRefundHours, \"Full refund hours must be >= partial\");\n\n        policy = PolicyConfig({\n            fullRefundHours: _fullRefundHours,\n            partialRefundHours: _partialRefundHours,\n            partialRefundPercent: _partialRefundPercent,\n            attendeeSharePercent: _attendeeSharePercent\n        });\n\n        emit PolicyUpdated(_fullRefundHours, _partialRefundHours, _partialRefundPercent, _attendeeSharePercent);\n    }\n\n    /**\n     * @notice Update global deposit amount for all events\n     * @param _deposit global deposit amount\n     */\n    function setAttendeeDepositAmount(uint256 _deposit) external onlyOwner {\n        attendeeDepositAmount = _deposit;\n    }\n\n    /**\n     * @notice Update global bond amount for all organizers\n     * @param _bond global bond amount\n     */\n    function setOrganizerBondAmount(uint256 _bond) external onlyOwner {\n        organizerBondAmount = _bond;\n    }\n\n    /**\n     * @notice Update global minimum attendance ratio for all events\n     * @param _ratio minimum attendance ratio in basis points (0-10000, 3000 = 30%)\n     */\n    function setMinAttendanceRatio(uint16 _ratio) external onlyOwner {\n        require(_ratio <= 10000, \"Ratio cannot exceed 100%\");\n        minAttendanceRatio = _ratio;\n    }\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                         ACCOUNT MANAGEMENT\n    // ═══════════════════════════════════════════════════════════════════\n\n    /**\n     * @notice Create a user account (required before any other actions)\n     * @dev Simple gate to prevent accidental interactions\n     */\n    function createAccount() external {\n        require(!isRegisteredUser[msg.sender], \"Account already exists\");\n        isRegisteredUser[msg.sender] = true;\n        emit AccountCreated(msg.sender);\n    }\n\n    /**\n     * @notice Withdraw available balance to external account\n     * @dev Transfers entire balance to save gas\n     */\n    function withdraw() external nonReentrant {\n        uint256 amount = balances[msg.sender];\n        require(amount > 0, \"No balance to withdraw\");\n\n        balances[msg.sender] = 0;\n        token.transfer(msg.sender, amount);\n\n        emit Withdrawal(msg.sender, amount);\n    }\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                         EVENT LIFECYCLE\n    // ═══════════════════════════════════════════════════════════════════\n\n    /**\n     * @notice Create a new event (organizer pays bond upfront)\n     * @param _description Event description\n     * @param _startTime When event begins (unix timestamp)\n     * @param _endTime When event ends (unix timestamp)\n     * @param _capacity Maximum number of participants\n     * @return eventId The ID of the created event\n     */\n    function createEvent(\n        string memory _description,\n        uint64 _startTime,\n        uint64 _endTime,\n        uint32 _capacity\n    ) external nonReentrant returns (uint256) {\n        require(isRegisteredUser[msg.sender], \"Must create account first\");\n        require(_startTime > block.timestamp, \"Start time must be in future\");\n        require(_endTime > _startTime, \"End time must be after start time\");\n        require(_capacity > 0, \"Capacity must be positive\");\n\n        // Take organizer bond upfront\n        token.transferFrom(msg.sender, address(this), organizerBondAmount);\n\n        uint256 eventId = nextEventId++;\n        Event storage newEvent = events[eventId];\n        newEvent.organizer = msg.sender;\n        newEvent.description = _description;\n        newEvent.startTime = _startTime;\n        newEvent.endTime = _endTime;\n        newEvent.capacity = _capacity;\n        newEvent.status = EventStatus.Created;\n        newEvent.published = false;\n\n        emit EventCreated(eventId, msg.sender);\n        return eventId;\n    }\n\n    /**\n     * @notice Make event visible and open for registration\n     * @param _eventId Event to publish\n     */\n    function publishEvent(uint256 _eventId) external {\n        Event storage evt = events[_eventId];\n        require(evt.organizer == msg.sender, \"Only organizer can publish\");\n        require(evt.status == EventStatus.Created, \"Event already published or finalized\");\n\n        evt.published = true;\n        evt.status = EventStatus.Published;\n\n        emit EventPublished(_eventId);\n    }\n\n    /**\n     * @notice Cancel event and trigger full refunds\n     * @param _eventId Event to cancel\n     * @dev Can be called by organizer or admin\n     */\n    function cancelEvent(uint256 _eventId) external nonReentrant {\n        Event storage evt = events[_eventId];\n        require(evt.organizer == msg.sender || msg.sender == owner(), \"Only organizer or admin\");\n        require(evt.status == EventStatus.Published, \"Event not active\");\n\n        evt.status = EventStatus.Canceled;\n        emit EventCanceled(_eventId);\n    }\n\n    /**\n     * @notice Close check-in period and process no-show forfeits\n     * @param _eventId Event to close check-in for\n     * @dev Should be called after event ends, before completing\n     */\n    function closeCheckIn(uint256 _eventId) external {\n        Event storage evt = events[_eventId];\n        require(evt.organizer == msg.sender, \"Only organizer can close check-in\");\n        require(evt.status == EventStatus.Published, \"Event not active\");\n        require(block.timestamp >= evt.endTime, \"Event not ended yet\");\n        require(!evt.checkInClosed, \"Check-in already closed\");\n\n        evt.checkInClosed = true;\n\n        // anyone confirmed but not attended forfeits deposit\n        _processNoShowForfeits(evt);\n\n        emit CheckInClosed(_eventId);\n    }\n\n    /**\n     * @notice Mark event as complete and process settlements\n     * @param _eventId Event to complete\n     * @dev Handles organizer bond, forfeit distribution, and reward calculation\n     */\n    function completeEvent(uint256 _eventId) external nonReentrant {\n        Event storage evt = events[_eventId];\n\n        // Anyone can complete after deadline passes\n        bool isOrganizer = (evt.organizer == msg.sender);\n        bool isPastDeadline = (block.timestamp >= evt.endTime + COMPLETION_DEADLINE);\n        require(isOrganizer || isPastDeadline, \"Only organizer or after deadline\");\n        require(evt.status == EventStatus.Published, \"Event not active\");\n        require(!evt.bondReleased, \"Bond already released\");\n\n        // Ensure check-in is closed first\n        if (!evt.checkInClosed) {\n            evt.checkInClosed = true;\n            _processNoShowForfeits(evt);\n        }\n\n        evt.status = EventStatus.Completed;\n        evt.bondReleased = true;\n\n        // required = floor(confirmed * ratio / 10000)\n        uint256 confirmed = uint256(evt.confirmedCount);\n        uint256 attended = uint256(evt.attendedCount);\n        uint256 required = (confirmed * uint256(minAttendanceRatio)) / 10000;\n\n        if (required == 0 || attended >= required) {\n            // Met attendance target (or nothing required) -> full bond refund\n            balances[evt.organizer] += organizerBondAmount;\n        } else {\n            // Proportional penalty: missing/required of the bond (caps at 100%)\n            uint256 missing = required - attended;\n            uint256 penalty = (organizerBondAmount * missing) / required; // safe since required > 0\n            uint256 refund = organizerBondAmount - penalty;\n\n            if (refund > 0) {\n                balances[evt.organizer] += refund;\n            }\n            if (penalty > 0) {\n                // keep your existing redistribution flow\n                evt.forfeitPool += penalty;\n            }\n        }\n\n        // Distribute forfeited deposits by policy (attendee/organizer split)\n        _distributeForfeitsByPolicy(evt);\n\n        emit EventCompleted(_eventId);\n    }\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                      PARTICIPANT FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════\n\n    /**\n     * @notice Register for an event (pays deposit)\n     * Currently no need for registration approval.\n     * @param _eventId Event to register for\n     */\n    function registerForEvent(uint256 _eventId) external nonReentrant {\n        require(isRegisteredUser[msg.sender], \"Must create account first\");\n\n        Event storage evt = events[_eventId];\n        require(evt.published, \"Event not published\");\n        require(evt.status == EventStatus.Published, \"Registration not open\");\n        require(evt.confirmedCount < evt.capacity, \"Event at capacity\");\n        require(!evt.registrations[msg.sender].exists, \"Already registered\");\n        // Allow registration up to and including start time\n        require(block.timestamp <= evt.startTime, \"Registration closed\");\n\n        // Take participant deposit\n        token.transferFrom(msg.sender, address(this), attendeeDepositAmount);\n\n        evt.registrations[msg.sender] = Registration({ status: RegStatus.Confirmed, exists: true });\n        evt.confirmedCount++;\n\n        emit RegistrationConfirmed(_eventId, msg.sender);\n    }\n\n    /**\n     * @notice Cancel registration (may incur forfeit based on timing)\n     * @param _eventId Event to cancel registration for\n     */\n    function cancelRegistration(uint256 _eventId) external nonReentrant {\n        Event storage evt = events[_eventId];\n        Registration storage reg = evt.registrations[msg.sender];\n\n        require(reg.exists, \"Not registered\");\n        require(reg.status == RegStatus.Confirmed, \"Registration not active\");\n\n        reg.status = RegStatus.CanceledByParticipant;\n        evt.confirmedCount--;\n\n        // Calculate refund based on timing\n        uint256 refundAmount = _calculateRefund(evt, attendeeDepositAmount);\n        if (refundAmount > 0) {\n            balances[msg.sender] += refundAmount;\n        }\n\n        // Add forfeit to pool\n        uint256 forfeitAmount = attendeeDepositAmount - refundAmount;\n        if (forfeitAmount > 0) {\n            evt.forfeitPool += forfeitAmount;\n        }\n\n        emit RegistrationCanceled(_eventId, msg.sender);\n    }\n\n    /**\n     * @notice Claim payout after event completion/cancellation\n     * @param _eventId Event to claim from\n     * @dev Returns deposit + reward share for attendees, or full deposit for canceled events\n     */\n    function claimPayout(uint256 _eventId) external nonReentrant {\n        Event storage evt = events[_eventId];\n        Registration storage reg = evt.registrations[msg.sender];\n\n        require(evt.status == EventStatus.Completed || evt.status == EventStatus.Canceled, \"Event not finalized\");\n        require(reg.exists, \"Not registered for event\");\n        require(!evt.rewardsClaimed[msg.sender], \"Payout already claimed\");\n\n        evt.rewardsClaimed[msg.sender] = true;\n\n        uint256 totalPayout = 0;\n\n        if (reg.status == RegStatus.Attended) {\n            // Attended: get deposit back + share of forfeit pool\n            totalPayout += attendeeDepositAmount; // Original deposit\n            totalPayout += evt.rewardPerAttendee; // Reward for showing up\n        } else if (evt.status == EventStatus.Canceled) {\n            // Event canceled: everyone gets full refund\n            totalPayout += attendeeDepositAmount;\n        }\n        // Note: No payout for confirmed but didn't attend (forfeit)\n\n        if (totalPayout > 0) {\n            balances[msg.sender] += totalPayout;\n        }\n\n        emit RewardsClaimed(_eventId, msg.sender, totalPayout);\n    }\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                      ORGANIZER FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════\n\n    /**\n     * @notice Check in a participant (marks them as attended)\n     * @param _eventId Event ID\n     * @param _participant Address to check in\n     * @dev Only callable by event organizer after event start time\n     */\n    function checkIn(uint256 _eventId, address _participant) external {\n        Event storage evt = events[_eventId];\n        require(evt.organizer == msg.sender, \"Only organizer can check-in\");\n        require(evt.status == EventStatus.Published, \"Event not active\");\n        require(block.timestamp >= evt.startTime, \"Event not started\");\n        require(!evt.checkInClosed, \"Check-in period closed\");\n\n        Registration storage reg = evt.registrations[_participant];\n        require(reg.exists, \"Participant not registered\");\n        require(reg.status == RegStatus.Confirmed, \"Registration not confirmed\");\n\n        reg.status = RegStatus.Attended;\n        evt.attendedCount++;\n\n        emit ParticipantCheckedIn(_eventId, _participant);\n    }\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                         INTERNAL HELPERS\n    // ═══════════════════════════════════════════════════════════════════\n\n    /**\n     * @param evt Event storage reference\n     */\n    function _processNoShowForfeits(Event storage evt) private {\n        // Calculate no-shows and add their deposits to forfeit pool\n        uint256 noShows = evt.confirmedCount - evt.attendedCount;\n        if (noShows > 0) {\n            evt.forfeitPool += (noShows * attendeeDepositAmount);\n        }\n    }\n\n    /**\n     * @notice Calculate refund amount based on cancellation timing\n     * @param evt Event storage reference\n     * @param depositAmount Original deposit amount\n     * @return refundAmount Amount to refund\n     */\n    function _calculateRefund(Event storage evt, uint256 depositAmount) private view returns (uint256) {\n        uint256 timeUntilStart = evt.startTime > block.timestamp ? evt.startTime - block.timestamp : 0;\n\n        if (timeUntilStart >= policy.fullRefundHours * 1 hours) {\n            // Early cancellation - full refund\n            return depositAmount;\n        } else if (timeUntilStart >= policy.partialRefundHours * 1 hours) {\n            // Late cancellation - partial refund\n            return (depositAmount * policy.partialRefundPercent) / 100;\n        } else {\n            // Very late or after start - no refund\n            return 0;\n        }\n    }\n\n    /**\n     * Distribute forfeit pool between organizer and attendees\n     * @param evt Event storage reference\n     * @dev Called during event completion\n     */\n    function _distributeForfeitsByPolicy(Event storage evt) private {\n        if (evt.forfeitPool == 0) return;\n\n        uint256 originalForfeitPool = evt.forfeitPool;\n        uint256 organizerShare = (originalForfeitPool * (100 - policy.attendeeSharePercent)) / 100;\n        uint256 attendeeShare = originalForfeitPool - organizerShare;\n\n        // Give organizer their share immediately\n        if (organizerShare > 0) {\n            balances[evt.organizer] += organizerShare;\n        }\n\n        // Calculate reward per attendee from attendee share\n        if (evt.attendedCount > 0 && attendeeShare > 0) {\n            evt.rewardPerAttendee = attendeeShare / evt.attendedCount;\n        } else {\n            evt.rewardPerAttendee = 0;\n        }\n    }\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                           VIEW FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════\n\n    /**\n     * @notice Get basic event information\n     * @param _eventId Event to query\n     */\n    function getEvent(\n        uint256 _eventId\n    )\n        external\n        view\n        returns (\n            address organizer,\n            string memory description,\n            uint64 startTime,\n            uint64 endTime,\n            uint32 capacity,\n            EventStatus status,\n            bool published,\n            uint32 confirmedCount,\n            uint32 attendedCount\n        )\n    {\n        Event storage evt = events[_eventId];\n        return (\n            evt.organizer,\n            evt.description,\n            evt.startTime,\n            evt.endTime,\n            evt.capacity,\n            evt.status,\n            evt.published,\n            evt.confirmedCount,\n            evt.attendedCount\n        );\n    }\n\n    /**\n     * @notice Get participant's registration status for an event\n     * @param _eventId Event ID\n     * @param _participant Participant address\n     * @return status Registration status\n     * @return exists Whether registration exists\n     */\n    function getRegistration(\n        uint256 _eventId,\n        address _participant\n    ) external view returns (RegStatus status, bool exists) {\n        Registration storage reg = events[_eventId].registrations[_participant];\n        return (reg.status, reg.exists);\n    }\n\n    /**\n     * @notice Get user's available balance\n     * @param _user User address\n     * @return Available balance\n     */\n    function getUserBalance(address _user) external view returns (uint256) {\n        return balances[_user];\n    }\n\n    /**\n     * @notice Calculate claimable payout for a participant\n     * @param _eventId Event ID\n     * @param _participant Participant address\n     * @return Claimable amount\n     */\n    function getClaimablePayout(uint256 _eventId, address _participant) external view returns (uint256) {\n        Event storage evt = events[_eventId];\n        Registration storage reg = evt.registrations[_participant];\n\n        // Check if claim is valid\n        if (\n            (evt.status != EventStatus.Completed && evt.status != EventStatus.Canceled) ||\n            !reg.exists ||\n            evt.rewardsClaimed[_participant]\n        ) {\n            return 0;\n        }\n\n        uint256 totalPayout = 0;\n\n        if (reg.status == RegStatus.Attended) {\n            totalPayout += attendeeDepositAmount; // Original deposit back\n            totalPayout += evt.rewardPerAttendee; // Share of forfeits\n        } else if (evt.status == EventStatus.Canceled) {\n            totalPayout += attendeeDepositAmount; // Full refund on cancellation\n        }\n\n        return totalPayout;\n    }\n\n    /**\n     * @notice Get current forfeit pool for an event\n     * @param _eventId Event ID\n     * @return Current forfeit pool amount\n     */\n    function getEventForfeitPool(uint256 _eventId) external view returns (uint256) {\n        return events[_eventId].forfeitPool;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
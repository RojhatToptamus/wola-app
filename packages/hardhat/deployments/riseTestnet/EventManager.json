{
  "address": "0x2209529450941ea837A013B0d5ec90E862a1b957",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "AccountCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBond",
          "type": "uint256"
        }
      ],
      "name": "BoundsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "CheckInClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "EventCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "EventCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "organizer",
          "type": "address"
        }
      ],
      "name": "EventCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "EventPublished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "ParticipantCheckedIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fullRefundHours",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partialRefundHours",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partialRefundPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "attendeeSharePercent",
          "type": "uint256"
        }
      ],
      "name": "PolicyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "RegistrationCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "RegistrationConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COMPLETION_DEADLINE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBond",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "cancelEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "cancelRegistration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        }
      ],
      "name": "checkIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "claimPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "closeCheckIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "completeEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bond",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_endTime",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_minAttendanceBps",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "_capacity",
          "type": "uint32"
        }
      ],
      "name": "createEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "events",
      "outputs": [
        {
          "internalType": "address",
          "name": "organizer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTime",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "minAttendanceBps",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "capacity",
          "type": "uint32"
        },
        {
          "internalType": "enum EventManager.EventStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "published",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "bondReleased",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "checkInClosed",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "confirmedCount",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "attendedCount",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "forfeitPool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerAttendee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        }
      ],
      "name": "getClaimablePayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "getEvent",
      "outputs": [
        {
          "internalType": "address",
          "name": "organizer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTime",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "minAttendanceBps",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "capacity",
          "type": "uint32"
        },
        {
          "internalType": "enum EventManager.EventStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "published",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "confirmedCount",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "attendedCount",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "getEventForfeitPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        }
      ],
      "name": "getRegistration",
      "outputs": [
        {
          "internalType": "enum EventManager.RegStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRegisteredUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fullRefundHours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "partialRefundHours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "partialRefundPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "attendeeSharePercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "publishEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "registerForEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBond",
          "type": "uint256"
        }
      ],
      "name": "setBounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fullRefundHours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_partialRefundHours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_partialRefundPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_attendeeSharePercent",
          "type": "uint256"
        }
      ],
      "name": "updatePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d54a2fe75096147c79ba6cd6da4b2757841034e3d38a84f9abf157f8ba1a075",
  "receipt": {
    "to": null,
    "from": "0xB957C7591bf8b8ad1e5B8942dE6FF3b1D22d4951",
    "contractAddress": "0x2209529450941ea837A013B0d5ec90E862a1b957",
    "transactionIndex": 8,
    "gasUsed": "2224592",
    "logsBloom": "0x00000000200000000000000000000000000000200000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000001800000000000000010000400000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "transactionHash": "0x3d54a2fe75096147c79ba6cd6da4b2757841034e3d38a84f9abf157f8ba1a075",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 22074217,
        "transactionHash": "0x3d54a2fe75096147c79ba6cd6da4b2757841034e3d38a84f9abf157f8ba1a075",
        "address": "0x2209529450941ea837A013B0d5ec90E862a1b957",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b957c7591bf8b8ad1e5b8942de6ff3b1d22d4951"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0x0000000000000000000000000000000000000000000000000000000000000000"
      }
    ],
    "blockNumber": 22074217,
    "cumulativeGasUsed": "3734381",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x617E9308eb2eBc07be4F62bC4b284c45EfF39907",
    "0xB957C7591bf8b8ad1e5B8942dE6FF3b1D22d4951"
  ],
  "numDeployments": 2,
  "solcInputHash": "1f51adb99bdad13518253dd2793503b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBond\",\"type\":\"uint256\"}],\"name\":\"BoundsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"CheckInClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"EventCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"EventCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"}],\"name\":\"EventCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"EventPublished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"ParticipantCheckedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fullRefundHours\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partialRefundHours\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partialRefundPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"attendeeSharePercent\",\"type\":\"uint256\"}],\"name\":\"PolicyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"RegistrationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"RegistrationConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMPLETION_DEADLINE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"cancelEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"cancelRegistration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"checkIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"claimPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"closeCheckIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"completeEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bond\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_minAttendanceBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_capacity\",\"type\":\"uint32\"}],\"name\":\"createEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minAttendanceBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"capacity\",\"type\":\"uint32\"},{\"internalType\":\"enum EventManager.EventStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"published\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bondReleased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"checkInClosed\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"confirmedCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"attendedCount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"forfeitPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerAttendee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getClaimablePayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getEvent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minAttendanceBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"capacity\",\"type\":\"uint32\"},{\"internalType\":\"enum EventManager.EventStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"published\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"confirmedCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"attendedCount\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getEventForfeitPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getRegistration\",\"outputs\":[{\"internalType\":\"enum EventManager.RegStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegisteredUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fullRefundHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partialRefundHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partialRefundPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attendeeSharePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"publishEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"registerForEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBond\",\"type\":\"uint256\"}],\"name\":\"setBounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fullRefundHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_partialRefundHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_partialRefundPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_attendeeSharePercent\",\"type\":\"uint256\"}],\"name\":\"updatePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Participants put down deposits that are forfeited if they don't attend.      Forfeits are shared among actual attendees as rewards for showing up.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"cancelEvent(uint256)\":{\"details\":\"Can be called by organizer or admin\",\"params\":{\"_eventId\":\"Event to cancel\"}},\"cancelRegistration(uint256)\":{\"params\":{\"_eventId\":\"Event to cancel registration for\"}},\"checkIn(uint256,address)\":{\"details\":\"Only callable by event organizer after event start time\",\"params\":{\"_eventId\":\"Event ID\",\"_participant\":\"Address to check in\"}},\"claimPayout(uint256)\":{\"details\":\"Returns deposit + reward share for attendees, or full deposit for canceled events\",\"params\":{\"_eventId\":\"Event to claim from\"}},\"closeCheckIn(uint256)\":{\"details\":\"Should be called after event ends, before completing\",\"params\":{\"_eventId\":\"Event to close check-in for\"}},\"completeEvent(uint256)\":{\"details\":\"Handles organizer bond, forfeit distribution, and reward calculation\",\"params\":{\"_eventId\":\"Event to complete\"}},\"createAccount()\":{\"details\":\"Simple gate to prevent accidental interactions\"},\"createEvent(uint256,uint256,uint64,uint64,uint16,uint32)\":{\"params\":{\"_bond\":\"Organizer bond (skin in the game)\",\"_capacity\":\"Maximum number of participants\",\"_deposit\":\"Required participant deposit amount\",\"_endTime\":\"When event ends (unix timestamp)\",\"_minAttendanceBps\":\"Minimum attendance rate in basis points (10000 = 100%)\",\"_startTime\":\"When event begins (unix timestamp)\"},\"returns\":{\"_0\":\"eventId The ID of the created event\"}},\"getClaimablePayout(uint256,address)\":{\"params\":{\"_eventId\":\"Event ID\",\"_participant\":\"Participant address\"},\"returns\":{\"_0\":\"Claimable amount\"}},\"getEvent(uint256)\":{\"params\":{\"_eventId\":\"Event to query\"}},\"getEventForfeitPool(uint256)\":{\"params\":{\"_eventId\":\"Event ID\"},\"returns\":{\"_0\":\"Current forfeit pool amount\"}},\"getRegistration(uint256,address)\":{\"params\":{\"_eventId\":\"Event ID\",\"_participant\":\"Participant address\"},\"returns\":{\"exists\":\"Whether registration exists\",\"status\":\"Registration status\"}},\"getUserBalance(address)\":{\"params\":{\"_user\":\"User address\"},\"returns\":{\"_0\":\"Available balance\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"publishEvent(uint256)\":{\"params\":{\"_eventId\":\"Event to publish\"}},\"registerForEvent(uint256)\":{\"params\":{\"_eventId\":\"Event to register for\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setBounds(uint256,uint256,uint256,uint256)\":{\"params\":{\"_maxBond\":\"Maximum allowed organizer bond\",\"_maxDeposit\":\"Maximum allowed participant deposit\",\"_minBond\":\"Minimum allowed organizer bond\",\"_minDeposit\":\"Minimum allowed participant deposit\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePolicy(uint256,uint256,uint256,uint256)\":{\"params\":{\"_attendeeSharePercent\":\"Percentage of forfeits going to attendees (0-100)\",\"_fullRefundHours\":\"Hours before event for 100% refund\",\"_partialRefundHours\":\"Hours before event for partial refund\",\"_partialRefundPercent\":\"Percentage refund in partial window (0-100)\"}},\"withdraw()\":{\"details\":\"Transfers entire balance to save gas\"}},\"title\":\"EventManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"COMPLETION_DEADLINE()\":{\"notice\":\"Time after event ends when anyone can complete it (24 hours)\"},\"balances(address)\":{\"notice\":\"User balances available for withdrawal\"},\"bounds()\":{\"notice\":\"Platform-wide bounds for deposits and bonds\"},\"cancelEvent(uint256)\":{\"notice\":\"Cancel event and trigger full refunds\"},\"cancelRegistration(uint256)\":{\"notice\":\"Cancel registration (may incur forfeit based on timing)\"},\"checkIn(uint256,address)\":{\"notice\":\"Check in a participant (marks them as attended)\"},\"claimPayout(uint256)\":{\"notice\":\"Claim payout after event completion/cancellation\"},\"closeCheckIn(uint256)\":{\"notice\":\"Close check-in period and process no-show forfeits\"},\"completeEvent(uint256)\":{\"notice\":\"Mark event as complete and process settlements\"},\"createAccount()\":{\"notice\":\"Create a user account (required before any other actions)\"},\"createEvent(uint256,uint256,uint64,uint64,uint16,uint32)\":{\"notice\":\"Create a new event (organizer pays bond upfront)\"},\"events(uint256)\":{\"notice\":\"All events stored by ID\"},\"getClaimablePayout(uint256,address)\":{\"notice\":\"Calculate claimable payout for a participant\"},\"getEvent(uint256)\":{\"notice\":\"Get basic event information\"},\"getEventForfeitPool(uint256)\":{\"notice\":\"Get current forfeit pool for an event\"},\"getRegistration(uint256,address)\":{\"notice\":\"Get participant's registration status for an event\"},\"getUserBalance(address)\":{\"notice\":\"Get user's available balance\"},\"isRegisteredUser(address)\":{\"notice\":\"Tracks if a user has created an account\"},\"nextEventId()\":{\"notice\":\"Next event ID to assign\"},\"policy()\":{\"notice\":\"Global refund policy configuration\"},\"publishEvent(uint256)\":{\"notice\":\"Make event visible and open for registration\"},\"registerForEvent(uint256)\":{\"notice\":\"Register for an event (pays deposit)\"},\"setBounds(uint256,uint256,uint256,uint256)\":{\"notice\":\"Update platform deposit and bond limits\"},\"token()\":{\"notice\":\"ERC20 token used for all deposits and bonds\"},\"updatePolicy(uint256,uint256,uint256,uint256)\":{\"notice\":\"Update global refund and forfeit policy\"},\"withdraw()\":{\"notice\":\"Withdraw available balance to external account\"}},\"notice\":\"Decentralized event management with accountability deposits\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EventManager.sol\":\"EventManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/EventManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title EventManager\\n * @notice Decentralized event management with accountability deposits\\n * @dev Participants put down deposits that are forfeited if they don't attend.\\n *      Forfeits are shared among actual attendees as rewards for showing up.\\n */\\ncontract EventManager is Ownable, ReentrancyGuard {\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                           IMMUTABLES & STATE\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /// @notice ERC20 token used for all deposits and bonds\\n    IERC20 public immutable token;\\n\\n    /// @notice Platform-wide bounds for deposits and bonds\\n    Bounds public bounds;\\n\\n    /// @notice Global refund policy configuration\\n    PolicyConfig public policy;\\n\\n    /// @notice Tracks if a user has created an account\\n    mapping(address => bool) public isRegisteredUser;\\n\\n    /// @notice User balances available for withdrawal\\n    mapping(address => uint256) public balances;\\n\\n    /// @notice All events stored by ID\\n    mapping(uint256 => Event) public events;\\n\\n    /// @notice Next event ID to assign\\n    uint256 public nextEventId = 1;\\n\\n    /// @notice Time after event ends when anyone can complete it (24 hours)\\n    uint256 public constant COMPLETION_DEADLINE = 24 hours;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                               STRUCTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /// @notice Platform limits for deposits and organizer bonds\\n    struct Bounds {\\n        uint256 minDeposit; // Minimum participant deposit\\n        uint256 maxDeposit; // Maximum participant deposit\\n        uint256 minBond; // Minimum organizer bond\\n        uint256 maxBond; // Maximum organizer bond\\n    }\\n\\n    /// @notice Global policy for refunds and forfeit distribution\\n    struct PolicyConfig {\\n        uint256 fullRefundHours; // Hours before event for 100% refund\\n        uint256 partialRefundHours; // Hours before event for partial refund\\n        uint256 partialRefundPercent; // Percent for partial refund (0-100)\\n        uint256 attendeeSharePercent; // Percent of forfeits going to attendees (0-100)\\n    }\\n\\n    /// @notice Individual participant registration\\n    struct Registration {\\n        RegStatus status; // Current registration state\\n        bool exists; // Whether registration record exists\\n    }\\n\\n    /// @notice Complete event data and state\\n    struct Event {\\n        // Basic event info\\n        address organizer; // Who created the event\\n        uint256 deposit; // Required participant deposit\\n        uint256 bond; // Organizer's skin-in-the-game bond\\n        uint64 startTime; // When event begins\\n        uint64 endTime; // When event ends (for completion deadline)\\n        uint16 minAttendanceBps; // Minimum attendance rate (basis points)\\n        uint32 capacity; // Maximum participants\\n        // State management\\n        EventStatus status; // Current event state\\n        bool published; // Whether visible to participants\\n        bool bondReleased; // Whether organizer bond was distributed\\n        bool checkInClosed; // Whether check-in period is closed\\n        // Participation tracking\\n        uint32 confirmedCount; // Number of confirmed registrations\\n        uint32 attendedCount; // Number who actually showed up\\n        // Financial state\\n        uint256 forfeitPool; // Total forfeited deposits\\n        uint256 rewardPerAttendee; // Fixed reward each attendee gets\\n        // Per-participant data\\n        mapping(address => Registration) registrations; // Registration status\\n        mapping(address => bool) rewardsClaimed; // Claim tracking\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                               ENUMS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /// @notice Event lifecycle states\\n    enum EventStatus {\\n        Created, // Event created but not visible\\n        Published, // Event visible and accepting registrations\\n        Canceled, // Event canceled (full refunds)\\n        Completed // Event finished (settlements processed)\\n    }\\n\\n    /// @notice Participant registration states\\n    enum RegStatus {\\n        None, // Not registered\\n        Confirmed, // Registered and deposit paid\\n        CanceledByParticipant, // Canceled before event\\n        Attended // Actually showed up\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                               EVENTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    event AccountCreated(address indexed user);\\n    event EventCreated(uint256 indexed eventId, address indexed organizer);\\n    event EventPublished(uint256 indexed eventId);\\n    event EventCanceled(uint256 indexed eventId);\\n    event EventCompleted(uint256 indexed eventId);\\n    event CheckInClosed(uint256 indexed eventId);\\n    event RegistrationConfirmed(uint256 indexed eventId, address indexed participant);\\n    event RegistrationCanceled(uint256 indexed eventId, address indexed participant);\\n    event ParticipantCheckedIn(uint256 indexed eventId, address indexed participant);\\n    event RewardsClaimed(uint256 indexed eventId, address indexed participant, uint256 amount);\\n    event Withdrawal(address indexed user, uint256 amount);\\n    event BoundsUpdated(uint256 minDeposit, uint256 maxDeposit, uint256 minBond, uint256 maxBond);\\n    event PolicyUpdated(\\n        uint256 fullRefundHours,\\n        uint256 partialRefundHours,\\n        uint256 partialRefundPercent,\\n        uint256 attendeeSharePercent\\n    );\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                             CONSTRUCTOR\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    constructor(address _token, address _owner) Ownable(_owner) {\\n        token = IERC20(_token);\\n\\n        // Set default platform bounds\\n        bounds = Bounds({\\n            minDeposit: 1e18, // 1 token minimum\\n            maxDeposit: 1000e18, // 1000 token maximum\\n            minBond: 10e18, // 10 token minimum organizer bond\\n            maxBond: 10000e18 // 10000 token maximum organizer bond\\n        });\\n\\n        // Set default refund policy\\n        policy = PolicyConfig({\\n            fullRefundHours: 24, // Full refund if cancel >24h before\\n            partialRefundHours: 2, // Partial refund if cancel >2h before\\n            partialRefundPercent: 50, // 50% refund in partial window\\n            attendeeSharePercent: 50 // 50% of forfeits go to attendees\\n        });\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                         ADMIN FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Update platform deposit and bond limits\\n     * @param _minDeposit Minimum allowed participant deposit\\n     * @param _maxDeposit Maximum allowed participant deposit\\n     * @param _minBond Minimum allowed organizer bond\\n     * @param _maxBond Maximum allowed organizer bond\\n     */\\n    function setBounds(\\n        uint256 _minDeposit,\\n        uint256 _maxDeposit,\\n        uint256 _minBond,\\n        uint256 _maxBond\\n    ) external onlyOwner {\\n        require(_minDeposit <= _maxDeposit, \\\"Invalid deposit bounds\\\");\\n        require(_minBond <= _maxBond, \\\"Invalid bond bounds\\\");\\n\\n        bounds = Bounds(_minDeposit, _maxDeposit, _minBond, _maxBond);\\n        emit BoundsUpdated(_minDeposit, _maxDeposit, _minBond, _maxBond);\\n    }\\n\\n    /**\\n     * @notice Update global refund and forfeit policy\\n     * @param _fullRefundHours Hours before event for 100% refund\\n     * @param _partialRefundHours Hours before event for partial refund\\n     * @param _partialRefundPercent Percentage refund in partial window (0-100)\\n     * @param _attendeeSharePercent Percentage of forfeits going to attendees (0-100)\\n     */\\n    function updatePolicy(\\n        uint256 _fullRefundHours,\\n        uint256 _partialRefundHours,\\n        uint256 _partialRefundPercent,\\n        uint256 _attendeeSharePercent\\n    ) external onlyOwner {\\n        require(_partialRefundPercent <= 100, \\\"Invalid partial refund percent\\\");\\n        require(_attendeeSharePercent <= 100, \\\"Invalid attendee share percent\\\");\\n        require(_fullRefundHours >= _partialRefundHours, \\\"Full refund hours must be >= partial\\\");\\n\\n        policy = PolicyConfig({\\n            fullRefundHours: _fullRefundHours,\\n            partialRefundHours: _partialRefundHours,\\n            partialRefundPercent: _partialRefundPercent,\\n            attendeeSharePercent: _attendeeSharePercent\\n        });\\n\\n        emit PolicyUpdated(_fullRefundHours, _partialRefundHours, _partialRefundPercent, _attendeeSharePercent);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                         ACCOUNT MANAGEMENT\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Create a user account (required before any other actions)\\n     * @dev Simple gate to prevent accidental interactions\\n     */\\n    function createAccount() external {\\n        require(!isRegisteredUser[msg.sender], \\\"Account already exists\\\");\\n        isRegisteredUser[msg.sender] = true;\\n        emit AccountCreated(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraw available balance to external account\\n     * @dev Transfers entire balance to save gas\\n     */\\n    function withdraw() external nonReentrant {\\n        uint256 amount = balances[msg.sender];\\n        require(amount > 0, \\\"No balance to withdraw\\\");\\n\\n        balances[msg.sender] = 0;\\n        token.transfer(msg.sender, amount);\\n\\n        emit Withdrawal(msg.sender, amount);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                         EVENT LIFECYCLE\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Create a new event (organizer pays bond upfront)\\n     * @param _deposit Required participant deposit amount\\n     * @param _bond Organizer bond (skin in the game)\\n     * @param _startTime When event begins (unix timestamp)\\n     * @param _endTime When event ends (unix timestamp)\\n     * @param _minAttendanceBps Minimum attendance rate in basis points (10000 = 100%)\\n     * @param _capacity Maximum number of participants\\n     * @return eventId The ID of the created event\\n     */\\n    function createEvent(\\n        uint256 _deposit,\\n        uint256 _bond,\\n        uint64 _startTime,\\n        uint64 _endTime,\\n        uint16 _minAttendanceBps,\\n        uint32 _capacity\\n    ) external nonReentrant returns (uint256) {\\n        require(isRegisteredUser[msg.sender], \\\"Must create account first\\\");\\n        require(_deposit >= bounds.minDeposit && _deposit <= bounds.maxDeposit, \\\"Invalid deposit amount\\\");\\n        require(_bond >= bounds.minBond && _bond <= bounds.maxBond, \\\"Invalid bond amount\\\");\\n        require(_startTime > block.timestamp, \\\"Start time must be in future\\\");\\n        require(_endTime > _startTime, \\\"End time must be after start time\\\");\\n        require(_minAttendanceBps <= 10000, \\\"Invalid attendance BPS\\\");\\n        require(_capacity > 0, \\\"Capacity must be positive\\\");\\n\\n        // Take organizer bond upfront\\n        token.transferFrom(msg.sender, address(this), _bond);\\n\\n        uint256 eventId = nextEventId++;\\n        Event storage newEvent = events[eventId];\\n        newEvent.organizer = msg.sender;\\n        newEvent.deposit = _deposit;\\n        newEvent.bond = _bond;\\n        newEvent.startTime = _startTime;\\n        newEvent.endTime = _endTime;\\n        newEvent.minAttendanceBps = _minAttendanceBps;\\n        newEvent.capacity = _capacity;\\n        newEvent.status = EventStatus.Created;\\n        newEvent.published = false;\\n\\n        emit EventCreated(eventId, msg.sender);\\n        return eventId;\\n    }\\n\\n    /**\\n     * @notice Make event visible and open for registration\\n     * @param _eventId Event to publish\\n     */\\n    function publishEvent(uint256 _eventId) external {\\n        Event storage evt = events[_eventId];\\n        require(evt.organizer == msg.sender, \\\"Only organizer can publish\\\");\\n        require(evt.status == EventStatus.Created, \\\"Event already published or finalized\\\");\\n\\n        evt.published = true;\\n        evt.status = EventStatus.Published;\\n\\n        emit EventPublished(_eventId);\\n    }\\n\\n    /**\\n     * @notice Cancel event and trigger full refunds\\n     * @param _eventId Event to cancel\\n     * @dev Can be called by organizer or admin\\n     */\\n    function cancelEvent(uint256 _eventId) external nonReentrant {\\n        Event storage evt = events[_eventId];\\n        require(evt.organizer == msg.sender || msg.sender == owner(), \\\"Only organizer or admin\\\");\\n        require(evt.status == EventStatus.Published, \\\"Event not active\\\");\\n\\n        evt.status = EventStatus.Canceled;\\n\\n        // Note: Participants get full refunds via claimPayout()\\n        emit EventCanceled(_eventId);\\n    }\\n\\n    /**\\n     * @notice Close check-in period and process no-show forfeits\\n     * @param _eventId Event to close check-in for\\n     * @dev Should be called after event ends, before completing\\n     */\\n    function closeCheckIn(uint256 _eventId) external {\\n        Event storage evt = events[_eventId];\\n        require(evt.organizer == msg.sender, \\\"Only organizer can close check-in\\\");\\n        require(evt.status == EventStatus.Published, \\\"Event not active\\\");\\n        require(block.timestamp >= evt.endTime, \\\"Event not ended yet\\\");\\n        require(!evt.checkInClosed, \\\"Check-in already closed\\\");\\n\\n        evt.checkInClosed = true;\\n\\n        // anyone confirmed but not attended forfeits deposit\\n        _processNoShowForfeits(evt);\\n\\n        emit CheckInClosed(_eventId);\\n    }\\n\\n    /**\\n     * @notice Mark event as complete and process settlements\\n     * @param _eventId Event to complete\\n     * @dev Handles organizer bond, forfeit distribution, and reward calculation\\n     */\\n    function completeEvent(uint256 _eventId) external nonReentrant {\\n        Event storage evt = events[_eventId];\\n\\n        // Anyone can complete after deadline passes\\n        bool isOrganizer = evt.organizer == msg.sender;\\n        bool isPastDeadline = block.timestamp >= evt.endTime + COMPLETION_DEADLINE;\\n        require(isOrganizer || isPastDeadline, \\\"Only organizer or after deadline\\\");\\n        require(evt.status == EventStatus.Published, \\\"Event not active\\\");\\n        require(!evt.bondReleased, \\\"Bond already released\\\");\\n\\n        // Ensure check-in is closed first\\n        if (!evt.checkInClosed) {\\n            evt.checkInClosed = true;\\n            _processNoShowForfeits(evt);\\n        }\\n\\n        evt.status = EventStatus.Completed;\\n        evt.bondReleased = true;\\n\\n        // Calculate actual attendance rate\\n        uint256 attendanceRate = evt.confirmedCount > 0 ? (evt.attendedCount * 10000) / evt.confirmedCount : 0;\\n\\n        // FIXED: Handle organizer bond based on attendance performance\\n        if (attendanceRate >= evt.minAttendanceBps) {\\n            // Met attendance target - full bond refund\\n            balances[evt.organizer] += evt.bond;\\n        } else {\\n            // FIXED: Corrected penalty calculation - penalty proportional to shortfall\\n            uint256 shortfall = evt.minAttendanceBps - attendanceRate;\\n            uint256 penalty = (evt.bond * shortfall) / 10000; // Use 10000 as denominator for basis points\\n            balances[evt.organizer] += (evt.bond - penalty);\\n            evt.forfeitPool += penalty;\\n        }\\n\\n        // Distribute forfeited deposits\\n        _distributeForfeitsByPolicy(evt);\\n\\n        emit EventCompleted(_eventId);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                      PARTICIPANT FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Register for an event (pays deposit)\\n     * @param _eventId Event to register for\\n     */\\n    function registerForEvent(uint256 _eventId) external nonReentrant {\\n        require(isRegisteredUser[msg.sender], \\\"Must create account first\\\");\\n\\n        Event storage evt = events[_eventId];\\n        require(evt.published, \\\"Event not published\\\");\\n        require(evt.status == EventStatus.Published, \\\"Registration not open\\\");\\n        require(evt.confirmedCount < evt.capacity, \\\"Event at capacity\\\");\\n        require(!evt.registrations[msg.sender].exists, \\\"Already registered\\\");\\n        // FIXED: Allow registration up to and including start time\\n        require(block.timestamp <= evt.startTime, \\\"Registration closed\\\");\\n\\n        // Take participant deposit\\n        token.transferFrom(msg.sender, address(this), evt.deposit);\\n\\n        evt.registrations[msg.sender] = Registration({ status: RegStatus.Confirmed, exists: true });\\n        evt.confirmedCount++;\\n\\n        emit RegistrationConfirmed(_eventId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Cancel registration (may incur forfeit based on timing)\\n     * @param _eventId Event to cancel registration for\\n     */\\n    function cancelRegistration(uint256 _eventId) external nonReentrant {\\n        Event storage evt = events[_eventId];\\n        Registration storage reg = evt.registrations[msg.sender];\\n\\n        require(reg.exists, \\\"Not registered\\\");\\n        require(reg.status == RegStatus.Confirmed, \\\"Registration not active\\\");\\n\\n        reg.status = RegStatus.CanceledByParticipant;\\n        evt.confirmedCount--;\\n\\n        // Calculate refund based on timing\\n        uint256 refundAmount = _calculateRefund(evt, evt.deposit);\\n        if (refundAmount > 0) {\\n            balances[msg.sender] += refundAmount;\\n        }\\n\\n        // Add forfeit to pool\\n        uint256 forfeitAmount = evt.deposit - refundAmount;\\n        if (forfeitAmount > 0) {\\n            evt.forfeitPool += forfeitAmount;\\n        }\\n\\n        emit RegistrationCanceled(_eventId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Claim payout after event completion/cancellation\\n     * @param _eventId Event to claim from\\n     * @dev Returns deposit + reward share for attendees, or full deposit for canceled events\\n     */\\n    function claimPayout(uint256 _eventId) external nonReentrant {\\n        Event storage evt = events[_eventId];\\n        Registration storage reg = evt.registrations[msg.sender];\\n\\n        require(evt.status == EventStatus.Completed || evt.status == EventStatus.Canceled, \\\"Event not finalized\\\");\\n        require(reg.exists, \\\"Not registered for event\\\");\\n        require(!evt.rewardsClaimed[msg.sender], \\\"Payout already claimed\\\");\\n\\n        // FIXED: Set claim flag immediately to prevent reentrancy\\n        evt.rewardsClaimed[msg.sender] = true;\\n\\n        uint256 totalPayout = 0;\\n\\n        if (reg.status == RegStatus.Attended) {\\n            // Attended: get deposit back + share of forfeit pool\\n            totalPayout += evt.deposit; // Original deposit\\n            totalPayout += evt.rewardPerAttendee; // Reward for showing up\\n        } else if (evt.status == EventStatus.Canceled) {\\n            // Event canceled: everyone gets full refund\\n            totalPayout += evt.deposit;\\n        }\\n        // Note: No payout for confirmed but didn't attend (forfeit)\\n\\n        if (totalPayout > 0) {\\n            balances[msg.sender] += totalPayout;\\n        }\\n\\n        emit RewardsClaimed(_eventId, msg.sender, totalPayout);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                      ORGANIZER FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Check in a participant (marks them as attended)\\n     * @param _eventId Event ID\\n     * @param _participant Address to check in\\n     * @dev Only callable by event organizer after event start time\\n     */\\n    function checkIn(uint256 _eventId, address _participant) external {\\n        Event storage evt = events[_eventId];\\n        require(evt.organizer == msg.sender, \\\"Only organizer can check-in\\\");\\n        require(evt.status == EventStatus.Published, \\\"Event not active\\\");\\n        require(block.timestamp >= evt.startTime, \\\"Event not started\\\");\\n        // FIXED: Prevent check-in after period is closed\\n        require(!evt.checkInClosed, \\\"Check-in period closed\\\");\\n\\n        Registration storage reg = evt.registrations[_participant];\\n        require(reg.exists, \\\"Participant not registered\\\");\\n        require(reg.status == RegStatus.Confirmed, \\\"Registration not confirmed\\\");\\n\\n        reg.status = RegStatus.Attended;\\n        evt.attendedCount++;\\n\\n        emit ParticipantCheckedIn(_eventId, _participant);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                         INTERNAL HELPERS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * FIXED: Process no-show forfeits for all confirmed but not attended participants\\n     * @param evt Event storage reference\\n     */\\n    function _processNoShowForfeits(Event storage evt) private {\\n        // Calculate no-shows and add their deposits to forfeit pool\\n        uint256 noShows = evt.confirmedCount - evt.attendedCount;\\n        if (noShows > 0) {\\n            evt.forfeitPool += (noShows * evt.deposit);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate refund amount based on cancellation timing\\n     * @param evt Event storage reference\\n     * @param depositAmount Original deposit amount\\n     * @return refundAmount Amount to refund\\n     */\\n    function _calculateRefund(Event storage evt, uint256 depositAmount) private view returns (uint256) {\\n        uint256 timeUntilStart = evt.startTime > block.timestamp ? evt.startTime - block.timestamp : 0;\\n\\n        if (timeUntilStart >= policy.fullRefundHours * 1 hours) {\\n            // Early cancellation - full refund\\n            return depositAmount;\\n        } else if (timeUntilStart >= policy.partialRefundHours * 1 hours) {\\n            // Late cancellation - partial refund\\n            return (depositAmount * policy.partialRefundPercent) / 100;\\n        } else {\\n            // Very late or after start - no refund\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * FIXED: Distribute forfeit pool between organizer and attendees correctly\\n     * @param evt Event storage reference\\n     * @dev Called during event completion\\n     */\\n    function _distributeForfeitsByPolicy(Event storage evt) private {\\n        if (evt.forfeitPool == 0) return;\\n\\n        // FIXED: Calculate shares from original forfeit pool amount\\n        uint256 originalForfeitPool = evt.forfeitPool;\\n        uint256 organizerShare = (originalForfeitPool * (100 - policy.attendeeSharePercent)) / 100;\\n        uint256 attendeeShare = originalForfeitPool - organizerShare;\\n\\n        // Give organizer their share immediately\\n        if (organizerShare > 0) {\\n            balances[evt.organizer] += organizerShare;\\n        }\\n\\n        // Calculate fixed reward per attendee from attendee share\\n        if (evt.attendedCount > 0 && attendeeShare > 0) {\\n            evt.rewardPerAttendee = attendeeShare / evt.attendedCount;\\n        } else {\\n            evt.rewardPerAttendee = 0;\\n        }\\n\\n        // Note: Attendee rewards distributed via claimPayout()\\n        // Any rounding dust stays in contract (acceptable for hackathon)\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                           VIEW FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Get basic event information\\n     * @param _eventId Event to query\\n     */\\n    function getEvent(\\n        uint256 _eventId\\n    )\\n        external\\n        view\\n        returns (\\n            address organizer,\\n            uint256 deposit,\\n            uint256 bond,\\n            uint64 startTime,\\n            uint64 endTime,\\n            uint16 minAttendanceBps,\\n            uint32 capacity,\\n            EventStatus status,\\n            bool published,\\n            uint32 confirmedCount,\\n            uint32 attendedCount\\n        )\\n    {\\n        Event storage evt = events[_eventId];\\n        return (\\n            evt.organizer,\\n            evt.deposit,\\n            evt.bond,\\n            evt.startTime,\\n            evt.endTime,\\n            evt.minAttendanceBps,\\n            evt.capacity,\\n            evt.status,\\n            evt.published,\\n            evt.confirmedCount,\\n            evt.attendedCount\\n        );\\n    }\\n\\n    /**\\n     * @notice Get participant's registration status for an event\\n     * @param _eventId Event ID\\n     * @param _participant Participant address\\n     * @return status Registration status\\n     * @return exists Whether registration exists\\n     */\\n    function getRegistration(\\n        uint256 _eventId,\\n        address _participant\\n    ) external view returns (RegStatus status, bool exists) {\\n        Registration storage reg = events[_eventId].registrations[_participant];\\n        return (reg.status, reg.exists);\\n    }\\n\\n    /**\\n     * @notice Get user's available balance\\n     * @param _user User address\\n     * @return Available balance\\n     */\\n    function getUserBalance(address _user) external view returns (uint256) {\\n        return balances[_user];\\n    }\\n\\n    /**\\n     * @notice Calculate claimable payout for a participant\\n     * @param _eventId Event ID\\n     * @param _participant Participant address\\n     * @return Claimable amount\\n     */\\n    function getClaimablePayout(uint256 _eventId, address _participant) external view returns (uint256) {\\n        Event storage evt = events[_eventId];\\n        Registration storage reg = evt.registrations[_participant];\\n\\n        // Check if claim is valid\\n        if (\\n            (evt.status != EventStatus.Completed && evt.status != EventStatus.Canceled) ||\\n            !reg.exists ||\\n            evt.rewardsClaimed[_participant]\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 totalPayout = 0;\\n\\n        if (reg.status == RegStatus.Attended) {\\n            totalPayout += evt.deposit; // Original deposit back\\n            totalPayout += evt.rewardPerAttendee; // Share of forfeits\\n        } else if (evt.status == EventStatus.Canceled) {\\n            totalPayout += evt.deposit; // Full refund on cancellation\\n        }\\n\\n        return totalPayout;\\n    }\\n\\n    /**\\n     * @notice Get current forfeit pool for an event\\n     * @param _eventId Event ID\\n     * @return Current forfeit pool amount\\n     */\\n    function getEventForfeitPool(uint256 _eventId) external view returns (uint256) {\\n        return events[_eventId].forfeitPool;\\n    }\\n}\\n\",\"keccak256\":\"0xe53f74b497df68d60fc711420bcbdea8ae4a126b6b9d4628e666203d7214ec98\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a03462000186576200248a90601f38839003908101601f19168201906001600160401b038211838310176200018b578083916040958694855283398101031262000186578062000052602092620001c1565b6001600160a01b0392909183916200006b9101620001c1565b1680156200016e57600080546001600160a01b03198116831782558416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3600180556001600d55166080526060620000c6620001a1565b670de0b6b3a7640000808252683635c9adc5dea0000090816020840152678ac7230489e8000092838682015269021e19e0c9bab24000009485910152600255600355600455600555603260606200011c620001a1565b6018815260026020820152828482015201526018600655600260075560326008556032600955516122b39081620001d7823960805181818161017701528181610e02015281816113f801526118960152f35b8351631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b60405190608082016001600160401b038111838210176200018b57604052565b51906001600160a01b0382168203620001865756fe608060408181526004918236101561001657600080fd5b600092833560e01c9182630505c8c914611dc45750816305ce358d14611c455781630b79143014611b4e5781631f5bdf5d14611b1057816327c465b01461195f57816327e235e3146112d35781633ccfd60b1461183a5781633e1458ce146117205781633f69babd14611630578163406db8431461130b57816347734892146112d35781635843a5ad146112965781635af778b41461127857816364dc6de01461121b5781636778ba78146111f05781636d1884e01461112d578163715018a6146110d35781637f56c7d114610d025781638a69614e14610aa15781638da5cb5b14610a79578163975d2502146108ff5781639b7aea75146106785781639dca362f146105da5781639dff20ac146105a85781639f9d903a14610589578163ad8d5eff14610350578163cfd9f3da14610235578163f2fde38b146101aa575063fc0c546a1461016457600080fd5b346101a657816003193601126101a657517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b905034610231576020366003190112610231576101c5611e3f565b906101ce611e6b565b6001600160a01b0391821692831561021b57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b905034610231576020366003190112610231578035808452600c60205282842080549193916001600160a01b0316330361030d576003019182549160ff8360b01c1661028081611e1f565b6102be57505061ffff60b01b191661010160b01b1790557f07686c23176326e4145b1f2801d466c9513d225ad3c5e11a485bae9973b808418280a280f35b906020608492519162461bcd60e51b83528201526024808201527f4576656e7420616c7265616479207075626c6973686564206f722066696e616c6044820152631a5e995960e21b6064820152fd5b815162461bcd60e51b8152602081850152601a60248201527f4f6e6c79206f7267616e697a65722063616e207075626c6973680000000000006044820152606490fd5b90503461023157816003193601126102315780359061036d611e55565b828552600c6020908152848620805490926001600160a01b0391821633036105465760038401546103af600160ff8360b01c166103a981611e1f565b14611f72565b67ffffffffffffffff8116421061050f5760c81c60ff166104d35716948587526007830182528087209182549160ff8360081c161561049057600160ff84166103f781611e1f565b0361044d57505060ff1916600317905501805463ffffffff61041a818316611ff4565b169063ffffffff19161790557f21071e72b9a540ee79a41c3929bd97a87a8d723eb72d52ef08c603328417b5808380a380f35b5162461bcd60e51b815280860191909152601a60248201527f526567697374726174696f6e206e6f7420636f6e6669726d65640000000000006044820152606490fd5b5162461bcd60e51b815280860191909152601a60248201527f5061727469636970616e74206e6f7420726567697374657265640000000000006044820152606490fd5b865162461bcd60e51b8152808601849052601660248201527510da1958dacb5a5b881c195c9a5bd90818db1bdcd95960521b6044820152606490fd5b875162461bcd60e51b81528087018590526011602482015270115d995b9d081b9bdd081cdd185c9d1959607a1b6044820152606490fd5b865162461bcd60e51b8152808601849052601b60248201527f4f6e6c79206f7267616e697a65722063616e20636865636b2d696e00000000006044820152606490fd5b5050346101a657816003193601126101a657602090600d549051908152f35b8284346105d757816003193601126105d757506105d06020926105c9611e55565b9035612191565b9051908152f35b80fd5b905034610231578260031936011261023157338352600a60205260ff828420541661063d5750338252600a6020528120600160ff19825416179055337f805996f252884581e2f74cf3d2b03564d5ec26ccc90850ae12653dc1b72d1fa28280a280f35b6020606492519162461bcd60e51b835282015260166024820152754163636f756e7420616c72656164792065786973747360501b6044820152fd5b8383346101a6576020908160031936011261023157833591610698611f03565b828452600c81528184209160018060a01b0390818454163314600385019081549067ffffffffffffffff82851c166201518081018091116108ec5781156108e1575b50156108a0576106f5600160ff8360b01c166103a981611e1f565b60ff8160c01c166108655760ff8160c81c1615610847575b50805462ff00ff60b01b19166201000360b01b179081905563ffffffff60d082901c811680158061083457612710838c8a01541602908382169182036108215761080e5761079398999a509061ffff9291045b169160801c168082106107be575050600b61078c92936002860154948654168952528620918254611fb1565b90556120d4565b7fbb85ff95aded757cf3b840cc38e6e719a2915827f28e3364f62cbefa25bbe2de8280a26001805580f35b6107ce6107fd9392600b92611fd4565b946107ec6127106107e460028a01549889611fe1565b048097611fd4565b948754168a52528720918254611fb1565b905561078c60058301918254611fb1565b634e487b7160e01b8a5260128b5260248afd5b634e487b7160e01b8b5260118c5260248bfd5b505087985061ffff906107939798610760565b60ff60c81b1916600160c81b17815561085f85612009565b8861070d565b825162461bcd60e51b8152808a018690526015602482015274109bdb9908185b1c9958591e481c995b19585cd959605a1b6044820152606490fd5b606489868086519262461bcd60e51b845283015260248201527f4f6e6c79206f7267616e697a6572206f7220616674657220646561646c696e656044820152fd5b90504210158a6106da565b634e487b7160e01b8a5260118b5260248afd5b839150346101a65760203660031901126101a6578035808352600c6020528383208054919290916001600160a01b03163303610a2c576003820190815490610952600160ff8460b01c166103a981611e1f565b67ffffffffffffffff82881c1642106109f35760ff8260c81c166109b0575060ff60c81b1916600160c81b17905561098990612009565b7fa06c27e213d7097ba1fb6dc326570195f90c66d55a76f7afa3222237843829668280a280f35b606490602088519162461bcd60e51b8352820152601760248201527f436865636b2d696e20616c726561647920636c6f7365640000000000000000006044820152fd5b606490602088519162461bcd60e51b83528201526013602482015272115d995b9d081b9bdd08195b991959081e595d606a1b6044820152fd5b608490602086519162461bcd60e51b8352820152602160248201527f4f6e6c79206f7267616e697a65722063616e20636c6f736520636865636b2d696044820152603760f91b6064820152fd5b5050346101a657816003193601126101a657905490516001600160a01b039091168152602090f35b90503461023157602080600319360112610cfe57813591610ac0611f03565b828552600c82528385209033865260078201835284862090600383019060ff825460b01c16610aee81611e1f565b60038114908115610cea575b5015610cb15760ff835460081c1615610c6e57600884019033895281865260ff888a205416610c3257503388528452858720600160ff19825416179055600360ff88935416610b4881611e1f565b03610bc05750816006610b85610b8e9360017f3300bdb359cfb956935bca32e9db727413eab1ca84341f2e36caea85bb7969689796015490611fb1565b91015490611fb1565b935b84610ba4575b519384523393a36001805580f35b338652600b8252808620610bb9868254611fb1565b9055610b96565b60ff600291969392965460b01c16610bd781611e1f565b14610c06575b50907f3300bdb359cfb956935bca32e9db727413eab1ca84341f2e36caea85bb79696891610b90565b6001015493507f3300bdb359cfb956935bca32e9db727413eab1ca84341f2e36caea85bb796968610bdd565b875162461bcd60e51b8152908101869052601660248201527514185e5bdd5d08185b1c9958591e4818db185a5b595960521b6044820152606490fd5b865162461bcd60e51b8152908101859052601860248201527f4e6f74207265676973746572656420666f72206576656e7400000000000000006044820152606490fd5b865162461bcd60e51b81529081018590526013602482015272115d995b9d081b9bdd08199a5b985b1a5e9959606a1b6044820152606490fd5b60029150610cf781611e1f565b1438610afa565b8380fd5b839150346101a65760c03660031901126101a657604492833567ffffffffffffffff8082168092036110cf5760648035918216918281036110cb576084359161ffff83168084036110c75760a4359463ffffffff8616928387036110c357610d68611f03565b338b5260209b600a8d52898c205460ff16610d8290611f26565b600254948b3595861015806110b7575b1561107e578b549460249485359687101580611072575b1561103a57428c1115610ff8578b1015610fac5761271010610f735715610f3457505087516323b872dd60e01b8152338a8201908152306020820152604081018490528c908290819003606001818e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af18015610f2a57610efd575b50600d54986000198a14610eec5750506fffffffffffffffff00000000000000009160039160018a01600d55898b52600c8c52888b2091336bffffffffffffffffffffffff60a01b84541617835560018301556002820155019467ffffffffffffffff60c01b8654161791861b16179061ffff60801b9060801b16179063ffffffff60901b9060901b161790555191817fe43349c008949cf6b65249356e6f918d4aaa0ca79f2b1166df4a4a98c9c16de2339280a3600180558152f35b634e487b7160e01b8b526011905289fd5b610f1c908c8d3d10610f23575b610f148183611ec9565b810190611eeb565b508b610e2f565b503d610f0a565b89513d8d823e3d90fd5b7f4361706163697479206d75737420626520706f736974697665000000000000009060198c93948f8d519562461bcd60e51b8752860152840152820152fd5b5075496e76616c696420617474656e64616e63652042505360501b9060168c93948f8d519562461bcd60e51b8752860152840152820152fd5b50508a917f456e642074696d65206d7573742062652061667465722073746172742074696d606560f81b928f6084966021918f519762461bcd60e51b8952880152860152840152820152fd5b5050507f53746172742074696d65206d75737420626520696e206675747572650000000090601c8c93948f8d519562461bcd60e51b8752860152840152820152fd5b50505072125b9d985b1a5908189bdb9908185b5bdd5b9d606a1b9060138c93948f8d519562461bcd60e51b8752860152840152820152fd5b50600554871115610da9565b5075125b9d985b1a590819195c1bdcda5d08185b5bdd5b9d60521b8b918e8c519362461bcd60e51b855284015260166024840152820152fd5b50600354861115610d92565b8a80fd5b8880fd5b8680fd5b8480fd5b83346105d757806003193601126105d7576110ec611e6b565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b90503461023157602036600319011261023157816101609382358152600c602052209060018060a01b038254169260018301549260028101549160038201549260ff8460b01c169263ffffffff9586910154169582519788526020880152818701528267ffffffffffffffff9182821660608901521c16608086015261ffff8260801c1660a0860152828260901c1660c08601526111ca81611e1f565b60e085015260ff8160b81c16151561010085015260d01c16610120830152610140820152f35b9050346102315760203660031901126102315781602093600592358152600c85522001549051908152f35b905034610231578160031936011261023157918192611238611e55565b90358252600c6020526007838320019060018060a01b03168252602052205460ff8082169183519261126981611e1f565b835260081c1615156020820152f35b5050346101a657816003193601126101a65760209051620151808152f35b8284346105d757806003193601126105d7575060025460035492546005549251918252602082019390935260408101929092526060820152608090f35b5050346101a65760203660031901126101a65760209181906001600160a01b036112fb611e3f565b168152600b845220549051908152f35b9190503461023157602080600319360112610cfe5782359161132b611f03565b338552600a825261134160ff8287205416611f26565b828552600c825280852093600385019283549260ff8460b81c16156115f95760ff8460b01c169661137188611e1f565b60018098036115bf5763ffffffff94858160901c16868260d01c161015611588576007820191338b5282855260ff848c205460081c166115505767ffffffffffffffff80921642116115175789015483516323b872dd60e01b81523387820190815230602082015260408101929092529085908290819003606001818e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1801561150d576114f0575b50825194858401918211868310176114dd5750916114b29695939161149295938252898452828401928a8452338c5252892091519061146382611e1f565b61146c82611e1f565b60ff61ff0084549251151560081b1692169061ffff191617179055825460d01c16611ff4565b815463ffffffff60d01b191660d09190911b63ffffffff60d01b16179055565b33907fbffc23fac5cf8c1d58b292d148168dbea7741d95e8db7b124b4b2e7d5ba86a0f8480a3805580f35b634e487b7160e01b8b526041905260248afd5b61150690853d8711610f2357610f148183611ec9565b5038611425565b84513d8d823e3d90fd5b835162461bcd60e51b81528087018690526013602482015272149959da5cdd1c985d1a5bdb8818db1bdcd959606a1b6044820152606490fd5b835162461bcd60e51b81528087018690526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606490fd5b50505162461bcd60e51b81529182015260116024820152704576656e7420617420636170616369747960781b604482015260649150fd5b505162461bcd60e51b81529182015260156024820152742932b3b4b9ba3930ba34b7b7103737ba1037b832b760591b604482015260649150fd5b5162461bcd60e51b8152918201526013602482015272115d995b9d081b9bdd081c1d589b1a5cda1959606a1b604482015260649150fd5b919050346102315760203660031901126102315781359161164f611f03565b828452600c6020528184208054909290336001600160a01b0391821614908115611713575b50156116d05750506003018054611696600160ff8360b01c166103a981611e1f565b60ff60b01b1916600160b11b1790557fceaf11772900fe569752a0207c8639fb8228eb8663456dc9eaa3a08f927a87058280a26001805580f35b906020606492519162461bcd60e51b8352820152601760248201527f4f6e6c79206f7267616e697a6572206f722061646d696e0000000000000000006044820152fd5b9050855416331438611674565b839150346101a65761173136611dfc565b919361173b611e6b565b8484116117fe578282116117c55790868184936117bf9560607fd68221cc58e004286ec51a7c9902146c88e8fd87582bac11c4f27790fc93ead69a9b5161178181611e97565b8981528a6020820152848682015201528660025587600355558260055551948594859094939260609260808301968352602083015260408201520152565b0390a180f35b606490602088519162461bcd60e51b83528201526013602482015272496e76616c696420626f6e6420626f756e647360681b6044820152fd5b606490602088519162461bcd60e51b83528201526016602482015275496e76616c6964206465706f73697420626f756e647360501b6044820152fd5b91905034610231578260031936011261023157611855611f03565b3383526020600b8152818420549182156119255733808652600b8352818620869055815163a9059cbb60e01b815294850152602484018390528184604481887f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af193841561191b577f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6593946118fe575b50519283523392a26001805580f35b61191490833d8511610f2357610f148183611ec9565b50386118ef565b81513d87823e3d90fd5b5162461bcd60e51b8152928301525060166024820152754e6f2062616c616e636520746f20776974686472617760501b6044820152606490fd5b8383346101a657602090816003193601126102315783359161197f611f03565b828452600c815281842091338552600783018252808520805460ff8160081c1615611adc57600160ff82166119b381611e1f565b03611a995760ff1916600217905560038301805460d01c63ffffffff168015611a8657815463ffffffff60d01b191660001990910160d01b63ffffffff60d01b16179055611a1b91906001840190611a0c825486612054565b9283611a69575b505054611fd4565b9081611a51575b505033907f28c1ca19ece093493fee87eac2cdf7cf4b2afe22d1932b761b994129a95c90cc8380a36001805580f35b6005611a609101918254611fb1565b90558280611a22565b600b90338952528620611a7d838254611fb1565b90558680611a13565b634e487b7160e01b875260118852602487fd5b825162461bcd60e51b8152808901859052601760248201527f526567697374726174696f6e206e6f74206163746976650000000000000000006044820152606490fd5b825162461bcd60e51b8152808901859052600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606490fd5b5050346101a65760203660031901126101a65760209160ff9082906001600160a01b03611b3b611e3f565b168152600a855220541690519015158152f35b90503461023157602036600319011261023157816101e09382358152600c6020522060018060a01b038154169260018201549260028301549160038401549060ff8260b01c169063ffffffff8094870154169460066005880154970154978251998a5260208a0152818901528267ffffffffffffffff9182821660608b01521c16608088015261ffff8260801c1660a0880152828260901c1660c0880152611bf581611e1f565b60e087015260ff8160b81c16151561010087015260ff8160c01c16151561012087015260ff8160c81c16151561014087015260d01c166101608501526101808401526101a08301526101c0820152f35b839150346101a657611c5636611dfc565b9193611c60611e6b565b60648211611d815760648311611d3e57848410611cef5750906117bf91868260607f96eb93ab96e9a32e925882f91deeb81d6f79574242a67a2f79969d2f1302c814989951611cae81611e97565b878152886020820152848482015201528460065585600755816008558260095551948594859094939260609260808301968352602083015260408201520152565b608490602088519162461bcd60e51b83528201526024808201527f46756c6c20726566756e6420686f757273206d757374206265203e3d207061726044820152631d1a585b60e21b6064820152fd5b606490602088519162461bcd60e51b8352820152601e60248201527f496e76616c696420617474656e6465652073686172652070657263656e7400006044820152fd5b606490602088519162461bcd60e51b8352820152601e60248201527f496e76616c6964207061727469616c20726566756e642070657263656e7400006044820152fd5b84346105d757806003193601126105d75750600654600754600854600954928452602084019190915260408301526060820152608090f35b6080906003190112611e1a5760043590602435906044359060643590565b600080fd5b60041115611e2957565b634e487b7160e01b600052602160045260246000fd5b600435906001600160a01b0382168203611e1a57565b602435906001600160a01b0382168203611e1a57565b6000546001600160a01b03163303611e7f57565b60405163118cdaa760e01b8152336004820152602490fd5b6080810190811067ffffffffffffffff821117611eb357604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117611eb357604052565b90816020910312611e1a57518015158103611e1a5790565b600260015414611f14576002600155565b604051633ee5aeb560e01b8152600490fd5b15611f2d57565b60405162461bcd60e51b815260206004820152601960248201527f4d75737420637265617465206163636f756e74206669727374000000000000006044820152606490fd5b15611f7957565b60405162461bcd60e51b815260206004820152601060248201526f4576656e74206e6f742061637469766560801b6044820152606490fd5b91908201809211611fbe57565b634e487b7160e01b600052601160045260246000fd5b91908203918211611fbe57565b81810292918115918404141715611fbe57565b63ffffffff809116908114611fbe5760010190565b63ffffffff80600383015460d01c16816004840154169003818111611fbe571680612032575050565b600561204661205092600185015490611fe1565b9201918254611fb1565b9055565b6003015460009067ffffffffffffffff16428111156120ce5761207991504290611fd4565b60065490610e109182810290808204841490151715611fbe57811061209d57505090565b600754828102928184041490151715611fbe57106120c8576120c460649160085490611fe1565b0490565b50600090565b50612079565b6005810154801561218d5760095460640360648111611fbe5760646120fc6121049284611fe1565b048092611fd4565b9080612163575b506004820163ffffffff908181541615158061215a575b1561214e57541680156121385760069104910155565b634e487b7160e01b600052601260045260246000fd5b50505060066000910155565b50821515612122565b60018060a01b03835416600052600b6020526121856040600020918254611fb1565b90553861210b565b5050565b906000918252600c602052604082209060018060a01b031680835260078201602052604083209260ff600384015460b01c16916121cd83611e1f565b60038314159081612267575b8115612257575b811561223f575b506122385760ff6003919454166121fd81611e1f565b0361221a57506006610b8561221793600184015490611fb1565b90565b80612226600292611e1f565b1461222f575090565b60019150015490565b9250505090565b82525060088301602052604081205460ff16386121e7565b855460081c60ff161591506121e0565b905061227283611e1f565b6002831415906121d956fea26469706673582212202b79cfcf2a8850eb62c7324caf5a8d0f3c1915b264188452b20738f62dec3cdb64736f6c63430008140033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c9182630505c8c914611dc45750816305ce358d14611c455781630b79143014611b4e5781631f5bdf5d14611b1057816327c465b01461195f57816327e235e3146112d35781633ccfd60b1461183a5781633e1458ce146117205781633f69babd14611630578163406db8431461130b57816347734892146112d35781635843a5ad146112965781635af778b41461127857816364dc6de01461121b5781636778ba78146111f05781636d1884e01461112d578163715018a6146110d35781637f56c7d114610d025781638a69614e14610aa15781638da5cb5b14610a79578163975d2502146108ff5781639b7aea75146106785781639dca362f146105da5781639dff20ac146105a85781639f9d903a14610589578163ad8d5eff14610350578163cfd9f3da14610235578163f2fde38b146101aa575063fc0c546a1461016457600080fd5b346101a657816003193601126101a657517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b905034610231576020366003190112610231576101c5611e3f565b906101ce611e6b565b6001600160a01b0391821692831561021b57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b905034610231576020366003190112610231578035808452600c60205282842080549193916001600160a01b0316330361030d576003019182549160ff8360b01c1661028081611e1f565b6102be57505061ffff60b01b191661010160b01b1790557f07686c23176326e4145b1f2801d466c9513d225ad3c5e11a485bae9973b808418280a280f35b906020608492519162461bcd60e51b83528201526024808201527f4576656e7420616c7265616479207075626c6973686564206f722066696e616c6044820152631a5e995960e21b6064820152fd5b815162461bcd60e51b8152602081850152601a60248201527f4f6e6c79206f7267616e697a65722063616e207075626c6973680000000000006044820152606490fd5b90503461023157816003193601126102315780359061036d611e55565b828552600c6020908152848620805490926001600160a01b0391821633036105465760038401546103af600160ff8360b01c166103a981611e1f565b14611f72565b67ffffffffffffffff8116421061050f5760c81c60ff166104d35716948587526007830182528087209182549160ff8360081c161561049057600160ff84166103f781611e1f565b0361044d57505060ff1916600317905501805463ffffffff61041a818316611ff4565b169063ffffffff19161790557f21071e72b9a540ee79a41c3929bd97a87a8d723eb72d52ef08c603328417b5808380a380f35b5162461bcd60e51b815280860191909152601a60248201527f526567697374726174696f6e206e6f7420636f6e6669726d65640000000000006044820152606490fd5b5162461bcd60e51b815280860191909152601a60248201527f5061727469636970616e74206e6f7420726567697374657265640000000000006044820152606490fd5b865162461bcd60e51b8152808601849052601660248201527510da1958dacb5a5b881c195c9a5bd90818db1bdcd95960521b6044820152606490fd5b875162461bcd60e51b81528087018590526011602482015270115d995b9d081b9bdd081cdd185c9d1959607a1b6044820152606490fd5b865162461bcd60e51b8152808601849052601b60248201527f4f6e6c79206f7267616e697a65722063616e20636865636b2d696e00000000006044820152606490fd5b5050346101a657816003193601126101a657602090600d549051908152f35b8284346105d757816003193601126105d757506105d06020926105c9611e55565b9035612191565b9051908152f35b80fd5b905034610231578260031936011261023157338352600a60205260ff828420541661063d5750338252600a6020528120600160ff19825416179055337f805996f252884581e2f74cf3d2b03564d5ec26ccc90850ae12653dc1b72d1fa28280a280f35b6020606492519162461bcd60e51b835282015260166024820152754163636f756e7420616c72656164792065786973747360501b6044820152fd5b8383346101a6576020908160031936011261023157833591610698611f03565b828452600c81528184209160018060a01b0390818454163314600385019081549067ffffffffffffffff82851c166201518081018091116108ec5781156108e1575b50156108a0576106f5600160ff8360b01c166103a981611e1f565b60ff8160c01c166108655760ff8160c81c1615610847575b50805462ff00ff60b01b19166201000360b01b179081905563ffffffff60d082901c811680158061083457612710838c8a01541602908382169182036108215761080e5761079398999a509061ffff9291045b169160801c168082106107be575050600b61078c92936002860154948654168952528620918254611fb1565b90556120d4565b7fbb85ff95aded757cf3b840cc38e6e719a2915827f28e3364f62cbefa25bbe2de8280a26001805580f35b6107ce6107fd9392600b92611fd4565b946107ec6127106107e460028a01549889611fe1565b048097611fd4565b948754168a52528720918254611fb1565b905561078c60058301918254611fb1565b634e487b7160e01b8a5260128b5260248afd5b634e487b7160e01b8b5260118c5260248bfd5b505087985061ffff906107939798610760565b60ff60c81b1916600160c81b17815561085f85612009565b8861070d565b825162461bcd60e51b8152808a018690526015602482015274109bdb9908185b1c9958591e481c995b19585cd959605a1b6044820152606490fd5b606489868086519262461bcd60e51b845283015260248201527f4f6e6c79206f7267616e697a6572206f7220616674657220646561646c696e656044820152fd5b90504210158a6106da565b634e487b7160e01b8a5260118b5260248afd5b839150346101a65760203660031901126101a6578035808352600c6020528383208054919290916001600160a01b03163303610a2c576003820190815490610952600160ff8460b01c166103a981611e1f565b67ffffffffffffffff82881c1642106109f35760ff8260c81c166109b0575060ff60c81b1916600160c81b17905561098990612009565b7fa06c27e213d7097ba1fb6dc326570195f90c66d55a76f7afa3222237843829668280a280f35b606490602088519162461bcd60e51b8352820152601760248201527f436865636b2d696e20616c726561647920636c6f7365640000000000000000006044820152fd5b606490602088519162461bcd60e51b83528201526013602482015272115d995b9d081b9bdd08195b991959081e595d606a1b6044820152fd5b608490602086519162461bcd60e51b8352820152602160248201527f4f6e6c79206f7267616e697a65722063616e20636c6f736520636865636b2d696044820152603760f91b6064820152fd5b5050346101a657816003193601126101a657905490516001600160a01b039091168152602090f35b90503461023157602080600319360112610cfe57813591610ac0611f03565b828552600c82528385209033865260078201835284862090600383019060ff825460b01c16610aee81611e1f565b60038114908115610cea575b5015610cb15760ff835460081c1615610c6e57600884019033895281865260ff888a205416610c3257503388528452858720600160ff19825416179055600360ff88935416610b4881611e1f565b03610bc05750816006610b85610b8e9360017f3300bdb359cfb956935bca32e9db727413eab1ca84341f2e36caea85bb7969689796015490611fb1565b91015490611fb1565b935b84610ba4575b519384523393a36001805580f35b338652600b8252808620610bb9868254611fb1565b9055610b96565b60ff600291969392965460b01c16610bd781611e1f565b14610c06575b50907f3300bdb359cfb956935bca32e9db727413eab1ca84341f2e36caea85bb79696891610b90565b6001015493507f3300bdb359cfb956935bca32e9db727413eab1ca84341f2e36caea85bb796968610bdd565b875162461bcd60e51b8152908101869052601660248201527514185e5bdd5d08185b1c9958591e4818db185a5b595960521b6044820152606490fd5b865162461bcd60e51b8152908101859052601860248201527f4e6f74207265676973746572656420666f72206576656e7400000000000000006044820152606490fd5b865162461bcd60e51b81529081018590526013602482015272115d995b9d081b9bdd08199a5b985b1a5e9959606a1b6044820152606490fd5b60029150610cf781611e1f565b1438610afa565b8380fd5b839150346101a65760c03660031901126101a657604492833567ffffffffffffffff8082168092036110cf5760648035918216918281036110cb576084359161ffff83168084036110c75760a4359463ffffffff8616928387036110c357610d68611f03565b338b5260209b600a8d52898c205460ff16610d8290611f26565b600254948b3595861015806110b7575b1561107e578b549460249485359687101580611072575b1561103a57428c1115610ff8578b1015610fac5761271010610f735715610f3457505087516323b872dd60e01b8152338a8201908152306020820152604081018490528c908290819003606001818e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af18015610f2a57610efd575b50600d54986000198a14610eec5750506fffffffffffffffff00000000000000009160039160018a01600d55898b52600c8c52888b2091336bffffffffffffffffffffffff60a01b84541617835560018301556002820155019467ffffffffffffffff60c01b8654161791861b16179061ffff60801b9060801b16179063ffffffff60901b9060901b161790555191817fe43349c008949cf6b65249356e6f918d4aaa0ca79f2b1166df4a4a98c9c16de2339280a3600180558152f35b634e487b7160e01b8b526011905289fd5b610f1c908c8d3d10610f23575b610f148183611ec9565b810190611eeb565b508b610e2f565b503d610f0a565b89513d8d823e3d90fd5b7f4361706163697479206d75737420626520706f736974697665000000000000009060198c93948f8d519562461bcd60e51b8752860152840152820152fd5b5075496e76616c696420617474656e64616e63652042505360501b9060168c93948f8d519562461bcd60e51b8752860152840152820152fd5b50508a917f456e642074696d65206d7573742062652061667465722073746172742074696d606560f81b928f6084966021918f519762461bcd60e51b8952880152860152840152820152fd5b5050507f53746172742074696d65206d75737420626520696e206675747572650000000090601c8c93948f8d519562461bcd60e51b8752860152840152820152fd5b50505072125b9d985b1a5908189bdb9908185b5bdd5b9d606a1b9060138c93948f8d519562461bcd60e51b8752860152840152820152fd5b50600554871115610da9565b5075125b9d985b1a590819195c1bdcda5d08185b5bdd5b9d60521b8b918e8c519362461bcd60e51b855284015260166024840152820152fd5b50600354861115610d92565b8a80fd5b8880fd5b8680fd5b8480fd5b83346105d757806003193601126105d7576110ec611e6b565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b90503461023157602036600319011261023157816101609382358152600c602052209060018060a01b038254169260018301549260028101549160038201549260ff8460b01c169263ffffffff9586910154169582519788526020880152818701528267ffffffffffffffff9182821660608901521c16608086015261ffff8260801c1660a0860152828260901c1660c08601526111ca81611e1f565b60e085015260ff8160b81c16151561010085015260d01c16610120830152610140820152f35b9050346102315760203660031901126102315781602093600592358152600c85522001549051908152f35b905034610231578160031936011261023157918192611238611e55565b90358252600c6020526007838320019060018060a01b03168252602052205460ff8082169183519261126981611e1f565b835260081c1615156020820152f35b5050346101a657816003193601126101a65760209051620151808152f35b8284346105d757806003193601126105d7575060025460035492546005549251918252602082019390935260408101929092526060820152608090f35b5050346101a65760203660031901126101a65760209181906001600160a01b036112fb611e3f565b168152600b845220549051908152f35b9190503461023157602080600319360112610cfe5782359161132b611f03565b338552600a825261134160ff8287205416611f26565b828552600c825280852093600385019283549260ff8460b81c16156115f95760ff8460b01c169661137188611e1f565b60018098036115bf5763ffffffff94858160901c16868260d01c161015611588576007820191338b5282855260ff848c205460081c166115505767ffffffffffffffff80921642116115175789015483516323b872dd60e01b81523387820190815230602082015260408101929092529085908290819003606001818e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1801561150d576114f0575b50825194858401918211868310176114dd5750916114b29695939161149295938252898452828401928a8452338c5252892091519061146382611e1f565b61146c82611e1f565b60ff61ff0084549251151560081b1692169061ffff191617179055825460d01c16611ff4565b815463ffffffff60d01b191660d09190911b63ffffffff60d01b16179055565b33907fbffc23fac5cf8c1d58b292d148168dbea7741d95e8db7b124b4b2e7d5ba86a0f8480a3805580f35b634e487b7160e01b8b526041905260248afd5b61150690853d8711610f2357610f148183611ec9565b5038611425565b84513d8d823e3d90fd5b835162461bcd60e51b81528087018690526013602482015272149959da5cdd1c985d1a5bdb8818db1bdcd959606a1b6044820152606490fd5b835162461bcd60e51b81528087018690526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606490fd5b50505162461bcd60e51b81529182015260116024820152704576656e7420617420636170616369747960781b604482015260649150fd5b505162461bcd60e51b81529182015260156024820152742932b3b4b9ba3930ba34b7b7103737ba1037b832b760591b604482015260649150fd5b5162461bcd60e51b8152918201526013602482015272115d995b9d081b9bdd081c1d589b1a5cda1959606a1b604482015260649150fd5b919050346102315760203660031901126102315781359161164f611f03565b828452600c6020528184208054909290336001600160a01b0391821614908115611713575b50156116d05750506003018054611696600160ff8360b01c166103a981611e1f565b60ff60b01b1916600160b11b1790557fceaf11772900fe569752a0207c8639fb8228eb8663456dc9eaa3a08f927a87058280a26001805580f35b906020606492519162461bcd60e51b8352820152601760248201527f4f6e6c79206f7267616e697a6572206f722061646d696e0000000000000000006044820152fd5b9050855416331438611674565b839150346101a65761173136611dfc565b919361173b611e6b565b8484116117fe578282116117c55790868184936117bf9560607fd68221cc58e004286ec51a7c9902146c88e8fd87582bac11c4f27790fc93ead69a9b5161178181611e97565b8981528a6020820152848682015201528660025587600355558260055551948594859094939260609260808301968352602083015260408201520152565b0390a180f35b606490602088519162461bcd60e51b83528201526013602482015272496e76616c696420626f6e6420626f756e647360681b6044820152fd5b606490602088519162461bcd60e51b83528201526016602482015275496e76616c6964206465706f73697420626f756e647360501b6044820152fd5b91905034610231578260031936011261023157611855611f03565b3383526020600b8152818420549182156119255733808652600b8352818620869055815163a9059cbb60e01b815294850152602484018390528184604481887f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af193841561191b577f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6593946118fe575b50519283523392a26001805580f35b61191490833d8511610f2357610f148183611ec9565b50386118ef565b81513d87823e3d90fd5b5162461bcd60e51b8152928301525060166024820152754e6f2062616c616e636520746f20776974686472617760501b6044820152606490fd5b8383346101a657602090816003193601126102315783359161197f611f03565b828452600c815281842091338552600783018252808520805460ff8160081c1615611adc57600160ff82166119b381611e1f565b03611a995760ff1916600217905560038301805460d01c63ffffffff168015611a8657815463ffffffff60d01b191660001990910160d01b63ffffffff60d01b16179055611a1b91906001840190611a0c825486612054565b9283611a69575b505054611fd4565b9081611a51575b505033907f28c1ca19ece093493fee87eac2cdf7cf4b2afe22d1932b761b994129a95c90cc8380a36001805580f35b6005611a609101918254611fb1565b90558280611a22565b600b90338952528620611a7d838254611fb1565b90558680611a13565b634e487b7160e01b875260118852602487fd5b825162461bcd60e51b8152808901859052601760248201527f526567697374726174696f6e206e6f74206163746976650000000000000000006044820152606490fd5b825162461bcd60e51b8152808901859052600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606490fd5b5050346101a65760203660031901126101a65760209160ff9082906001600160a01b03611b3b611e3f565b168152600a855220541690519015158152f35b90503461023157602036600319011261023157816101e09382358152600c6020522060018060a01b038154169260018201549260028301549160038401549060ff8260b01c169063ffffffff8094870154169460066005880154970154978251998a5260208a0152818901528267ffffffffffffffff9182821660608b01521c16608088015261ffff8260801c1660a0880152828260901c1660c0880152611bf581611e1f565b60e087015260ff8160b81c16151561010087015260ff8160c01c16151561012087015260ff8160c81c16151561014087015260d01c166101608501526101808401526101a08301526101c0820152f35b839150346101a657611c5636611dfc565b9193611c60611e6b565b60648211611d815760648311611d3e57848410611cef5750906117bf91868260607f96eb93ab96e9a32e925882f91deeb81d6f79574242a67a2f79969d2f1302c814989951611cae81611e97565b878152886020820152848482015201528460065585600755816008558260095551948594859094939260609260808301968352602083015260408201520152565b608490602088519162461bcd60e51b83528201526024808201527f46756c6c20726566756e6420686f757273206d757374206265203e3d207061726044820152631d1a585b60e21b6064820152fd5b606490602088519162461bcd60e51b8352820152601e60248201527f496e76616c696420617474656e6465652073686172652070657263656e7400006044820152fd5b606490602088519162461bcd60e51b8352820152601e60248201527f496e76616c6964207061727469616c20726566756e642070657263656e7400006044820152fd5b84346105d757806003193601126105d75750600654600754600854600954928452602084019190915260408301526060820152608090f35b6080906003190112611e1a5760043590602435906044359060643590565b600080fd5b60041115611e2957565b634e487b7160e01b600052602160045260246000fd5b600435906001600160a01b0382168203611e1a57565b602435906001600160a01b0382168203611e1a57565b6000546001600160a01b03163303611e7f57565b60405163118cdaa760e01b8152336004820152602490fd5b6080810190811067ffffffffffffffff821117611eb357604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117611eb357604052565b90816020910312611e1a57518015158103611e1a5790565b600260015414611f14576002600155565b604051633ee5aeb560e01b8152600490fd5b15611f2d57565b60405162461bcd60e51b815260206004820152601960248201527f4d75737420637265617465206163636f756e74206669727374000000000000006044820152606490fd5b15611f7957565b60405162461bcd60e51b815260206004820152601060248201526f4576656e74206e6f742061637469766560801b6044820152606490fd5b91908201809211611fbe57565b634e487b7160e01b600052601160045260246000fd5b91908203918211611fbe57565b81810292918115918404141715611fbe57565b63ffffffff809116908114611fbe5760010190565b63ffffffff80600383015460d01c16816004840154169003818111611fbe571680612032575050565b600561204661205092600185015490611fe1565b9201918254611fb1565b9055565b6003015460009067ffffffffffffffff16428111156120ce5761207991504290611fd4565b60065490610e109182810290808204841490151715611fbe57811061209d57505090565b600754828102928184041490151715611fbe57106120c8576120c460649160085490611fe1565b0490565b50600090565b50612079565b6005810154801561218d5760095460640360648111611fbe5760646120fc6121049284611fe1565b048092611fd4565b9080612163575b506004820163ffffffff908181541615158061215a575b1561214e57541680156121385760069104910155565b634e487b7160e01b600052601260045260246000fd5b50505060066000910155565b50821515612122565b60018060a01b03835416600052600b6020526121856040600020918254611fb1565b90553861210b565b5050565b906000918252600c602052604082209060018060a01b031680835260078201602052604083209260ff600384015460b01c16916121cd83611e1f565b60038314159081612267575b8115612257575b811561223f575b506122385760ff6003919454166121fd81611e1f565b0361221a57506006610b8561221793600184015490611fb1565b90565b80612226600292611e1f565b1461222f575090565b60019150015490565b9250505090565b82525060088301602052604081205460ff16386121e7565b855460081c60ff161591506121e0565b905061227283611e1f565b6002831415906121d956fea26469706673582212202b79cfcf2a8850eb62c7324caf5a8d0f3c1915b264188452b20738f62dec3cdb64736f6c63430008140033",
  "devdoc": {
    "details": "Participants put down deposits that are forfeited if they don't attend.      Forfeits are shared among actual attendees as rewards for showing up.",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "cancelEvent(uint256)": {
        "details": "Can be called by organizer or admin",
        "params": {
          "_eventId": "Event to cancel"
        }
      },
      "cancelRegistration(uint256)": {
        "params": {
          "_eventId": "Event to cancel registration for"
        }
      },
      "checkIn(uint256,address)": {
        "details": "Only callable by event organizer after event start time",
        "params": {
          "_eventId": "Event ID",
          "_participant": "Address to check in"
        }
      },
      "claimPayout(uint256)": {
        "details": "Returns deposit + reward share for attendees, or full deposit for canceled events",
        "params": {
          "_eventId": "Event to claim from"
        }
      },
      "closeCheckIn(uint256)": {
        "details": "Should be called after event ends, before completing",
        "params": {
          "_eventId": "Event to close check-in for"
        }
      },
      "completeEvent(uint256)": {
        "details": "Handles organizer bond, forfeit distribution, and reward calculation",
        "params": {
          "_eventId": "Event to complete"
        }
      },
      "createAccount()": {
        "details": "Simple gate to prevent accidental interactions"
      },
      "createEvent(uint256,uint256,uint64,uint64,uint16,uint32)": {
        "params": {
          "_bond": "Organizer bond (skin in the game)",
          "_capacity": "Maximum number of participants",
          "_deposit": "Required participant deposit amount",
          "_endTime": "When event ends (unix timestamp)",
          "_minAttendanceBps": "Minimum attendance rate in basis points (10000 = 100%)",
          "_startTime": "When event begins (unix timestamp)"
        },
        "returns": {
          "_0": "eventId The ID of the created event"
        }
      },
      "getClaimablePayout(uint256,address)": {
        "params": {
          "_eventId": "Event ID",
          "_participant": "Participant address"
        },
        "returns": {
          "_0": "Claimable amount"
        }
      },
      "getEvent(uint256)": {
        "params": {
          "_eventId": "Event to query"
        }
      },
      "getEventForfeitPool(uint256)": {
        "params": {
          "_eventId": "Event ID"
        },
        "returns": {
          "_0": "Current forfeit pool amount"
        }
      },
      "getRegistration(uint256,address)": {
        "params": {
          "_eventId": "Event ID",
          "_participant": "Participant address"
        },
        "returns": {
          "exists": "Whether registration exists",
          "status": "Registration status"
        }
      },
      "getUserBalance(address)": {
        "params": {
          "_user": "User address"
        },
        "returns": {
          "_0": "Available balance"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "publishEvent(uint256)": {
        "params": {
          "_eventId": "Event to publish"
        }
      },
      "registerForEvent(uint256)": {
        "params": {
          "_eventId": "Event to register for"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setBounds(uint256,uint256,uint256,uint256)": {
        "params": {
          "_maxBond": "Maximum allowed organizer bond",
          "_maxDeposit": "Maximum allowed participant deposit",
          "_minBond": "Minimum allowed organizer bond",
          "_minDeposit": "Minimum allowed participant deposit"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePolicy(uint256,uint256,uint256,uint256)": {
        "params": {
          "_attendeeSharePercent": "Percentage of forfeits going to attendees (0-100)",
          "_fullRefundHours": "Hours before event for 100% refund",
          "_partialRefundHours": "Hours before event for partial refund",
          "_partialRefundPercent": "Percentage refund in partial window (0-100)"
        }
      },
      "withdraw()": {
        "details": "Transfers entire balance to save gas"
      }
    },
    "title": "EventManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "COMPLETION_DEADLINE()": {
        "notice": "Time after event ends when anyone can complete it (24 hours)"
      },
      "balances(address)": {
        "notice": "User balances available for withdrawal"
      },
      "bounds()": {
        "notice": "Platform-wide bounds for deposits and bonds"
      },
      "cancelEvent(uint256)": {
        "notice": "Cancel event and trigger full refunds"
      },
      "cancelRegistration(uint256)": {
        "notice": "Cancel registration (may incur forfeit based on timing)"
      },
      "checkIn(uint256,address)": {
        "notice": "Check in a participant (marks them as attended)"
      },
      "claimPayout(uint256)": {
        "notice": "Claim payout after event completion/cancellation"
      },
      "closeCheckIn(uint256)": {
        "notice": "Close check-in period and process no-show forfeits"
      },
      "completeEvent(uint256)": {
        "notice": "Mark event as complete and process settlements"
      },
      "createAccount()": {
        "notice": "Create a user account (required before any other actions)"
      },
      "createEvent(uint256,uint256,uint64,uint64,uint16,uint32)": {
        "notice": "Create a new event (organizer pays bond upfront)"
      },
      "events(uint256)": {
        "notice": "All events stored by ID"
      },
      "getClaimablePayout(uint256,address)": {
        "notice": "Calculate claimable payout for a participant"
      },
      "getEvent(uint256)": {
        "notice": "Get basic event information"
      },
      "getEventForfeitPool(uint256)": {
        "notice": "Get current forfeit pool for an event"
      },
      "getRegistration(uint256,address)": {
        "notice": "Get participant's registration status for an event"
      },
      "getUserBalance(address)": {
        "notice": "Get user's available balance"
      },
      "isRegisteredUser(address)": {
        "notice": "Tracks if a user has created an account"
      },
      "nextEventId()": {
        "notice": "Next event ID to assign"
      },
      "policy()": {
        "notice": "Global refund policy configuration"
      },
      "publishEvent(uint256)": {
        "notice": "Make event visible and open for registration"
      },
      "registerForEvent(uint256)": {
        "notice": "Register for an event (pays deposit)"
      },
      "setBounds(uint256,uint256,uint256,uint256)": {
        "notice": "Update platform deposit and bond limits"
      },
      "token()": {
        "notice": "ERC20 token used for all deposits and bonds"
      },
      "updatePolicy(uint256,uint256,uint256,uint256)": {
        "notice": "Update global refund and forfeit policy"
      },
      "withdraw()": {
        "notice": "Withdraw available balance to external account"
      }
    },
    "notice": "Decentralized event management with accountability deposits",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 944,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1023,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "bounds",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Bounds)1061_storage"
      },
      {
        "astId": 1027,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "policy",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(PolicyConfig)1071_storage"
      },
      {
        "astId": 1032,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "isRegisteredUser",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1037,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "balances",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1043,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "events",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Event)1120_storage)"
      },
      {
        "astId": 1047,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "nextEventId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(EventStatus)1126": {
        "encoding": "inplace",
        "label": "enum EventManager.EventStatus",
        "numberOfBytes": "1"
      },
      "t_enum(RegStatus)1132": {
        "encoding": "inplace",
        "label": "enum EventManager.RegStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Registration)1078_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EventManager.Registration)",
        "numberOfBytes": "32",
        "value": "t_struct(Registration)1078_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Event)1120_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EventManager.Event)",
        "numberOfBytes": "32",
        "value": "t_struct(Event)1120_storage"
      },
      "t_struct(Bounds)1061_storage": {
        "encoding": "inplace",
        "label": "struct EventManager.Bounds",
        "members": [
          {
            "astId": 1054,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "minDeposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1056,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "maxDeposit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1058,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "minBond",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1060,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "maxBond",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Event)1120_storage": {
        "encoding": "inplace",
        "label": "struct EventManager.Event",
        "members": [
          {
            "astId": 1081,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "organizer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1083,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "deposit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1085,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "bond",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1087,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 1089,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "endTime",
            "offset": 8,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 1091,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "minAttendanceBps",
            "offset": 16,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 1093,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "capacity",
            "offset": 18,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 1096,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "status",
            "offset": 22,
            "slot": "3",
            "type": "t_enum(EventStatus)1126"
          },
          {
            "astId": 1098,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "published",
            "offset": 23,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1100,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "bondReleased",
            "offset": 24,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1102,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "checkInClosed",
            "offset": 25,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1104,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "confirmedCount",
            "offset": 26,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 1106,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "attendedCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 1108,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "forfeitPool",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1110,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "rewardPerAttendee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1115,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "registrations",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(Registration)1078_storage)"
          },
          {
            "astId": 1119,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "rewardsClaimed",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(PolicyConfig)1071_storage": {
        "encoding": "inplace",
        "label": "struct EventManager.PolicyConfig",
        "members": [
          {
            "astId": 1064,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "fullRefundHours",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1066,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "partialRefundHours",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1068,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "partialRefundPercent",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1070,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "attendeeSharePercent",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Registration)1078_storage": {
        "encoding": "inplace",
        "label": "struct EventManager.Registration",
        "members": [
          {
            "astId": 1075,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(RegStatus)1132"
          },
          {
            "astId": 1077,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "exists",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
{
  "address": "0x1A57103376CE66B4bFA167C24d6f6392E789B0e8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "AccountCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "CheckInClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "EventCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "EventCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "organizer",
          "type": "address"
        }
      ],
      "name": "EventCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "ParticipantCheckedIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fullRefundHours",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partialRefundHours",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partialRefundPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "attendeeSharePercent",
          "type": "uint256"
        }
      ],
      "name": "PolicyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "RegistrationCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "RegistrationConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COMPLETION_DEADLINE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "attendeeDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "cancelEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "cancelRegistration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        }
      ],
      "name": "checkIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "claimPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "closeCheckIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "completeEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "_startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_endTime",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_capacity",
          "type": "uint32"
        }
      ],
      "name": "createEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "events",
      "outputs": [
        {
          "internalType": "address",
          "name": "organizer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTime",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "capacity",
          "type": "uint32"
        },
        {
          "internalType": "enum EventManager.EventStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "published",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "bondReleased",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "checkInClosed",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "confirmedCount",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "attendedCount",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "forfeitPool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerAttendee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        }
      ],
      "name": "getClaimablePayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "getEvent",
      "outputs": [
        {
          "internalType": "address",
          "name": "organizer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTime",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "capacity",
          "type": "uint32"
        },
        {
          "internalType": "enum EventManager.EventStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "published",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "confirmedCount",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "attendedCount",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "getEventForfeitPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        }
      ],
      "name": "getRegistration",
      "outputs": [
        {
          "internalType": "enum EventManager.RegStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRegisteredUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minAttendanceRatio",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "organizerBondAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fullRefundHours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "partialRefundHours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "partialRefundPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "attendeeSharePercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "registerForEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deposit",
          "type": "uint256"
        }
      ],
      "name": "setAttendeeDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_ratio",
          "type": "uint16"
        }
      ],
      "name": "setMinAttendanceRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bond",
          "type": "uint256"
        }
      ],
      "name": "setOrganizerBondAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fullRefundHours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_partialRefundHours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_partialRefundPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_attendeeSharePercent",
          "type": "uint256"
        }
      ],
      "name": "updatePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x753350810dec055440667ada7f88b97d4fb3af968f90bb352ee6b357e98350ae",
  "receipt": {
    "to": null,
    "from": "0xB957C7591bf8b8ad1e5B8942dE6FF3b1D22d4951",
    "contractAddress": "0x1A57103376CE66B4bFA167C24d6f6392E789B0e8",
    "transactionIndex": 14,
    "gasUsed": "2250523",
    "logsBloom": "0x
    "blockHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "transactionHash": "0x753350810dec055440667ada7f88b97d4fb3af968f90bb352ee6b357e98350ae",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 22103802,
        "transactionHash": "0x753350810dec055440667ada7f88b97d4fb3af968f90bb352ee6b357e98350ae",
        "address": "0x1A57103376CE66B4bFA167C24d6f6392E789B0e8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b957c7591bf8b8ad1e5b8942de6ff3b1d22d4951"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x0000000000000000000000000000000000000000000000000000000000000000"
      }
    ],
    "blockNumber": 22103802,
    "cumulativeGasUsed": "3354920",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x617E9308eb2eBc07be4F62bC4b284c45EfF39907",
    "0xB957C7591bf8b8ad1e5B8942dE6FF3b1D22d4951"
  ],
  "numDeployments": 4,
  "solcInputHash": "b40d8b18bc2ea5ff52deb5bd6625ddef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"CheckInClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"EventCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"EventCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"}],\"name\":\"EventCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"ParticipantCheckedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fullRefundHours\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partialRefundHours\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partialRefundPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"attendeeSharePercent\",\"type\":\"uint256\"}],\"name\":\"PolicyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"RegistrationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"RegistrationConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMPLETION_DEADLINE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attendeeDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"cancelEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"cancelRegistration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"checkIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"claimPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"closeCheckIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"completeEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_capacity\",\"type\":\"uint32\"}],\"name\":\"createEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"capacity\",\"type\":\"uint32\"},{\"internalType\":\"enum EventManager.EventStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"published\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bondReleased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"checkInClosed\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"confirmedCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"attendedCount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"forfeitPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerAttendee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getClaimablePayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getEvent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"capacity\",\"type\":\"uint32\"},{\"internalType\":\"enum EventManager.EventStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"published\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"confirmedCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"attendedCount\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getEventForfeitPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getRegistration\",\"outputs\":[{\"internalType\":\"enum EventManager.RegStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegisteredUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAttendanceRatio\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"organizerBondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fullRefundHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partialRefundHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partialRefundPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attendeeSharePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"registerForEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"}],\"name\":\"setAttendeeDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_ratio\",\"type\":\"uint16\"}],\"name\":\"setMinAttendanceRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"setOrganizerBondAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fullRefundHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_partialRefundHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_partialRefundPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_attendeeSharePercent\",\"type\":\"uint256\"}],\"name\":\"updatePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Participants put down deposits that are forfeited if they don't attend.      Forfeits are shared among actual attendees as rewards for showing up.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"cancelEvent(uint256)\":{\"details\":\"Can be called by organizer or admin\",\"params\":{\"_eventId\":\"Event to cancel\"}},\"cancelRegistration(uint256)\":{\"params\":{\"_eventId\":\"Event to cancel registration for\"}},\"checkIn(uint256,address)\":{\"details\":\"Only callable by event organizer after event start time\",\"params\":{\"_eventId\":\"Event ID\",\"_participant\":\"Address to check in\"}},\"claimPayout(uint256)\":{\"details\":\"Returns deposit + reward share for attendees, or full deposit for canceled events\",\"params\":{\"_eventId\":\"Event to claim from\"}},\"closeCheckIn(uint256)\":{\"details\":\"Should be called after event ends, before completing\",\"params\":{\"_eventId\":\"Event to close check-in for\"}},\"completeEvent(uint256)\":{\"details\":\"Handles organizer bond, forfeit distribution, and reward calculation\",\"params\":{\"_eventId\":\"Event to complete\"}},\"createAccount()\":{\"details\":\"Simple gate to prevent accidental interactions\"},\"createEvent(string,uint64,uint64,uint32)\":{\"params\":{\"_capacity\":\"Maximum number of participants\",\"_description\":\"Event description\",\"_endTime\":\"When event ends (unix timestamp)\",\"_startTime\":\"When event begins (unix timestamp)\"},\"returns\":{\"_0\":\"eventId The ID of the created event\"}},\"getClaimablePayout(uint256,address)\":{\"params\":{\"_eventId\":\"Event ID\",\"_participant\":\"Participant address\"},\"returns\":{\"_0\":\"Claimable amount\"}},\"getEvent(uint256)\":{\"params\":{\"_eventId\":\"Event to query\"}},\"getEventForfeitPool(uint256)\":{\"params\":{\"_eventId\":\"Event ID\"},\"returns\":{\"_0\":\"Current forfeit pool amount\"}},\"getRegistration(uint256,address)\":{\"params\":{\"_eventId\":\"Event ID\",\"_participant\":\"Participant address\"},\"returns\":{\"exists\":\"Whether registration exists\",\"status\":\"Registration status\"}},\"getUserBalance(address)\":{\"params\":{\"_user\":\"User address\"},\"returns\":{\"_0\":\"Available balance\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerForEvent(uint256)\":{\"params\":{\"_eventId\":\"Event to register for\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAttendeeDepositAmount(uint256)\":{\"params\":{\"_deposit\":\"global deposit amount\"}},\"setMinAttendanceRatio(uint16)\":{\"params\":{\"_ratio\":\"minimum attendance ratio in basis points (0-10000, 3000 = 30%)\"}},\"setOrganizerBondAmount(uint256)\":{\"params\":{\"_bond\":\"global bond amount\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePolicy(uint256,uint256,uint256,uint256)\":{\"params\":{\"_attendeeSharePercent\":\"Percentage of forfeits going to attendees (0-100)\",\"_fullRefundHours\":\"Hours before event for 100% refund\",\"_partialRefundHours\":\"Hours before event for partial refund\",\"_partialRefundPercent\":\"Percentage refund in partial window (0-100)\"}},\"withdraw()\":{\"details\":\"Transfers entire balance to save gas\"}},\"title\":\"EventManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"COMPLETION_DEADLINE()\":{\"notice\":\"Time after event ends when anyone can complete it (24 hours)\"},\"attendeeDepositAmount()\":{\"notice\":\"Global deposit amount required for all events\"},\"balances(address)\":{\"notice\":\"User balances available for withdrawal\"},\"cancelEvent(uint256)\":{\"notice\":\"Cancel event and trigger full refunds\"},\"cancelRegistration(uint256)\":{\"notice\":\"Cancel registration (may incur forfeit based on timing)\"},\"checkIn(uint256,address)\":{\"notice\":\"Check in a participant (marks them as attended)\"},\"claimPayout(uint256)\":{\"notice\":\"Claim payout after event completion/cancellation\"},\"closeCheckIn(uint256)\":{\"notice\":\"Close check-in period and process no-show forfeits\"},\"completeEvent(uint256)\":{\"notice\":\"Mark event as complete and process settlements\"},\"createAccount()\":{\"notice\":\"Create a user account (required before any other actions)\"},\"createEvent(string,uint64,uint64,uint32)\":{\"notice\":\"Create a new event (organizer pays bond upfront)\"},\"events(uint256)\":{\"notice\":\"All events stored by ID\"},\"getClaimablePayout(uint256,address)\":{\"notice\":\"Calculate claimable payout for a participant\"},\"getEvent(uint256)\":{\"notice\":\"Get basic event information\"},\"getEventForfeitPool(uint256)\":{\"notice\":\"Get current forfeit pool for an event\"},\"getRegistration(uint256,address)\":{\"notice\":\"Get participant's registration status for an event\"},\"getUserBalance(address)\":{\"notice\":\"Get user's available balance\"},\"isRegisteredUser(address)\":{\"notice\":\"Tracks if a user has created an account\"},\"minAttendanceRatio()\":{\"notice\":\"Global minimum attendance ratio for all events (in basis points, 3000 = 30%)\"},\"nextEventId()\":{\"notice\":\"Next event ID to assign. Currently we can use this for the sake of the hackathn.\"},\"organizerBondAmount()\":{\"notice\":\"Global bond amount required for all organizers\"},\"policy()\":{\"notice\":\"Global refund policy configuration\"},\"registerForEvent(uint256)\":{\"notice\":\"Register for an event (pays deposit) Currently no need for registration approval.\"},\"setAttendeeDepositAmount(uint256)\":{\"notice\":\"Update global deposit amount for all events\"},\"setMinAttendanceRatio(uint16)\":{\"notice\":\"Update global minimum attendance ratio for all events\"},\"setOrganizerBondAmount(uint256)\":{\"notice\":\"Update global bond amount for all organizers\"},\"token()\":{\"notice\":\"ERC20 token used for all deposits and bonds\"},\"updatePolicy(uint256,uint256,uint256,uint256)\":{\"notice\":\"Update global refund and forfeit policy\"},\"withdraw()\":{\"notice\":\"Withdraw available balance to external account\"}},\"notice\":\"Decentralized event management with accountability deposits\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EventManager.sol\":\"EventManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/EventManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title EventManager\\n * @notice Decentralized event management with accountability deposits\\n * @dev Participants put down deposits that are forfeited if they don't attend.\\n *      Forfeits are shared among actual attendees as rewards for showing up.\\n */\\ncontract EventManager is Ownable, ReentrancyGuard {\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                           IMMUTABLES & STATE\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /// @notice ERC20 token used for all deposits and bonds\\n    IERC20 public immutable token;\\n\\n    /// @notice Global deposit amount required for all events\\n    uint256 public attendeeDepositAmount;\\n\\n    /// @notice Global bond amount required for all organizers\\n    uint256 public organizerBondAmount;\\n\\n    /// @notice Global minimum attendance ratio for all events (in basis points, 3000 = 30%)\\n    uint16 public minAttendanceRatio;\\n\\n    /// @notice Global refund policy configuration\\n    PolicyConfig public policy;\\n\\n    /// @notice Tracks if a user has created an account\\n    mapping(address => bool) public isRegisteredUser;\\n\\n    /// @notice User balances available for withdrawal\\n    mapping(address => uint256) public balances;\\n\\n    /// @notice All events stored by ID\\n    mapping(uint256 => Event) public events;\\n\\n    /// @notice Next event ID to assign. Currently we can use this for the sake of the hackathn.\\n    uint256 public nextEventId = 1;\\n\\n    /// @notice Time after event ends when anyone can complete it (24 hours)\\n    uint256 public constant COMPLETION_DEADLINE = 24 hours;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                               STRUCTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /// @notice Global policy for refunds and forfeit distribution\\n    struct PolicyConfig {\\n        uint256 fullRefundHours; // Hours before event for 100% refund\\n        uint256 partialRefundHours; // Hours before event for partial refund\\n        uint256 partialRefundPercent; // Percent for partial refund (0-100)\\n        uint256 attendeeSharePercent; // Percent of forfeits going to attendees (0-100)\\n    }\\n\\n    /// @notice Individual participant registration\\n    struct Registration {\\n        RegStatus status; // Current registration state\\n        bool exists; // Whether registration record exists\\n    }\\n\\n    /// @notice Complete event data and state\\n    struct Event {\\n        // Basic event info\\n        address organizer; // Who created the event\\n        string description; // Event description\\n        uint64 startTime; // When event begins\\n        uint64 endTime; // When event ends (for completion deadline)\\n        uint32 capacity; // Maximum participants\\n        // State management\\n        EventStatus status; // Current event state\\n        bool published; // Whether visible to participants\\n        bool bondReleased; // Whether organizer bond was distributed\\n        bool checkInClosed; // Whether check-in period is closed\\n        // Participation tracking\\n        uint32 confirmedCount; // Number of confirmed registrations\\n        uint32 attendedCount; // Number who actually showed up\\n        // Financial state\\n        uint256 forfeitPool; // Total forfeited deposits\\n        uint256 rewardPerAttendee; // Reward each attendee gets\\n        // Per-participant data\\n        mapping(address => Registration) registrations; // Registration status\\n        mapping(address => bool) rewardsClaimed; // Claim tracking\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                               ENUMS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /// @notice Event lifecycle states\\n    enum EventStatus {\\n        Published, // Event visible and accepting registrations\\n        Canceled, // Event canceled (full refunds)\\n        Completed // Event finished (settlements processed)\\n    }\\n\\n    /// @notice Participant registration states\\n    enum RegStatus {\\n        None, // Not registered\\n        Confirmed, // Registered and deposit paid\\n        CanceledByParticipant, // Canceled before event\\n        Attended // Actually showed up\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                               EVENTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    event AccountCreated(address indexed user);\\n    event EventCreated(uint256 indexed eventId, address indexed organizer);\\n    event EventCanceled(uint256 indexed eventId);\\n    event EventCompleted(uint256 indexed eventId);\\n    event CheckInClosed(uint256 indexed eventId);\\n    event RegistrationConfirmed(uint256 indexed eventId, address indexed participant);\\n    event RegistrationCanceled(uint256 indexed eventId, address indexed participant);\\n    event ParticipantCheckedIn(uint256 indexed eventId, address indexed participant);\\n    event RewardsClaimed(uint256 indexed eventId, address indexed participant, uint256 amount);\\n    event Withdrawal(address indexed user, uint256 amount);\\n    event PolicyUpdated(\\n        uint256 fullRefundHours,\\n        uint256 partialRefundHours,\\n        uint256 partialRefundPercent,\\n        uint256 attendeeSharePercent\\n    );\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                             CONSTRUCTOR\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    constructor(address _token, address _owner) Ownable(_owner) {\\n        token = IERC20(_token);\\n\\n        // Set default global deposit and bond amounts\\n        attendeeDepositAmount = 1e18; // 1 token default deposit\\n        organizerBondAmount = 10e18; // 10 token default organizer bond\\n        minAttendanceRatio = 3000; // 30% default minimum attendance\\n\\n        // Set default refund policy\\n        policy = PolicyConfig({\\n            fullRefundHours: 24, // Full refund if cancel >24h before\\n            partialRefundHours: 2, // Partial refund if cancel >2h before\\n            partialRefundPercent: 50, // 50% refund in partial window\\n            attendeeSharePercent: 50 // 50% of forfeits go to attendees\\n        });\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                         ADMIN FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Update global refund and forfeit policy\\n     * @param _fullRefundHours Hours before event for 100% refund\\n     * @param _partialRefundHours Hours before event for partial refund\\n     * @param _partialRefundPercent Percentage refund in partial window (0-100)\\n     * @param _attendeeSharePercent Percentage of forfeits going to attendees (0-100)\\n     */\\n    function updatePolicy(\\n        uint256 _fullRefundHours,\\n        uint256 _partialRefundHours,\\n        uint256 _partialRefundPercent,\\n        uint256 _attendeeSharePercent\\n    ) external onlyOwner {\\n        require(_partialRefundPercent <= 100, \\\"Invalid partial refund percent\\\");\\n        require(_attendeeSharePercent <= 100, \\\"Invalid attendee share percent\\\");\\n        require(_fullRefundHours >= _partialRefundHours, \\\"Full refund hours must be >= partial\\\");\\n\\n        policy = PolicyConfig({\\n            fullRefundHours: _fullRefundHours,\\n            partialRefundHours: _partialRefundHours,\\n            partialRefundPercent: _partialRefundPercent,\\n            attendeeSharePercent: _attendeeSharePercent\\n        });\\n\\n        emit PolicyUpdated(_fullRefundHours, _partialRefundHours, _partialRefundPercent, _attendeeSharePercent);\\n    }\\n\\n    /**\\n     * @notice Update global deposit amount for all events\\n     * @param _deposit global deposit amount\\n     */\\n    function setAttendeeDepositAmount(uint256 _deposit) external onlyOwner {\\n        attendeeDepositAmount = _deposit;\\n    }\\n\\n    /**\\n     * @notice Update global bond amount for all organizers\\n     * @param _bond global bond amount\\n     */\\n    function setOrganizerBondAmount(uint256 _bond) external onlyOwner {\\n        organizerBondAmount = _bond;\\n    }\\n\\n    /**\\n     * @notice Update global minimum attendance ratio for all events\\n     * @param _ratio minimum attendance ratio in basis points (0-10000, 3000 = 30%)\\n     */\\n    function setMinAttendanceRatio(uint16 _ratio) external onlyOwner {\\n        require(_ratio <= 10000, \\\"Ratio cannot exceed 100%\\\");\\n        minAttendanceRatio = _ratio;\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                         ACCOUNT MANAGEMENT\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Create a user account (required before any other actions)\\n     * @dev Simple gate to prevent accidental interactions\\n     */\\n    function createAccount() external {\\n        require(!isRegisteredUser[msg.sender], \\\"Account already exists\\\");\\n        isRegisteredUser[msg.sender] = true;\\n        emit AccountCreated(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraw available balance to external account\\n     * @dev Transfers entire balance to save gas\\n     */\\n    function withdraw() external nonReentrant {\\n        uint256 amount = balances[msg.sender];\\n        require(amount > 0, \\\"No balance to withdraw\\\");\\n\\n        balances[msg.sender] = 0;\\n        token.transfer(msg.sender, amount);\\n\\n        emit Withdrawal(msg.sender, amount);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                         EVENT LIFECYCLE\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Create a new event (organizer pays bond upfront)\\n     * @param _description Event description\\n     * @param _startTime When event begins (unix timestamp)\\n     * @param _endTime When event ends (unix timestamp)\\n     * @param _capacity Maximum number of participants\\n     * @return eventId The ID of the created event\\n     */\\n    function createEvent(\\n        string memory _description,\\n        uint64 _startTime,\\n        uint64 _endTime,\\n        uint32 _capacity\\n    ) external nonReentrant returns (uint256) {\\n        require(isRegisteredUser[msg.sender], \\\"Must create account first\\\");\\n        require(_startTime > block.timestamp, \\\"Start time must be in future\\\");\\n        require(_endTime > _startTime, \\\"End time must be after start time\\\");\\n        require(_capacity > 0, \\\"Capacity must be positive\\\");\\n\\n        // Take organizer bond upfront\\n        token.transferFrom(msg.sender, address(this), organizerBondAmount);\\n\\n        uint256 eventId = nextEventId++;\\n        Event storage newEvent = events[eventId];\\n        newEvent.organizer = msg.sender;\\n        newEvent.description = _description;\\n        newEvent.startTime = _startTime;\\n        newEvent.endTime = _endTime;\\n        newEvent.capacity = _capacity;\\n        newEvent.status = EventStatus.Published;\\n        newEvent.published = true;\\n\\n        emit EventCreated(eventId, msg.sender);\\n        return eventId;\\n    }\\n\\n    /**\\n     * @notice Cancel event and trigger full refunds\\n     * @param _eventId Event to cancel\\n     * @dev Can be called by organizer or admin\\n     */\\n    function cancelEvent(uint256 _eventId) external nonReentrant {\\n        Event storage evt = events[_eventId];\\n        require(evt.organizer == msg.sender || msg.sender == owner(), \\\"Only organizer or admin\\\");\\n        require(evt.status == EventStatus.Published, \\\"Event not active\\\");\\n\\n        evt.status = EventStatus.Canceled;\\n        emit EventCanceled(_eventId);\\n    }\\n\\n    /**\\n     * @notice Close check-in period and process no-show forfeits\\n     * @param _eventId Event to close check-in for\\n     * @dev Should be called after event ends, before completing\\n     */\\n    function closeCheckIn(uint256 _eventId) external {\\n        Event storage evt = events[_eventId];\\n        require(evt.organizer == msg.sender, \\\"Only organizer can close check-in\\\");\\n        require(evt.status == EventStatus.Published, \\\"Event not active\\\");\\n        require(block.timestamp >= evt.endTime, \\\"Event not ended yet\\\");\\n        require(!evt.checkInClosed, \\\"Check-in already closed\\\");\\n\\n        evt.checkInClosed = true;\\n\\n        // anyone confirmed but not attended forfeits deposit\\n        _processNoShowForfeits(evt);\\n\\n        emit CheckInClosed(_eventId);\\n    }\\n\\n    /**\\n     * @notice Mark event as complete and process settlements\\n     * @param _eventId Event to complete\\n     * @dev Handles organizer bond, forfeit distribution, and reward calculation\\n     */\\n    function completeEvent(uint256 _eventId) external nonReentrant {\\n        Event storage evt = events[_eventId];\\n\\n        // Anyone can complete after deadline passes\\n        bool isOrganizer = (evt.organizer == msg.sender);\\n        bool isPastDeadline = (block.timestamp >= evt.endTime + COMPLETION_DEADLINE);\\n        require(isOrganizer || isPastDeadline, \\\"Only organizer or after deadline\\\");\\n        require(evt.status == EventStatus.Published, \\\"Event not active\\\");\\n        require(!evt.bondReleased, \\\"Bond already released\\\");\\n\\n        // Ensure check-in is closed first\\n        if (!evt.checkInClosed) {\\n            evt.checkInClosed = true;\\n            _processNoShowForfeits(evt);\\n        }\\n\\n        evt.status = EventStatus.Completed;\\n        evt.bondReleased = true;\\n\\n        // required = floor(confirmed * ratio / 10000)\\n        uint256 confirmed = uint256(evt.confirmedCount);\\n        uint256 attended = uint256(evt.attendedCount);\\n        uint256 required = (confirmed * uint256(minAttendanceRatio)) / 10000;\\n\\n        if (required == 0 || attended >= required) {\\n            // Met attendance target (or nothing required) -> full bond refund\\n            balances[evt.organizer] += organizerBondAmount;\\n        } else {\\n            // Proportional penalty: missing/required of the bond (caps at 100%)\\n            uint256 missing = required - attended;\\n            uint256 penalty = (organizerBondAmount * missing) / required; // safe since required > 0\\n            uint256 refund = organizerBondAmount - penalty;\\n\\n            if (refund > 0) {\\n                balances[evt.organizer] += refund;\\n            }\\n            if (penalty > 0) {\\n                // keep your existing redistribution flow\\n                evt.forfeitPool += penalty;\\n            }\\n        }\\n\\n        // Distribute forfeited deposits by policy (attendee/organizer split)\\n        _distributeForfeitsByPolicy(evt);\\n\\n        emit EventCompleted(_eventId);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                      PARTICIPANT FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Register for an event (pays deposit)\\n     * Currently no need for registration approval.\\n     * @param _eventId Event to register for\\n     */\\n    function registerForEvent(uint256 _eventId) external nonReentrant {\\n        require(isRegisteredUser[msg.sender], \\\"Must create account first\\\");\\n\\n        Event storage evt = events[_eventId];\\n        require(evt.published, \\\"Event not published\\\");\\n        require(evt.status == EventStatus.Published, \\\"Registration not open\\\");\\n        require(evt.confirmedCount < evt.capacity, \\\"Event at capacity\\\");\\n        require(!evt.registrations[msg.sender].exists, \\\"Already registered\\\");\\n        // Allow registration up to and including start time\\n        require(block.timestamp <= evt.startTime, \\\"Registration closed\\\");\\n\\n        // Take participant deposit\\n        token.transferFrom(msg.sender, address(this), attendeeDepositAmount);\\n\\n        evt.registrations[msg.sender] = Registration({ status: RegStatus.Confirmed, exists: true });\\n        evt.confirmedCount++;\\n\\n        emit RegistrationConfirmed(_eventId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Cancel registration (may incur forfeit based on timing)\\n     * @param _eventId Event to cancel registration for\\n     */\\n    function cancelRegistration(uint256 _eventId) external nonReentrant {\\n        Event storage evt = events[_eventId];\\n        Registration storage reg = evt.registrations[msg.sender];\\n\\n        require(reg.exists, \\\"Not registered\\\");\\n        require(reg.status == RegStatus.Confirmed, \\\"Registration not active\\\");\\n\\n        reg.status = RegStatus.CanceledByParticipant;\\n        evt.confirmedCount--;\\n\\n        // Calculate refund based on timing\\n        uint256 refundAmount = _calculateRefund(evt, attendeeDepositAmount);\\n        if (refundAmount > 0) {\\n            balances[msg.sender] += refundAmount;\\n        }\\n\\n        // Add forfeit to pool\\n        uint256 forfeitAmount = attendeeDepositAmount - refundAmount;\\n        if (forfeitAmount > 0) {\\n            evt.forfeitPool += forfeitAmount;\\n        }\\n\\n        emit RegistrationCanceled(_eventId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Claim payout after event completion/cancellation\\n     * @param _eventId Event to claim from\\n     * @dev Returns deposit + reward share for attendees, or full deposit for canceled events\\n     */\\n    function claimPayout(uint256 _eventId) external nonReentrant {\\n        Event storage evt = events[_eventId];\\n        Registration storage reg = evt.registrations[msg.sender];\\n\\n        require(evt.status == EventStatus.Completed || evt.status == EventStatus.Canceled, \\\"Event not finalized\\\");\\n        require(reg.exists, \\\"Not registered for event\\\");\\n        require(!evt.rewardsClaimed[msg.sender], \\\"Payout already claimed\\\");\\n\\n        evt.rewardsClaimed[msg.sender] = true;\\n\\n        uint256 totalPayout = 0;\\n\\n        if (reg.status == RegStatus.Attended) {\\n            // Attended: get deposit back + share of forfeit pool\\n            totalPayout += attendeeDepositAmount; // Original deposit\\n            totalPayout += evt.rewardPerAttendee; // Reward for showing up\\n        } else if (evt.status == EventStatus.Canceled) {\\n            // Event canceled: everyone gets full refund\\n            totalPayout += attendeeDepositAmount;\\n        }\\n        // Note: No payout for confirmed but didn't attend (forfeit)\\n\\n        if (totalPayout > 0) {\\n            balances[msg.sender] += totalPayout;\\n        }\\n\\n        emit RewardsClaimed(_eventId, msg.sender, totalPayout);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                      ORGANIZER FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Check in a participant (marks them as attended)\\n     * @param _eventId Event ID\\n     * @param _participant Address to check in\\n     * @dev Only callable by event organizer after event start time\\n     */\\n    function checkIn(uint256 _eventId, address _participant) external {\\n        Event storage evt = events[_eventId];\\n        require(evt.organizer == msg.sender, \\\"Only organizer can check-in\\\");\\n        require(evt.status == EventStatus.Published, \\\"Event not active\\\");\\n        require(block.timestamp >= evt.startTime, \\\"Event not started\\\");\\n        require(!evt.checkInClosed, \\\"Check-in period closed\\\");\\n\\n        Registration storage reg = evt.registrations[_participant];\\n        require(reg.exists, \\\"Participant not registered\\\");\\n        require(reg.status == RegStatus.Confirmed, \\\"Registration not confirmed\\\");\\n\\n        reg.status = RegStatus.Attended;\\n        evt.attendedCount++;\\n\\n        emit ParticipantCheckedIn(_eventId, _participant);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                         INTERNAL HELPERS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @param evt Event storage reference\\n     */\\n    function _processNoShowForfeits(Event storage evt) private {\\n        // Calculate no-shows and add their deposits to forfeit pool\\n        uint256 noShows = evt.confirmedCount - evt.attendedCount;\\n        if (noShows > 0) {\\n            evt.forfeitPool += (noShows * attendeeDepositAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate refund amount based on cancellation timing\\n     * @param evt Event storage reference\\n     * @param depositAmount Original deposit amount\\n     * @return refundAmount Amount to refund\\n     */\\n    function _calculateRefund(Event storage evt, uint256 depositAmount) private view returns (uint256) {\\n        uint256 timeUntilStart = evt.startTime > block.timestamp ? evt.startTime - block.timestamp : 0;\\n\\n        if (timeUntilStart >= policy.fullRefundHours * 1 hours) {\\n            // Early cancellation - full refund\\n            return depositAmount;\\n        } else if (timeUntilStart >= policy.partialRefundHours * 1 hours) {\\n            // Late cancellation - partial refund\\n            return (depositAmount * policy.partialRefundPercent) / 100;\\n        } else {\\n            // Very late or after start - no refund\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * Distribute forfeit pool between organizer and attendees\\n     * @param evt Event storage reference\\n     * @dev Called during event completion\\n     */\\n    function _distributeForfeitsByPolicy(Event storage evt) private {\\n        if (evt.forfeitPool == 0) return;\\n\\n        uint256 originalForfeitPool = evt.forfeitPool;\\n        uint256 organizerShare = (originalForfeitPool * (100 - policy.attendeeSharePercent)) / 100;\\n        uint256 attendeeShare = originalForfeitPool - organizerShare;\\n\\n        // Give organizer their share immediately\\n        if (organizerShare > 0) {\\n            balances[evt.organizer] += organizerShare;\\n        }\\n\\n        // Calculate reward per attendee from attendee share\\n        if (evt.attendedCount > 0 && attendeeShare > 0) {\\n            evt.rewardPerAttendee = attendeeShare / evt.attendedCount;\\n        } else {\\n            evt.rewardPerAttendee = 0;\\n        }\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                           VIEW FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Get basic event information\\n     * @param _eventId Event to query\\n     */\\n    function getEvent(\\n        uint256 _eventId\\n    )\\n        external\\n        view\\n        returns (\\n            address organizer,\\n            string memory description,\\n            uint64 startTime,\\n            uint64 endTime,\\n            uint32 capacity,\\n            EventStatus status,\\n            bool published,\\n            uint32 confirmedCount,\\n            uint32 attendedCount\\n        )\\n    {\\n        Event storage evt = events[_eventId];\\n        return (\\n            evt.organizer,\\n            evt.description,\\n            evt.startTime,\\n            evt.endTime,\\n            evt.capacity,\\n            evt.status,\\n            evt.published,\\n            evt.confirmedCount,\\n            evt.attendedCount\\n        );\\n    }\\n\\n    /**\\n     * @notice Get participant's registration status for an event\\n     * @param _eventId Event ID\\n     * @param _participant Participant address\\n     * @return status Registration status\\n     * @return exists Whether registration exists\\n     */\\n    function getRegistration(\\n        uint256 _eventId,\\n        address _participant\\n    ) external view returns (RegStatus status, bool exists) {\\n        Registration storage reg = events[_eventId].registrations[_participant];\\n        return (reg.status, reg.exists);\\n    }\\n\\n    /**\\n     * @notice Get user's available balance\\n     * @param _user User address\\n     * @return Available balance\\n     */\\n    function getUserBalance(address _user) external view returns (uint256) {\\n        return balances[_user];\\n    }\\n\\n    /**\\n     * @notice Calculate claimable payout for a participant\\n     * @param _eventId Event ID\\n     * @param _participant Participant address\\n     * @return Claimable amount\\n     */\\n    function getClaimablePayout(uint256 _eventId, address _participant) external view returns (uint256) {\\n        Event storage evt = events[_eventId];\\n        Registration storage reg = evt.registrations[_participant];\\n\\n        // Check if claim is valid\\n        if (\\n            (evt.status != EventStatus.Completed && evt.status != EventStatus.Canceled) ||\\n            !reg.exists ||\\n            evt.rewardsClaimed[_participant]\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 totalPayout = 0;\\n\\n        if (reg.status == RegStatus.Attended) {\\n            totalPayout += attendeeDepositAmount; // Original deposit back\\n            totalPayout += evt.rewardPerAttendee; // Share of forfeits\\n        } else if (evt.status == EventStatus.Canceled) {\\n            totalPayout += attendeeDepositAmount; // Full refund on cancellation\\n        }\\n\\n        return totalPayout;\\n    }\\n\\n    /**\\n     * @notice Get current forfeit pool for an event\\n     * @param _eventId Event ID\\n     * @return Current forfeit pool amount\\n     */\\n    function getEventForfeitPool(uint256 _eventId) external view returns (uint256) {\\n        return events[_eventId].forfeitPool;\\n    }\\n}\\n\",\"keccak256\":\"0xd0fbf9872d7bce876298217b4065c33809b42ca272a93acfe0ad957e6ea88b79\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346200017e576200254b906001600160401b03601f38849003908101601f1916830190828211848310176200018357808491604096879485528339810103126200017e576020620000528362000199565b926001600160a01b039182916200006a910162000199565b169283156200016657600080546001600160a01b031981168617825590949083167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08680a3600180556001600c5516608052670de0b6b3a7640000600255678ac7230489e80000600355610bb861ffff196004541617600455825191608083019183831090831117620001525750603291606091845260188152600260208201528284820152015260186005556002600655603260075560326008555161239c9081620001af823960805181818161019901528181610f4e015281816113df015261177e0152f35b634e487b7160e01b81526041600452602490fd5b8451631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200017e5756fe60808060405260048036101561001457600080fd5b60e0600035811c9283630505c8c914611da55750826305ce358d14611bff5782630b79143014611b0f57826317a9b2da14611a8e5782631b0e359a14611a6e5782631f5bdf5d14611a2f57826327ad116a14611a1157826327c465b01461185757826327e235e3146112bf578263328c67ab146118375782633ccfd60b146117145782633f69babd1461161d578263406db843146112f957826347734892146112bf57826354417b48146112a1578263547cf87814610e3b5782635af778b414610e1d57826364dc6de014610db55782636778ba7814610d875782636d1884e014610ccc578263715018a614610c735782638a69614e14610a225782638da5cb5b146109f9578263975d2502146108795782639b7aea75146105e45782639dca362f1461053e5782639dff20ac1461050f5782639f9d903a146104f1578263ad8d5eff1461027c57508163c96c908e1461025b578163f2fde38b146101cd575063fc0c546a1461018357600080fd5b346101c85760003660031901126101c8576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600080fd5b346101c85760203660031901126101c8576101e6611f57565b6101ee611f83565b6001600160a01b039081169182156102435750600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b602490600060405191631e4fbdf760e01b8352820152fd5b346101c85760003660031901126101c85761ffff6020915416604051908152f35b346101c85760403660031901126101c857813590610298611f6d565b9082600052602093600b855260406000209460018060a01b038087541633036104ad576002870194855460ff8160a01c166003811015610498576102dc9015612036565b67ffffffffffffffff811642106104605760b81c60ff16610423579060059116968760005201815260406000209182549160ff8360081c16156103e05760ff8316828110156103cb5760010361038857505060ff191660031790558154906001600160e01b03199061034f83821c6120d8565b6001600160e01b0390931692901b161790557f21071e72b9a540ee79a41c3929bd97a87a8d723eb72d52ef08c603328417b580600080a3005b60405162461bcd60e51b815291820152601a60248201527f526567697374726174696f6e206e6f7420636f6e6669726d6564000000000000604482015260649150fd5b602183634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b815291820152601a60248201527f5061727469636970616e74206e6f742072656769737465726564000000000000604482015260649150fd5b60405162461bcd60e51b8152808501849052601660248201527510da1958dacb5a5b881c195c9a5bd90818db1bdcd95960521b6044820152606490fd5b60405162461bcd60e51b81528086018590526011602482015270115d995b9d081b9bdd081cdd185c9d1959607a1b6044820152606490fd5b602186634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b8152808401839052601b60248201527f4f6e6c79206f7267616e697a65722063616e20636865636b2d696e00000000006044820152606490fd5b346101c85760003660031901126101c8576020600c54604051908152f35b50346101c85760403660031901126101c85761053660209161052f611f6d565b903561225a565b604051908152f35b50346101c85760003660031901126101c85733600052600960205260ff604060002054166105a7573360005260096020526040600020600160ff19825416179055337f805996f252884581e2f74cf3d2b03564d5ec26ccc90850ae12653dc1b72d1fa2600080a2005b60649060206040519162461bcd60e51b835282015260166024820152754163636f756e7420616c72656164792065786973747360501b6044820152fd5b90346101c8576020806003193601126101c857813591610602611fc7565b82600052600b825260406000209160018060a01b0391828454163314600285019081549067ffffffffffffffff8260401c16620151808101809111610864578115610859575b50156108175760ff8160a01c166003811015610802576106689015612036565b60ff8160b01c166107c6576106f6969763ffffffff61ffff612710948460ff6106bf9660b81c16156107a8575b50805462ff00ff60a01b191661800160a11b179081905595549286901c9592169160c01c16612098565b04908115801561079e575b15610721575050600a9060035492845416600052526106ef6040600020918254612075565b90556121b4565b7fbb85ff95aded757cf3b840cc38e6e719a2915827f28e3364f62cbefa25bbe2de600080a260018055005b61074661073361074d928496946120cb565b946107416003549687612098565b6120ab565b80946120cb565b918261077a575b50505080610763575b506121b4565b61077260038301918254612075565b90558361075d565b600a91855416600052526107946040600020918254612075565b9055848080610754565b50818110156106ca565b60ff60b81b1916600160b81b1781556107c08a6120ed565b8c610695565b60405162461bcd60e51b81528084018590526015602482015274109bdb9908185b1c9958591e481c995b19585cd959605a1b6044820152606490fd5b602184634e487b7160e01b6000525260246000fd5b60648385806040519262461bcd60e51b845283015260248201527f4f6e6c79206f7267616e697a6572206f7220616674657220646561646c696e656044820152fd5b905042101589610648565b601185634e487b7160e01b6000525260246000fd5b50346101c85760203660031901126101c85780356000818152600b6020526040902080546001600160a01b031633036109ab5760028101805460ff8160a01c166003811015610498576108cc9015612036565b67ffffffffffffffff8160401c1642106109715760ff8160b81c1661092d5760ff60b81b1916600160b81b179055909150610906906120ed565b7fa06c27e213d7097ba1fb6dc326570195f90c66d55a76f7afa322223784382966600080a2005b60405162461bcd60e51b8152602081870152601760248201527f436865636b2d696e20616c726561647920636c6f7365640000000000000000006044820152606490fd5b60405162461bcd60e51b81526020818701526013602482015272115d995b9d081b9bdd08195b991959081e595d606a1b6044820152606490fd5b60405162461bcd60e51b8152602081850152602160248201527f4f6e6c79206f7267616e697a65722063616e20636c6f736520636865636b2d696044820152603760f91b6064820152608490fd5b346101c85760003660031901126101c8576000546040516001600160a01b039091168152602090f35b50346101c857602090816003193601126101c857803590610a41611fc7565b81600052600b83526040600020903360005260058201845260406000206002830160ff815460a01c1660038110156108025760028114908115610c68575b5015610c2e5760ff825460081c1615610bea57600684013360005280875260ff60406000205416610bad573360005286526040600020600160ff1982541617905560ff60009254168381101561080257600303610b49575091610b1391610b0a7f3300bdb359cfb956935bca32e9db727413eab1ca84341f2e36caea85bb7969689460025490612075565b91015490612075565b925b83610b2a575b6040519384523393a360018055005b33600052600a81526040600020610b42858254612075565b9055610b1b565b60ff919593505460a01c16906003821015610b985750600114610b8e575b7f3300bdb359cfb956935bca32e9db727413eab1ca84341f2e36caea85bb79696890610b15565b6002549250610b67565b602190634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b8152808501889052601660248201527514185e5bdd5d08185b1c9958591e4818db185a5b595960521b6044820152606490fd5b60405162461bcd60e51b8152808401879052601860248201527f4e6f74207265676973746572656420666f72206576656e7400000000000000006044820152606490fd5b60405162461bcd60e51b81528084018790526013602482015272115d995b9d081b9bdd08199a5b985b1a5e9959606a1b6044820152606490fd5b600191501487610a7f565b346101c85760003660031901126101c857610c8c611f83565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b90346101c85760203660031901126101c85735600052600b60205260406000209060018060a01b0382541690610d09600160028501549401611e4e565b92610d266040519485948552610120806020870152850190611ef4565b9167ffffffffffffffff80831660408601528260401c16606085015263ffffffff808360801c166080860152610d6560a0860160ff8560a01c16611f34565b60ff8360a81c16151560c08601528260c01c16818501521c6101008301520390f35b50346101c85760203660031901126101c85735600052600b6020526020600360406000200154604051908152f35b50346101c85760403660031901126101c857610dcf611f6d565b8135600052600b60205260056040600020019060018060a01b03166000526020526040600020549060ff82166040519180821015610b98575060409260ff91835260081c1615156020820152f35b346101c85760003660031901126101c8576020604051620151808152f35b50346101c85760803660031901126101c85767ffffffffffffffff9080358281116101c857366023820112156101c857808201359280841161128c5760405193610e8f601f8201601f191660200186611e16565b808552602492368483830101116101c8578160009285602093018389013786010152813581811681036101c857604435828116908181036101c8576064359163ffffffff8316908184036101c857610ee5611fc7565b336000526009602052610eff60ff60406000205416611fea565b4286861611156112495785851610156111fc57156111b957600354604080516323b872dd60e01b81523389820190815230602082810191909152928101939093529182908190606001038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156111ad5761117e575b50600c54946000199687871461116b57600197888801600c5587600052600b602052604060002092336bffffffffffffffffffffffff60a01b8554161784558a5192888411611158575050610fda89840154611ddc565b99601f8b1161110f575b60209a508a90601f8411600114611092579267ffffffffffffffff60401b94928192600295600093611087575b5050828c1b9260031b1c191617898201555b0194600160a81b941669ffffffffffffffffffff60b01b865416179160401b16179063ffffffff60801b9060801b16171790556040519133827fe43349c008949cf6b65249356e6f918d4aaa0ca79f2b1166df4a4a98c9c16de2600080a380558152f35b015191508d80611011565b90918a9392601f198416928587016000528d6000209360005b8181106110f857509185939167ffffffffffffffff60401b98966002989694106110e0575b50505050811b0189820155611023565b01519060f88460031b161c191690558c8080806110d0565b8383015186558e9790950194928f01928f016110ab565b8984016000526020600020601f840160051c81019b6020851061114e575b601f0160051c019a5b8b81106111435750610fe4565b600081558a01611136565b909b508b9061112d565b604190634e487b7160e01b600052526000fd5b601190634e487b7160e01b600052526000fd5b61119f9060203d6020116111a6575b6111978183611e16565b810190611faf565b5087610f83565b503d61118d565b6040513d6000823e3d90fd5b60405162461bcd60e51b81526020818801526019818701527f4361706163697479206d75737420626520706f736974697665000000000000006044820152606490fd5b60405162461bcd60e51b81526020818901526021818801527f456e642074696d65206d7573742062652061667465722073746172742074696d6044820152606560f81b6064820152608490fd5b60405162461bcd60e51b81526020818a0152601c818901527f53746172742074696d65206d75737420626520696e20667574757265000000006044820152606490fd5b604183634e487b7160e01b6000525260246000fd5b346101c85760003660031901126101c8576020600254604051908152f35b346101c85760203660031901126101c8576001600160a01b036112e0611f57565b16600052600a6020526020604060002054604051908152f35b50346101c857602090816003193601126101c857803591611318611fc7565b336000526009815261133160ff60406000205416611fea565b82600052600b8152604060002090600282019283549160ff8360a81c16156115e45760ff8360a01c1660038110156103cb576115a95763ffffffff93848460801c16858560c01c161015611571576005013360005280825260ff60406000205460081c166115385767ffffffffffffffff80941642116114fe57600254604080516323b872dd60e01b81523386820190815230602082015291820192909252839082908190606001038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156111ad576114e1575b50604051936040850190858210908211176114cc576040526001845281840191600183523360005252604060002092519180831015610b9857509161149f94939161147f9360ff61ff0084549251151560081b1692169061ffff191617179055825460c01c166120d8565b815463ffffffff60c01b191660c09190911b63ffffffff60c01b16179055565b33907fbffc23fac5cf8c1d58b292d148168dbea7741d95e8db7b124b4b2e7d5ba86a0f600080a360018055005b604184634e487b7160e01b6000525260246000fd5b6114f790833d85116111a6576111978183611e16565b5087611414565b60405162461bcd60e51b81528084018390526013602482015272149959da5cdd1c985d1a5bdb8818db1bdcd959606a1b6044820152606490fd5b60405162461bcd60e51b81528084018390526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606490fd5b60405162461bcd60e51b815280840183905260116024820152704576656e7420617420636170616369747960781b6044820152606490fd5b60405162461bcd60e51b81529182015260156024820152742932b3b4b9ba3930ba34b7b7103737ba1037b832b760591b604482015260649150fd5b60405162461bcd60e51b8152918201526013602482015272115d995b9d081b9bdd081c1d589b1a5cda1959606a1b604482015260649150fd5b50346101c85760203660031901126101c85780359061163a611fc7565b6000828152600b602052604090208054336001600160a01b0391821614908115611706575b50156116c2576002019081549060ff8260a01c16906003821015610b9857506116889015612036565b60ff60a01b1916600160a01b1790557fceaf11772900fe569752a0207c8639fb8228eb8663456dc9eaa3a08f927a8705600080a260018055005b60405162461bcd60e51b8152602081840152601760248201527f4f6e6c79206f7267616e697a6572206f722061646d696e0000000000000000006044820152606490fd5b90506000541633148461165f565b50346101c85760003660031901126101c85761172e611fc7565b33600052602090600a82526040600020549182156117fb5733600052600a8152600060408120556040519163a9059cbb60e01b835233908301528260248301528082604481600060018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af19182156111ad577f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65926117de575b506040519283523392a260018055005b6117f490823d84116111a6576111978183611e16565b50836117ce565b60405162461bcd60e51b81529182015260166024820152754e6f2062616c616e636520746f20776974686472617760501b604482015260649150fd5b50346101c85760203660031901126101c857611851611f83565b35600355005b50346101c857602090816003193601126101c857803591611876611fc7565b82600052600b8152604060002091336000526005830182526040600020805460ff8160081c16156119dc5760ff811683811015610802576001036119985760029060ff1916179055600283019063ffffffff825460c01c169081156119835750815463ffffffff60c01b191660001990910160c01b63ffffffff60c01b161790556119179061190760025484612134565b9081611963575b506002546120cb565b908161194b575b33837f28c1ca19ece093493fee87eac2cdf7cf4b2afe22d1932b761b994129a95c90cc600080a360018055005b600361195a9101918254612075565b9055818061191e565b600a903360005252604060002061197b828254612075565b90558461190e565b601190634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b8152808401859052601760248201527f526567697374726174696f6e206e6f74206163746976650000000000000000006044820152606490fd5b60405162461bcd60e51b8152808401859052600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606490fd5b346101c85760003660031901126101c8576020600354604051908152f35b346101c85760203660031901126101c8576001600160a01b03611a50611f57565b166000526009602052602060ff604060002054166040519015158152f35b50346101c85760203660031901126101c857611a88611f83565b35600255005b50346101c85760203660031901126101c857803561ffff81168091036101c857611ab6611f83565b6127108111611acb57815461ffff1916179055005b60405162461bcd60e51b8152602081840152601860248201527f526174696f2063616e6e6f7420657863656564203130302500000000000000006044820152606490fd5b90346101c85760203660031901126101c8578035600052600b60205260406000209160018060a01b0383541691611b4860018501611e4e565b93600281015491600382015491015491611b7460405196879687526101a0806020890152870190611ef4565b9367ffffffffffffffff80831660408801528260401c16606087015263ffffffff808360801c166080880152611bb360a0880160ff8560a01c16611f34565b60ff8360a81c16151560c088015260ff8360b01c1615158288015260ff8360b81c1615156101008801528260c01c166101208701521c6101408501526101608401526101808301520390f35b50346101c85760803660031901126101c857803560249081359160443590606494853595611c2b611f83565b808411611d6457808711611d2357858510611cd6575060405191608083019183831067ffffffffffffffff841117611158575050918560607f96eb93ab96e9a32e925882f91deeb81d6f79574242a67a2f79969d2f1302c8149793611cd195604052868152876020820152836040820152015283600555846006558060075581600855604051948594859094939260609260808301968352602083015260408201520152565b0390a1005b631d1a585b60e21b9060849360206040519462461bcd60e51b8652850152808401527f46756c6c20726566756e6420686f757273206d757374206265203e3d207061726044840152820152fd5b91601e9060206040519362461bcd60e51b85528401528201527f496e76616c696420617474656e6465652073686172652070657263656e7400006044820152fd5b91601e9060206040519362461bcd60e51b85528401528201527f496e76616c6964207061727469616c20726566756e642070657263656e7400006044820152fd5b346101c85760003660031901126101c857600554600654600754600854928452602084019190915260408301526060820152608090f35b90600182811c92168015611e0c575b6020831014611df657565b634e487b7160e01b600052602260045260246000fd5b91607f1691611deb565b90601f8019910116810190811067ffffffffffffffff821117611e3857604052565b634e487b7160e01b600052604160045260246000fd5b9060405191826000825492611e6284611ddc565b908184526001948581169081600014611ed15750600114611e8e575b5050611e8c92500383611e16565b565b9093915060005260209081600020936000915b818310611eb9575050611e8c93508201013880611e7e565b85548884018501529485019487945091830191611ea1565b915050611e8c94506020925060ff191682840152151560051b8201013880611e7e565b919082519283825260005b848110611f20575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611eff565b906003821015611f415752565b634e487b7160e01b600052602160045260246000fd5b600435906001600160a01b03821682036101c857565b602435906001600160a01b03821682036101c857565b6000546001600160a01b03163303611f9757565b60405163118cdaa760e01b8152336004820152602490fd5b908160209103126101c8575180151581036101c85790565b600260015414611fd8576002600155565b604051633ee5aeb560e01b8152600490fd5b15611ff157565b60405162461bcd60e51b815260206004820152601960248201527f4d75737420637265617465206163636f756e74206669727374000000000000006044820152606490fd5b1561203d57565b60405162461bcd60e51b815260206004820152601060248201526f4576656e74206e6f742061637469766560801b6044820152606490fd5b9190820180921161208257565b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561208257565b81156120b5570490565b634e487b7160e01b600052601260045260246000fd5b9190820391821161208257565b63ffffffff8091169081146120825760010190565b600281015463ffffffff90818160e01c9160c01c1603818111612082571680612114575050565b60036121266121309260025490612098565b9201918254612075565b9055565b6002015460009067ffffffffffffffff16428111156121ae57612159915042906120cb565b60055490610e10918281029080820484149015171561208257811061217d57505090565b60065482810292818404149015171561208257106121a8576121a460649160075490612098565b0490565b50600090565b50612159565b6003810154801561225657600854606403606481116120825760646121dc6121e49284612098565b0480926120cb565b908061222c575b5060028201805460e01c151580612223575b1561221857600491612213915460e01c906120ab565b910155565b505060046000910155565b508115156121fd565b60018060a01b03835416600052600a60205261224e6040600020918254612075565b9055386121eb565b5050565b906000918252600b602052604082209060018060a01b031680835260058201602052604083209260ff600284015460a01c1691600383101590816123135760028414159081612357575b8115612347575b811561232f575b506123275760ff829554166004811015612313576003036122e5575050506004610b0a6122e29360025490612075565b90565b909192506122ff57506001146122f85790565b5060025490565b634e487b7160e01b81526021600452602490fd5b634e487b7160e01b83526021600452602483fd5b509250505090565b83525060068401602052604082205460ff16386122b2565b865460081c60ff161591506122ab565b839250600185141591506122a456fea2646970667358221220e545271f30ce7822fb6a094288bac2beb0b65df3fbad21bef10bd8a2e49443d264736f6c63430008140033",
  "deployedBytecode": "0x60808060405260048036101561001457600080fd5b60e0600035811c9283630505c8c914611da55750826305ce358d14611bff5782630b79143014611b0f57826317a9b2da14611a8e5782631b0e359a14611a6e5782631f5bdf5d14611a2f57826327ad116a14611a1157826327c465b01461185757826327e235e3146112bf578263328c67ab146118375782633ccfd60b146117145782633f69babd1461161d578263406db843146112f957826347734892146112bf57826354417b48146112a1578263547cf87814610e3b5782635af778b414610e1d57826364dc6de014610db55782636778ba7814610d875782636d1884e014610ccc578263715018a614610c735782638a69614e14610a225782638da5cb5b146109f9578263975d2502146108795782639b7aea75146105e45782639dca362f1461053e5782639dff20ac1461050f5782639f9d903a146104f1578263ad8d5eff1461027c57508163c96c908e1461025b578163f2fde38b146101cd575063fc0c546a1461018357600080fd5b346101c85760003660031901126101c8576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600080fd5b346101c85760203660031901126101c8576101e6611f57565b6101ee611f83565b6001600160a01b039081169182156102435750600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b602490600060405191631e4fbdf760e01b8352820152fd5b346101c85760003660031901126101c85761ffff6020915416604051908152f35b346101c85760403660031901126101c857813590610298611f6d565b9082600052602093600b855260406000209460018060a01b038087541633036104ad576002870194855460ff8160a01c166003811015610498576102dc9015612036565b67ffffffffffffffff811642106104605760b81c60ff16610423579060059116968760005201815260406000209182549160ff8360081c16156103e05760ff8316828110156103cb5760010361038857505060ff191660031790558154906001600160e01b03199061034f83821c6120d8565b6001600160e01b0390931692901b161790557f21071e72b9a540ee79a41c3929bd97a87a8d723eb72d52ef08c603328417b580600080a3005b60405162461bcd60e51b815291820152601a60248201527f526567697374726174696f6e206e6f7420636f6e6669726d6564000000000000604482015260649150fd5b602183634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b815291820152601a60248201527f5061727469636970616e74206e6f742072656769737465726564000000000000604482015260649150fd5b60405162461bcd60e51b8152808501849052601660248201527510da1958dacb5a5b881c195c9a5bd90818db1bdcd95960521b6044820152606490fd5b60405162461bcd60e51b81528086018590526011602482015270115d995b9d081b9bdd081cdd185c9d1959607a1b6044820152606490fd5b602186634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b8152808401839052601b60248201527f4f6e6c79206f7267616e697a65722063616e20636865636b2d696e00000000006044820152606490fd5b346101c85760003660031901126101c8576020600c54604051908152f35b50346101c85760403660031901126101c85761053660209161052f611f6d565b903561225a565b604051908152f35b50346101c85760003660031901126101c85733600052600960205260ff604060002054166105a7573360005260096020526040600020600160ff19825416179055337f805996f252884581e2f74cf3d2b03564d5ec26ccc90850ae12653dc1b72d1fa2600080a2005b60649060206040519162461bcd60e51b835282015260166024820152754163636f756e7420616c72656164792065786973747360501b6044820152fd5b90346101c8576020806003193601126101c857813591610602611fc7565b82600052600b825260406000209160018060a01b0391828454163314600285019081549067ffffffffffffffff8260401c16620151808101809111610864578115610859575b50156108175760ff8160a01c166003811015610802576106689015612036565b60ff8160b01c166107c6576106f6969763ffffffff61ffff612710948460ff6106bf9660b81c16156107a8575b50805462ff00ff60a01b191661800160a11b179081905595549286901c9592169160c01c16612098565b04908115801561079e575b15610721575050600a9060035492845416600052526106ef6040600020918254612075565b90556121b4565b7fbb85ff95aded757cf3b840cc38e6e719a2915827f28e3364f62cbefa25bbe2de600080a260018055005b61074661073361074d928496946120cb565b946107416003549687612098565b6120ab565b80946120cb565b918261077a575b50505080610763575b506121b4565b61077260038301918254612075565b90558361075d565b600a91855416600052526107946040600020918254612075565b9055848080610754565b50818110156106ca565b60ff60b81b1916600160b81b1781556107c08a6120ed565b8c610695565b60405162461bcd60e51b81528084018590526015602482015274109bdb9908185b1c9958591e481c995b19585cd959605a1b6044820152606490fd5b602184634e487b7160e01b6000525260246000fd5b60648385806040519262461bcd60e51b845283015260248201527f4f6e6c79206f7267616e697a6572206f7220616674657220646561646c696e656044820152fd5b905042101589610648565b601185634e487b7160e01b6000525260246000fd5b50346101c85760203660031901126101c85780356000818152600b6020526040902080546001600160a01b031633036109ab5760028101805460ff8160a01c166003811015610498576108cc9015612036565b67ffffffffffffffff8160401c1642106109715760ff8160b81c1661092d5760ff60b81b1916600160b81b179055909150610906906120ed565b7fa06c27e213d7097ba1fb6dc326570195f90c66d55a76f7afa322223784382966600080a2005b60405162461bcd60e51b8152602081870152601760248201527f436865636b2d696e20616c726561647920636c6f7365640000000000000000006044820152606490fd5b60405162461bcd60e51b81526020818701526013602482015272115d995b9d081b9bdd08195b991959081e595d606a1b6044820152606490fd5b60405162461bcd60e51b8152602081850152602160248201527f4f6e6c79206f7267616e697a65722063616e20636c6f736520636865636b2d696044820152603760f91b6064820152608490fd5b346101c85760003660031901126101c8576000546040516001600160a01b039091168152602090f35b50346101c857602090816003193601126101c857803590610a41611fc7565b81600052600b83526040600020903360005260058201845260406000206002830160ff815460a01c1660038110156108025760028114908115610c68575b5015610c2e5760ff825460081c1615610bea57600684013360005280875260ff60406000205416610bad573360005286526040600020600160ff1982541617905560ff60009254168381101561080257600303610b49575091610b1391610b0a7f3300bdb359cfb956935bca32e9db727413eab1ca84341f2e36caea85bb7969689460025490612075565b91015490612075565b925b83610b2a575b6040519384523393a360018055005b33600052600a81526040600020610b42858254612075565b9055610b1b565b60ff919593505460a01c16906003821015610b985750600114610b8e575b7f3300bdb359cfb956935bca32e9db727413eab1ca84341f2e36caea85bb79696890610b15565b6002549250610b67565b602190634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b8152808501889052601660248201527514185e5bdd5d08185b1c9958591e4818db185a5b595960521b6044820152606490fd5b60405162461bcd60e51b8152808401879052601860248201527f4e6f74207265676973746572656420666f72206576656e7400000000000000006044820152606490fd5b60405162461bcd60e51b81528084018790526013602482015272115d995b9d081b9bdd08199a5b985b1a5e9959606a1b6044820152606490fd5b600191501487610a7f565b346101c85760003660031901126101c857610c8c611f83565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b90346101c85760203660031901126101c85735600052600b60205260406000209060018060a01b0382541690610d09600160028501549401611e4e565b92610d266040519485948552610120806020870152850190611ef4565b9167ffffffffffffffff80831660408601528260401c16606085015263ffffffff808360801c166080860152610d6560a0860160ff8560a01c16611f34565b60ff8360a81c16151560c08601528260c01c16818501521c6101008301520390f35b50346101c85760203660031901126101c85735600052600b6020526020600360406000200154604051908152f35b50346101c85760403660031901126101c857610dcf611f6d565b8135600052600b60205260056040600020019060018060a01b03166000526020526040600020549060ff82166040519180821015610b98575060409260ff91835260081c1615156020820152f35b346101c85760003660031901126101c8576020604051620151808152f35b50346101c85760803660031901126101c85767ffffffffffffffff9080358281116101c857366023820112156101c857808201359280841161128c5760405193610e8f601f8201601f191660200186611e16565b808552602492368483830101116101c8578160009285602093018389013786010152813581811681036101c857604435828116908181036101c8576064359163ffffffff8316908184036101c857610ee5611fc7565b336000526009602052610eff60ff60406000205416611fea565b4286861611156112495785851610156111fc57156111b957600354604080516323b872dd60e01b81523389820190815230602082810191909152928101939093529182908190606001038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156111ad5761117e575b50600c54946000199687871461116b57600197888801600c5587600052600b602052604060002092336bffffffffffffffffffffffff60a01b8554161784558a5192888411611158575050610fda89840154611ddc565b99601f8b1161110f575b60209a508a90601f8411600114611092579267ffffffffffffffff60401b94928192600295600093611087575b5050828c1b9260031b1c191617898201555b0194600160a81b941669ffffffffffffffffffff60b01b865416179160401b16179063ffffffff60801b9060801b16171790556040519133827fe43349c008949cf6b65249356e6f918d4aaa0ca79f2b1166df4a4a98c9c16de2600080a380558152f35b015191508d80611011565b90918a9392601f198416928587016000528d6000209360005b8181106110f857509185939167ffffffffffffffff60401b98966002989694106110e0575b50505050811b0189820155611023565b01519060f88460031b161c191690558c8080806110d0565b8383015186558e9790950194928f01928f016110ab565b8984016000526020600020601f840160051c81019b6020851061114e575b601f0160051c019a5b8b81106111435750610fe4565b600081558a01611136565b909b508b9061112d565b604190634e487b7160e01b600052526000fd5b601190634e487b7160e01b600052526000fd5b61119f9060203d6020116111a6575b6111978183611e16565b810190611faf565b5087610f83565b503d61118d565b6040513d6000823e3d90fd5b60405162461bcd60e51b81526020818801526019818701527f4361706163697479206d75737420626520706f736974697665000000000000006044820152606490fd5b60405162461bcd60e51b81526020818901526021818801527f456e642074696d65206d7573742062652061667465722073746172742074696d6044820152606560f81b6064820152608490fd5b60405162461bcd60e51b81526020818a0152601c818901527f53746172742074696d65206d75737420626520696e20667574757265000000006044820152606490fd5b604183634e487b7160e01b6000525260246000fd5b346101c85760003660031901126101c8576020600254604051908152f35b346101c85760203660031901126101c8576001600160a01b036112e0611f57565b16600052600a6020526020604060002054604051908152f35b50346101c857602090816003193601126101c857803591611318611fc7565b336000526009815261133160ff60406000205416611fea565b82600052600b8152604060002090600282019283549160ff8360a81c16156115e45760ff8360a01c1660038110156103cb576115a95763ffffffff93848460801c16858560c01c161015611571576005013360005280825260ff60406000205460081c166115385767ffffffffffffffff80941642116114fe57600254604080516323b872dd60e01b81523386820190815230602082015291820192909252839082908190606001038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156111ad576114e1575b50604051936040850190858210908211176114cc576040526001845281840191600183523360005252604060002092519180831015610b9857509161149f94939161147f9360ff61ff0084549251151560081b1692169061ffff191617179055825460c01c166120d8565b815463ffffffff60c01b191660c09190911b63ffffffff60c01b16179055565b33907fbffc23fac5cf8c1d58b292d148168dbea7741d95e8db7b124b4b2e7d5ba86a0f600080a360018055005b604184634e487b7160e01b6000525260246000fd5b6114f790833d85116111a6576111978183611e16565b5087611414565b60405162461bcd60e51b81528084018390526013602482015272149959da5cdd1c985d1a5bdb8818db1bdcd959606a1b6044820152606490fd5b60405162461bcd60e51b81528084018390526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606490fd5b60405162461bcd60e51b815280840183905260116024820152704576656e7420617420636170616369747960781b6044820152606490fd5b60405162461bcd60e51b81529182015260156024820152742932b3b4b9ba3930ba34b7b7103737ba1037b832b760591b604482015260649150fd5b60405162461bcd60e51b8152918201526013602482015272115d995b9d081b9bdd081c1d589b1a5cda1959606a1b604482015260649150fd5b50346101c85760203660031901126101c85780359061163a611fc7565b6000828152600b602052604090208054336001600160a01b0391821614908115611706575b50156116c2576002019081549060ff8260a01c16906003821015610b9857506116889015612036565b60ff60a01b1916600160a01b1790557fceaf11772900fe569752a0207c8639fb8228eb8663456dc9eaa3a08f927a8705600080a260018055005b60405162461bcd60e51b8152602081840152601760248201527f4f6e6c79206f7267616e697a6572206f722061646d696e0000000000000000006044820152606490fd5b90506000541633148461165f565b50346101c85760003660031901126101c85761172e611fc7565b33600052602090600a82526040600020549182156117fb5733600052600a8152600060408120556040519163a9059cbb60e01b835233908301528260248301528082604481600060018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af19182156111ad577f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65926117de575b506040519283523392a260018055005b6117f490823d84116111a6576111978183611e16565b50836117ce565b60405162461bcd60e51b81529182015260166024820152754e6f2062616c616e636520746f20776974686472617760501b604482015260649150fd5b50346101c85760203660031901126101c857611851611f83565b35600355005b50346101c857602090816003193601126101c857803591611876611fc7565b82600052600b8152604060002091336000526005830182526040600020805460ff8160081c16156119dc5760ff811683811015610802576001036119985760029060ff1916179055600283019063ffffffff825460c01c169081156119835750815463ffffffff60c01b191660001990910160c01b63ffffffff60c01b161790556119179061190760025484612134565b9081611963575b506002546120cb565b908161194b575b33837f28c1ca19ece093493fee87eac2cdf7cf4b2afe22d1932b761b994129a95c90cc600080a360018055005b600361195a9101918254612075565b9055818061191e565b600a903360005252604060002061197b828254612075565b90558461190e565b601190634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b8152808401859052601760248201527f526567697374726174696f6e206e6f74206163746976650000000000000000006044820152606490fd5b60405162461bcd60e51b8152808401859052600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606490fd5b346101c85760003660031901126101c8576020600354604051908152f35b346101c85760203660031901126101c8576001600160a01b03611a50611f57565b166000526009602052602060ff604060002054166040519015158152f35b50346101c85760203660031901126101c857611a88611f83565b35600255005b50346101c85760203660031901126101c857803561ffff81168091036101c857611ab6611f83565b6127108111611acb57815461ffff1916179055005b60405162461bcd60e51b8152602081840152601860248201527f526174696f2063616e6e6f7420657863656564203130302500000000000000006044820152606490fd5b90346101c85760203660031901126101c8578035600052600b60205260406000209160018060a01b0383541691611b4860018501611e4e565b93600281015491600382015491015491611b7460405196879687526101a0806020890152870190611ef4565b9367ffffffffffffffff80831660408801528260401c16606087015263ffffffff808360801c166080880152611bb360a0880160ff8560a01c16611f34565b60ff8360a81c16151560c088015260ff8360b01c1615158288015260ff8360b81c1615156101008801528260c01c166101208701521c6101408501526101608401526101808301520390f35b50346101c85760803660031901126101c857803560249081359160443590606494853595611c2b611f83565b808411611d6457808711611d2357858510611cd6575060405191608083019183831067ffffffffffffffff841117611158575050918560607f96eb93ab96e9a32e925882f91deeb81d6f79574242a67a2f79969d2f1302c8149793611cd195604052868152876020820152836040820152015283600555846006558060075581600855604051948594859094939260609260808301968352602083015260408201520152565b0390a1005b631d1a585b60e21b9060849360206040519462461bcd60e51b8652850152808401527f46756c6c20726566756e6420686f757273206d757374206265203e3d207061726044840152820152fd5b91601e9060206040519362461bcd60e51b85528401528201527f496e76616c696420617474656e6465652073686172652070657263656e7400006044820152fd5b91601e9060206040519362461bcd60e51b85528401528201527f496e76616c6964207061727469616c20726566756e642070657263656e7400006044820152fd5b346101c85760003660031901126101c857600554600654600754600854928452602084019190915260408301526060820152608090f35b90600182811c92168015611e0c575b6020831014611df657565b634e487b7160e01b600052602260045260246000fd5b91607f1691611deb565b90601f8019910116810190811067ffffffffffffffff821117611e3857604052565b634e487b7160e01b600052604160045260246000fd5b9060405191826000825492611e6284611ddc565b908184526001948581169081600014611ed15750600114611e8e575b5050611e8c92500383611e16565b565b9093915060005260209081600020936000915b818310611eb9575050611e8c93508201013880611e7e565b85548884018501529485019487945091830191611ea1565b915050611e8c94506020925060ff191682840152151560051b8201013880611e7e565b919082519283825260005b848110611f20575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611eff565b906003821015611f415752565b634e487b7160e01b600052602160045260246000fd5b600435906001600160a01b03821682036101c857565b602435906001600160a01b03821682036101c857565b6000546001600160a01b03163303611f9757565b60405163118cdaa760e01b8152336004820152602490fd5b908160209103126101c8575180151581036101c85790565b600260015414611fd8576002600155565b604051633ee5aeb560e01b8152600490fd5b15611ff157565b60405162461bcd60e51b815260206004820152601960248201527f4d75737420637265617465206163636f756e74206669727374000000000000006044820152606490fd5b1561203d57565b60405162461bcd60e51b815260206004820152601060248201526f4576656e74206e6f742061637469766560801b6044820152606490fd5b9190820180921161208257565b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561208257565b81156120b5570490565b634e487b7160e01b600052601260045260246000fd5b9190820391821161208257565b63ffffffff8091169081146120825760010190565b600281015463ffffffff90818160e01c9160c01c1603818111612082571680612114575050565b60036121266121309260025490612098565b9201918254612075565b9055565b6002015460009067ffffffffffffffff16428111156121ae57612159915042906120cb565b60055490610e10918281029080820484149015171561208257811061217d57505090565b60065482810292818404149015171561208257106121a8576121a460649160075490612098565b0490565b50600090565b50612159565b6003810154801561225657600854606403606481116120825760646121dc6121e49284612098565b0480926120cb565b908061222c575b5060028201805460e01c151580612223575b1561221857600491612213915460e01c906120ab565b910155565b505060046000910155565b508115156121fd565b60018060a01b03835416600052600a60205261224e6040600020918254612075565b9055386121eb565b5050565b906000918252600b602052604082209060018060a01b031680835260058201602052604083209260ff600284015460a01c1691600383101590816123135760028414159081612357575b8115612347575b811561232f575b506123275760ff829554166004811015612313576003036122e5575050506004610b0a6122e29360025490612075565b90565b909192506122ff57506001146122f85790565b5060025490565b634e487b7160e01b81526021600452602490fd5b634e487b7160e01b83526021600452602483fd5b509250505090565b83525060068401602052604082205460ff16386122b2565b865460081c60ff161591506122ab565b839250600185141591506122a456fea2646970667358221220e545271f30ce7822fb6a094288bac2beb0b65df3fbad21bef10bd8a2e49443d264736f6c63430008140033",
  "devdoc": {
    "details": "Participants put down deposits that are forfeited if they don't attend.      Forfeits are shared among actual attendees as rewards for showing up.",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "cancelEvent(uint256)": {
        "details": "Can be called by organizer or admin",
        "params": {
          "_eventId": "Event to cancel"
        }
      },
      "cancelRegistration(uint256)": {
        "params": {
          "_eventId": "Event to cancel registration for"
        }
      },
      "checkIn(uint256,address)": {
        "details": "Only callable by event organizer after event start time",
        "params": {
          "_eventId": "Event ID",
          "_participant": "Address to check in"
        }
      },
      "claimPayout(uint256)": {
        "details": "Returns deposit + reward share for attendees, or full deposit for canceled events",
        "params": {
          "_eventId": "Event to claim from"
        }
      },
      "closeCheckIn(uint256)": {
        "details": "Should be called after event ends, before completing",
        "params": {
          "_eventId": "Event to close check-in for"
        }
      },
      "completeEvent(uint256)": {
        "details": "Handles organizer bond, forfeit distribution, and reward calculation",
        "params": {
          "_eventId": "Event to complete"
        }
      },
      "createAccount()": {
        "details": "Simple gate to prevent accidental interactions"
      },
      "createEvent(string,uint64,uint64,uint32)": {
        "params": {
          "_capacity": "Maximum number of participants",
          "_description": "Event description",
          "_endTime": "When event ends (unix timestamp)",
          "_startTime": "When event begins (unix timestamp)"
        },
        "returns": {
          "_0": "eventId The ID of the created event"
        }
      },
      "getClaimablePayout(uint256,address)": {
        "params": {
          "_eventId": "Event ID",
          "_participant": "Participant address"
        },
        "returns": {
          "_0": "Claimable amount"
        }
      },
      "getEvent(uint256)": {
        "params": {
          "_eventId": "Event to query"
        }
      },
      "getEventForfeitPool(uint256)": {
        "params": {
          "_eventId": "Event ID"
        },
        "returns": {
          "_0": "Current forfeit pool amount"
        }
      },
      "getRegistration(uint256,address)": {
        "params": {
          "_eventId": "Event ID",
          "_participant": "Participant address"
        },
        "returns": {
          "exists": "Whether registration exists",
          "status": "Registration status"
        }
      },
      "getUserBalance(address)": {
        "params": {
          "_user": "User address"
        },
        "returns": {
          "_0": "Available balance"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerForEvent(uint256)": {
        "params": {
          "_eventId": "Event to register for"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAttendeeDepositAmount(uint256)": {
        "params": {
          "_deposit": "global deposit amount"
        }
      },
      "setMinAttendanceRatio(uint16)": {
        "params": {
          "_ratio": "minimum attendance ratio in basis points (0-10000, 3000 = 30%)"
        }
      },
      "setOrganizerBondAmount(uint256)": {
        "params": {
          "_bond": "global bond amount"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePolicy(uint256,uint256,uint256,uint256)": {
        "params": {
          "_attendeeSharePercent": "Percentage of forfeits going to attendees (0-100)",
          "_fullRefundHours": "Hours before event for 100% refund",
          "_partialRefundHours": "Hours before event for partial refund",
          "_partialRefundPercent": "Percentage refund in partial window (0-100)"
        }
      },
      "withdraw()": {
        "details": "Transfers entire balance to save gas"
      }
    },
    "title": "EventManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "COMPLETION_DEADLINE()": {
        "notice": "Time after event ends when anyone can complete it (24 hours)"
      },
      "attendeeDepositAmount()": {
        "notice": "Global deposit amount required for all events"
      },
      "balances(address)": {
        "notice": "User balances available for withdrawal"
      },
      "cancelEvent(uint256)": {
        "notice": "Cancel event and trigger full refunds"
      },
      "cancelRegistration(uint256)": {
        "notice": "Cancel registration (may incur forfeit based on timing)"
      },
      "checkIn(uint256,address)": {
        "notice": "Check in a participant (marks them as attended)"
      },
      "claimPayout(uint256)": {
        "notice": "Claim payout after event completion/cancellation"
      },
      "closeCheckIn(uint256)": {
        "notice": "Close check-in period and process no-show forfeits"
      },
      "completeEvent(uint256)": {
        "notice": "Mark event as complete and process settlements"
      },
      "createAccount()": {
        "notice": "Create a user account (required before any other actions)"
      },
      "createEvent(string,uint64,uint64,uint32)": {
        "notice": "Create a new event (organizer pays bond upfront)"
      },
      "events(uint256)": {
        "notice": "All events stored by ID"
      },
      "getClaimablePayout(uint256,address)": {
        "notice": "Calculate claimable payout for a participant"
      },
      "getEvent(uint256)": {
        "notice": "Get basic event information"
      },
      "getEventForfeitPool(uint256)": {
        "notice": "Get current forfeit pool for an event"
      },
      "getRegistration(uint256,address)": {
        "notice": "Get participant's registration status for an event"
      },
      "getUserBalance(address)": {
        "notice": "Get user's available balance"
      },
      "isRegisteredUser(address)": {
        "notice": "Tracks if a user has created an account"
      },
      "minAttendanceRatio()": {
        "notice": "Global minimum attendance ratio for all events (in basis points, 3000 = 30%)"
      },
      "nextEventId()": {
        "notice": "Next event ID to assign. Currently we can use this for the sake of the hackathn."
      },
      "organizerBondAmount()": {
        "notice": "Global bond amount required for all organizers"
      },
      "policy()": {
        "notice": "Global refund policy configuration"
      },
      "registerForEvent(uint256)": {
        "notice": "Register for an event (pays deposit) Currently no need for registration approval."
      },
      "setAttendeeDepositAmount(uint256)": {
        "notice": "Update global deposit amount for all events"
      },
      "setMinAttendanceRatio(uint16)": {
        "notice": "Update global minimum attendance ratio for all events"
      },
      "setOrganizerBondAmount(uint256)": {
        "notice": "Update global bond amount for all organizers"
      },
      "token()": {
        "notice": "ERC20 token used for all deposits and bonds"
      },
      "updatePolicy(uint256,uint256,uint256,uint256)": {
        "notice": "Update global refund and forfeit policy"
      },
      "withdraw()": {
        "notice": "Withdraw available balance to external account"
      }
    },
    "notice": "Decentralized event management with accountability deposits",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 266,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 344,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "attendeeDepositAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 347,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "organizerBondAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 350,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "minAttendanceRatio",
        "offset": 0,
        "slot": "4",
        "type": "t_uint16"
      },
      {
        "astId": 354,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "policy",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(PolicyConfig)388_storage"
      },
      {
        "astId": 359,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "isRegisteredUser",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 364,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "balances",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 370,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "events",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Event)433_storage)"
      },
      {
        "astId": 374,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "nextEventId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(EventStatus)438": {
        "encoding": "inplace",
        "label": "enum EventManager.EventStatus",
        "numberOfBytes": "1"
      },
      "t_enum(RegStatus)444": {
        "encoding": "inplace",
        "label": "enum EventManager.RegStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Registration)395_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EventManager.Registration)",
        "numberOfBytes": "32",
        "value": "t_struct(Registration)395_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Event)433_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EventManager.Event)",
        "numberOfBytes": "32",
        "value": "t_struct(Event)433_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Event)433_storage": {
        "encoding": "inplace",
        "label": "struct EventManager.Event",
        "members": [
          {
            "astId": 398,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "organizer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 400,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 402,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 404,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "endTime",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 406,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "capacity",
            "offset": 16,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 409,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "status",
            "offset": 20,
            "slot": "2",
            "type": "t_enum(EventStatus)438"
          },
          {
            "astId": 411,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "published",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 413,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "bondReleased",
            "offset": 22,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 415,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "checkInClosed",
            "offset": 23,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 417,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "confirmedCount",
            "offset": 24,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 419,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "attendedCount",
            "offset": 28,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 421,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "forfeitPool",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 423,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "rewardPerAttendee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 428,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "registrations",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(Registration)395_storage)"
          },
          {
            "astId": 432,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "rewardsClaimed",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(PolicyConfig)388_storage": {
        "encoding": "inplace",
        "label": "struct EventManager.PolicyConfig",
        "members": [
          {
            "astId": 381,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "fullRefundHours",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 383,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "partialRefundHours",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 385,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "partialRefundPercent",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 387,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "attendeeSharePercent",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Registration)395_storage": {
        "encoding": "inplace",
        "label": "struct EventManager.Registration",
        "members": [
          {
            "astId": 392,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(RegStatus)444"
          },
          {
            "astId": 394,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "exists",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
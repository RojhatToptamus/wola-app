{
  "address": "0x480e34a4408a729378D4204a6251654e0DD41636",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "AccountCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBond",
          "type": "uint256"
        }
      ],
      "name": "BoundsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "EventCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "EventCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "organizer",
          "type": "address"
        }
      ],
      "name": "EventCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "EventPublished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "ParticipantCheckedIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fullRefundHours",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partialRefundHours",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partialRefundPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "attendeeSharePercent",
          "type": "uint256"
        }
      ],
      "name": "PolicyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "RegistrationCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "RegistrationConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBond",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "cancelEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "cancelRegistration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        }
      ],
      "name": "checkIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "claimPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "completeEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bond",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_minAttendanceBps",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "_capacity",
          "type": "uint32"
        }
      ],
      "name": "createEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "events",
      "outputs": [
        {
          "internalType": "address",
          "name": "organizer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "minAttendanceBps",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "capacity",
          "type": "uint32"
        },
        {
          "internalType": "enum EventManager.EventStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "published",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "confirmedCount",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "attendedCount",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "bondReleased",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "forfeitPool",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        }
      ],
      "name": "getClaimablePayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "getEvent",
      "outputs": [
        {
          "internalType": "address",
          "name": "organizer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "minAttendanceBps",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "capacity",
          "type": "uint32"
        },
        {
          "internalType": "enum EventManager.EventStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "published",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "confirmedCount",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "attendedCount",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "getEventForfeitPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        }
      ],
      "name": "getRegistration",
      "outputs": [
        {
          "internalType": "enum EventManager.RegStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fullRefundHours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "partialRefundHours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "partialRefundPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "attendeeSharePercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "publishEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "registerForEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBond",
          "type": "uint256"
        }
      ],
      "name": "setBounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fullRefundHours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_partialRefundHours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_partialRefundPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_attendeeSharePercent",
          "type": "uint256"
        }
      ],
      "name": "updatePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x51253703cd8b8ff7c92189a0a788a39871a795e7901883795fc13dfe5105af30",
  "receipt": {
    "to": null,
    "from": "0xB957C7591bf8b8ad1e5B8942dE6FF3b1D22d4951",
    "contractAddress": "0x480e34a4408a729378D4204a6251654e0DD41636",
    "transactionIndex": 16,
    "gasUsed": "2343527",
    "logsBloom": "0x
    "blockHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "transactionHash": "0x51253703cd8b8ff7c92189a0a788a39871a795e7901883795fc13dfe5105af30",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 22070432,
        "transactionHash": "0x51253703cd8b8ff7c92189a0a788a39871a795e7901883795fc13dfe5105af30",
        "address": "0x480e34a4408a729378D4204a6251654e0DD41636",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b957c7591bf8b8ad1e5b8942de6ff3b1d22d4951"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x0000000000000000000000000000000000000000000000000000000000000000"
      }
    ],
    "blockNumber": 22070432,
    "cumulativeGasUsed": "3166963",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf332ccb87366dCC301D0160B7dcC9355Db3cF297",
    "0xB957C7591bf8b8ad1e5B8942dE6FF3b1D22d4951"
  ],
  "numDeployments": 1,
  "solcInputHash": "8a173f865ac5a5eda6a3f83c8bbcdf03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBond\",\"type\":\"uint256\"}],\"name\":\"BoundsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"EventCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"EventCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"}],\"name\":\"EventCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"EventPublished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"ParticipantCheckedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fullRefundHours\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partialRefundHours\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partialRefundPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"attendeeSharePercent\",\"type\":\"uint256\"}],\"name\":\"PolicyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"RegistrationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"RegistrationConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"cancelEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"cancelRegistration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"checkIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"claimPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"completeEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bond\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_minAttendanceBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_capacity\",\"type\":\"uint32\"}],\"name\":\"createEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minAttendanceBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"capacity\",\"type\":\"uint32\"},{\"internalType\":\"enum EventManager.EventStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"published\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"confirmedCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"attendedCount\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"bondReleased\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"forfeitPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getClaimablePayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getEvent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minAttendanceBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"capacity\",\"type\":\"uint32\"},{\"internalType\":\"enum EventManager.EventStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"published\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"confirmedCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"attendedCount\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getEventForfeitPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getRegistration\",\"outputs\":[{\"internalType\":\"enum EventManager.RegStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fullRefundHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partialRefundHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partialRefundPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attendeeSharePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"publishEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"registerForEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBond\",\"type\":\"uint256\"}],\"name\":\"setBounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fullRefundHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_partialRefundHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_partialRefundPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_attendeeSharePercent\",\"type\":\"uint256\"}],\"name\":\"updatePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Decentralized Event Management Contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EventManager.sol\":\"EventManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/EventManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * Decentralized Event Management Contract\\n */\\ncontract EventManager is Ownable, ReentrancyGuard {\\n    IERC20 public immutable token;\\n\\n    struct Bounds {\\n        uint256 minDeposit;\\n        uint256 maxDeposit;\\n        uint256 minBond;\\n        uint256 maxBond;\\n    }\\n    Bounds public bounds;\\n    PolicyConfig public policy;\\n\\n    mapping(address => bool) public hasAccount;\\n    mapping(address => uint256) public balances;\\n\\n    struct PolicyConfig {\\n        uint256 fullRefundHours;        // Hours before event for 100% refund\\n        uint256 partialRefundHours;     // Hours before event for partial refund  \\n        uint256 partialRefundPercent;   // Percent for partial refund (0-100)\\n        uint256 attendeeSharePercent;   // Percent of forfeits going to attendees (0-100)\\n    }\\n\\n    enum EventStatus {\\n        Created,\\n        Published,\\n        Canceled,\\n        Completed\\n    }\\n\\n    enum RegStatus {\\n        None,\\n        Confirmed,\\n        CanceledByParticipant,\\n        Attended\\n    }\\n\\n    struct Registration {\\n        RegStatus status;\\n        bool exists;\\n    }\\n\\n    struct Event {\\n        address organizer;\\n        uint256 deposit;\\n        uint256 bond;\\n        uint64 startTime;\\n        uint16 minAttendanceBps;\\n        uint32 capacity;\\n        EventStatus status;\\n        bool published;\\n        uint32 confirmedCount;\\n        uint32 attendedCount;\\n        bool bondReleased;\\n        uint256 forfeitPool;\\n        mapping(address => Registration) registrations;\\n        mapping(address => bool) rewardsClaimed;\\n    }\\n\\n    mapping(uint256 => Event) public events;\\n    uint256 public nextEventId = 1;\\n\\n    event AccountCreated(address indexed user);\\n    event EventCreated(uint256 indexed eventId, address indexed organizer);\\n    event EventPublished(uint256 indexed eventId);\\n    event EventCanceled(uint256 indexed eventId);\\n    event EventCompleted(uint256 indexed eventId);\\n    event RegistrationConfirmed(uint256 indexed eventId, address indexed participant);\\n    event RegistrationCanceled(uint256 indexed eventId, address indexed participant);\\n    event ParticipantCheckedIn(uint256 indexed eventId, address indexed participant);\\n    event RewardsClaimed(uint256 indexed eventId, address indexed participant, uint256 amount);\\n    event Withdrawal(address indexed user, uint256 amount);\\n    event BoundsUpdated(uint256 minDeposit, uint256 maxDeposit, uint256 minBond, uint256 maxBond);\\n    event PolicyUpdated(uint256 fullRefundHours, uint256 partialRefundHours, uint256 partialRefundPercent, uint256 attendeeSharePercent);\\n\\n    constructor(address _token, address _owner) Ownable(_owner) {\\n        token = IERC20(_token);\\n        bounds = Bounds({\\n            minDeposit: 1e18,\\n            maxDeposit: 1000e18,\\n            minBond: 10e18,\\n            maxBond: 10000e18\\n        });\\n        policy = PolicyConfig({\\n            fullRefundHours: 24,\\n            partialRefundHours: 2, \\n            partialRefundPercent: 50,\\n            attendeeSharePercent: 50\\n        });\\n    }\\n\\n    function createAccount() external {\\n        require(!hasAccount[msg.sender], \\\"Account already exists\\\");\\n        hasAccount[msg.sender] = true;\\n        emit AccountCreated(msg.sender);\\n    }\\n\\n    function setBounds(uint256 _minDeposit, uint256 _maxDeposit, uint256 _minBond, uint256 _maxBond) external onlyOwner {\\n        require(_minDeposit <= _maxDeposit, \\\"Invalid deposit bounds\\\");\\n        require(_minBond <= _maxBond, \\\"Invalid bond bounds\\\");\\n        bounds = Bounds(_minDeposit, _maxDeposit, _minBond, _maxBond);\\n        emit BoundsUpdated(_minDeposit, _maxDeposit, _minBond, _maxBond);\\n    }\\n\\n    function updatePolicy(\\n        uint256 _fullRefundHours,\\n        uint256 _partialRefundHours, \\n        uint256 _partialRefundPercent,\\n        uint256 _attendeeSharePercent\\n    ) external onlyOwner {\\n        require(_partialRefundPercent <= 100, \\\"Invalid partial refund percent\\\");\\n        require(_attendeeSharePercent <= 100, \\\"Invalid attendee share percent\\\");\\n        require(_fullRefundHours >= _partialRefundHours, \\\"Full refund hours must be >= partial\\\");\\n        \\n        policy = PolicyConfig({\\n            fullRefundHours: _fullRefundHours,\\n            partialRefundHours: _partialRefundHours,\\n            partialRefundPercent: _partialRefundPercent,\\n            attendeeSharePercent: _attendeeSharePercent\\n        });\\n        \\n        emit PolicyUpdated(_fullRefundHours, _partialRefundHours, _partialRefundPercent, _attendeeSharePercent);\\n    }\\n\\n    function createEvent(\\n        uint256 _deposit,\\n        uint256 _bond,\\n        uint64 _startTime,\\n        uint16 _minAttendanceBps,\\n        uint32 _capacity\\n    ) external nonReentrant returns (uint256) {\\n        require(hasAccount[msg.sender], \\\"Must create account first\\\");\\n        require(_deposit >= bounds.minDeposit && _deposit <= bounds.maxDeposit, \\\"Invalid deposit amount\\\");\\n        require(_bond >= bounds.minBond && _bond <= bounds.maxBond, \\\"Invalid bond amount\\\");\\n        require(_startTime > block.timestamp, \\\"Start time must be in future\\\");\\n        require(_minAttendanceBps <= 10000, \\\"Invalid attendance BPS\\\");\\n        require(_capacity > 0, \\\"Capacity must be positive\\\");\\n\\n        token.transferFrom(msg.sender, address(this), _bond);\\n\\n        uint256 eventId = nextEventId++;\\n        Event storage newEvent = events[eventId];\\n        newEvent.organizer = msg.sender;\\n        newEvent.deposit = _deposit;\\n        newEvent.bond = _bond;\\n        newEvent.startTime = _startTime;\\n        newEvent.minAttendanceBps = _minAttendanceBps;\\n        newEvent.capacity = _capacity;\\n        newEvent.status = EventStatus.Created;\\n        newEvent.published = false;\\n\\n        emit EventCreated(eventId, msg.sender);\\n        return eventId;\\n    }\\n\\n    function publishEvent(uint256 _eventId) external {\\n        Event storage evt = events[_eventId];\\n        require(evt.organizer == msg.sender, \\\"Only organizer can publish\\\");\\n        require(evt.status == EventStatus.Created, \\\"Event already published or finalized\\\");\\n        \\n        evt.published = true;\\n        evt.status = EventStatus.Published;\\n        \\n        emit EventPublished(_eventId);\\n    }\\n\\n    function registerForEvent(uint256 _eventId) external nonReentrant {\\n        require(hasAccount[msg.sender], \\\"Must create account first\\\");\\n        \\n        Event storage evt = events[_eventId];\\n        require(evt.published, \\\"Event not published\\\");\\n        require(evt.status == EventStatus.Published, \\\"Registration not open\\\");\\n        require(evt.confirmedCount < evt.capacity, \\\"Event at capacity\\\");\\n        require(!evt.registrations[msg.sender].exists, \\\"Already registered\\\");\\n        require(block.timestamp < evt.startTime, \\\"Registration closed\\\");\\n\\n        token.transferFrom(msg.sender, address(this), evt.deposit);\\n\\n        evt.registrations[msg.sender] = Registration({\\n            status: RegStatus.Confirmed,\\n            exists: true\\n        });\\n        evt.confirmedCount++;\\n\\n        emit RegistrationConfirmed(_eventId, msg.sender);\\n    }\\n\\n    function cancelRegistration(uint256 _eventId) external nonReentrant {\\n        Event storage evt = events[_eventId];\\n        Registration storage reg = evt.registrations[msg.sender];\\n        \\n        require(reg.exists, \\\"Not registered\\\");\\n        require(reg.status == RegStatus.Confirmed, \\\"Registration not active\\\");\\n\\n        reg.status = RegStatus.CanceledByParticipant;\\n        evt.confirmedCount--;\\n\\n        uint256 refundAmount = _calculateRefund(evt, evt.deposit);\\n        if (refundAmount > 0) {\\n            balances[msg.sender] += refundAmount;\\n        }\\n\\n        uint256 forfeitAmount = evt.deposit - refundAmount;\\n        if (forfeitAmount > 0) {\\n            evt.forfeitPool += forfeitAmount;\\n        }\\n\\n        emit RegistrationCanceled(_eventId, msg.sender);\\n    }\\n\\n    function checkIn(uint256 _eventId, address _participant) external {\\n        Event storage evt = events[_eventId];\\n        require(evt.organizer == msg.sender, \\\"Only organizer can check-in\\\");\\n        require(evt.status == EventStatus.Published, \\\"Event not active\\\");\\n        require(block.timestamp >= evt.startTime, \\\"Event not started\\\");\\n        \\n        Registration storage reg = evt.registrations[_participant];\\n        require(reg.exists, \\\"Participant not registered\\\");\\n        require(reg.status == RegStatus.Confirmed, \\\"Registration not confirmed\\\");\\n\\n        reg.status = RegStatus.Attended;\\n        evt.attendedCount++;\\n\\n        emit ParticipantCheckedIn(_eventId, _participant);\\n    }\\n\\n    function completeEvent(uint256 _eventId) external nonReentrant {\\n        Event storage evt = events[_eventId];\\n        require(evt.organizer == msg.sender, \\\"Only organizer can complete\\\");\\n        require(evt.status == EventStatus.Published, \\\"Event not active\\\");\\n        require(!evt.bondReleased, \\\"Bond already released\\\");\\n\\n        evt.status = EventStatus.Completed;\\n        evt.bondReleased = true;\\n\\n        uint256 attendanceRate = evt.confirmedCount > 0 ? \\n            (evt.attendedCount * 10000) / evt.confirmedCount : 0;\\n\\n        if (attendanceRate >= evt.minAttendanceBps) {\\n            balances[evt.organizer] += evt.bond;\\n        } else {\\n            uint256 penalty = (evt.bond * (evt.minAttendanceBps - attendanceRate)) / evt.minAttendanceBps;\\n            balances[evt.organizer] += (evt.bond - penalty);\\n            evt.forfeitPool += penalty;\\n        }\\n\\n        _distributeForfeitsByPolicy(evt);\\n\\n        emit EventCompleted(_eventId);\\n    }\\n\\n    function cancelEvent(uint256 _eventId) external nonReentrant {\\n        Event storage evt = events[_eventId];\\n        require(evt.organizer == msg.sender || msg.sender == owner(), \\\"Only organizer or admin\\\");\\n        require(evt.status == EventStatus.Published, \\\"Event not active\\\");\\n\\n        evt.status = EventStatus.Canceled;\\n        \\n        // Participants can now claim their deposits via claimPayout()\\n        emit EventCanceled(_eventId);\\n    }\\n\\n    function claimPayout(uint256 _eventId) external nonReentrant {\\n        Event storage evt = events[_eventId];\\n        Registration storage reg = evt.registrations[msg.sender];\\n        \\n        require(evt.status == EventStatus.Completed || evt.status == EventStatus.Canceled, \\\"Event not finalized\\\");\\n        require(reg.exists, \\\"Not registered for event\\\");\\n        require(!evt.rewardsClaimed[msg.sender], \\\"Payout already claimed\\\");\\n        \\n        evt.rewardsClaimed[msg.sender] = true;\\n        \\n        uint256 totalPayout = 0;\\n        \\n        // If attended, get deposit back + share of forfeit pool\\n        if (reg.status == RegStatus.Attended) {\\n            totalPayout += evt.deposit; // Original deposit back\\n            totalPayout += _calculateReward(evt); // Share of forfeits\\n        }\\n        // If canceled event, everyone gets deposits back\\n        else if (evt.status == EventStatus.Canceled) {\\n            totalPayout += evt.deposit;\\n        }\\n        \\n        if (totalPayout > 0) {\\n            balances[msg.sender] += totalPayout;\\n        }\\n        \\n        emit RewardsClaimed(_eventId, msg.sender, totalPayout);\\n    }\\n\\n    function withdraw() external nonReentrant {\\n        uint256 amount = balances[msg.sender];\\n        require(amount > 0, \\\"No balance to withdraw\\\");\\n\\n        balances[msg.sender] = 0;\\n        token.transfer(msg.sender, amount);\\n\\n        emit Withdrawal(msg.sender, amount);\\n    }\\n\\n    function _calculateRefund(Event storage evt, uint256 depositAmount) private view returns (uint256) {\\n        uint256 timeUntilStart = evt.startTime > block.timestamp ? \\n            evt.startTime - block.timestamp : 0;\\n\\n        if (timeUntilStart >= policy.fullRefundHours * 1 hours) {\\n            return depositAmount;\\n        } else if (timeUntilStart >= policy.partialRefundHours * 1 hours) {\\n            return (depositAmount * policy.partialRefundPercent) / 100;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _distributeForfeitsByPolicy(Event storage evt) private {\\n        if (evt.forfeitPool == 0) return;\\n\\n        uint256 organizerShare = (evt.forfeitPool * (100 - policy.attendeeSharePercent)) / 100;\\n        if (organizerShare > 0) {\\n            balances[evt.organizer] += organizerShare;\\n            evt.forfeitPool -= organizerShare;\\n        }\\n        // Remaining forfeitPool distributed via claimPayout()\\n    }\\n\\n    function _calculateReward(Event storage evt) private view returns (uint256) {\\n        if (evt.forfeitPool == 0 || evt.attendedCount == 0) {\\n            return 0;\\n        }\\n\\n        // Attendees split the remaining forfeit pool equally\\n        return evt.forfeitPool / evt.attendedCount;\\n    }\\n\\n    // View functions\\n    function getEvent(uint256 _eventId) external view returns (\\n        address organizer,\\n        uint256 deposit,\\n        uint256 bond,\\n        uint64 startTime,\\n        uint16 minAttendanceBps,\\n        uint32 capacity,\\n        EventStatus status,\\n        bool published,\\n        uint32 confirmedCount,\\n        uint32 attendedCount\\n    ) {\\n        Event storage evt = events[_eventId];\\n        return (\\n            evt.organizer,\\n            evt.deposit,\\n            evt.bond,\\n            evt.startTime,\\n            evt.minAttendanceBps,\\n            evt.capacity,\\n            evt.status,\\n            evt.published,\\n            evt.confirmedCount,\\n            evt.attendedCount\\n        );\\n    }\\n\\n    function getRegistration(uint256 _eventId, address _participant) external view returns (RegStatus status, bool exists) {\\n        Registration storage reg = events[_eventId].registrations[_participant];\\n        return (reg.status, reg.exists);\\n    }\\n\\n    function getUserBalance(address _user) external view returns (uint256) {\\n        return balances[_user];\\n    }\\n\\n    function getClaimablePayout(uint256 _eventId, address _participant) external view returns (uint256) {\\n        Event storage evt = events[_eventId];\\n        Registration storage reg = evt.registrations[_participant];\\n        \\n        if ((evt.status != EventStatus.Completed && evt.status != EventStatus.Canceled) || \\n            !reg.exists ||\\n            evt.rewardsClaimed[_participant]) {\\n            return 0;\\n        }\\n        \\n        uint256 totalPayout = 0;\\n        \\n        if (reg.status == RegStatus.Attended) {\\n            totalPayout += evt.deposit; // Original deposit back\\n            totalPayout += _calculateReward(evt); // Share of forfeits\\n        } else if (evt.status == EventStatus.Canceled) {\\n            totalPayout += evt.deposit;\\n        }\\n        \\n        return totalPayout;\\n    }\\n\\n    function getEventForfeitPool(uint256 _eventId) external view returns (uint256) {\\n        return events[_eventId].forfeitPool;\\n    }\\n}\",\"keccak256\":\"0x1c0b0d8cebc9e02e9e68bdda687dbb50ecc82931bf58463ca065a4d09fa446be\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526001600d553480156200001657600080fd5b50604051620026d3380380620026d383398101604081905262000039916200018d565b806001600160a01b0381166200006957604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b620000748162000120565b5050600180556001600160a01b03166080908152604080518083018252670de0b6b3a7640000808252683635c9adc5dea000006020808401829052678ac7230489e8000084860181905269021e19e0c9bab2400000606095860181905260029485556003939093556004556005919091558351948501845260188086529085018290526032938501849052939091018290526006929092556007919091556008819055600955620001c5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200018857600080fd5b919050565b60008060408385031215620001a157600080fd5b620001ac8362000170565b9150620001bc6020840162000170565b90509250929050565b6080516124dd620001f660003960008181610595015281816109a301528181610eca015261125d01526124dd6000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636778ba78116100f95780639dff20ac11610097578063c8e40fbf11610071578063c8e40fbf14610537578063cfd9f3da1461056a578063f2fde38b1461057d578063fc0c546a1461059057600080fd5b80639dff20ac146105085780639f9d903a1461051b578063ad8d5eff1461052457600080fd5b80638a69614e116100d35780638a69614e146104b55780638da5cb5b146104c85780639b7aea75146104ed5780639dca362f1461050057600080fd5b80636778ba78146103e35780636d1884e014610406578063715018a6146104ad57600080fd5b80633e1458ce116101665780634773489211610140578063477348921461033c57806352a9d25b146103655780635843a5ad1461037857806364dc6de01461038e57600080fd5b80633e1458ce146103035780633f69babd14610316578063406db8431461032957600080fd5b80630505c8c9146101ae57806305ce358d146101e95780630b791430146101fe57806327c465b0146102ba57806327e235e3146102cd5780633ccfd60b146102fb575b600080fd5b6006546007546008546009546101c49392919084565b6040805194855260208501939093529183015260608201526080015b60405180910390f35b6101fc6101f736600461209b565b6105b7565b005b6102a261020c3660046120cd565b600c60205260009081526040902080546001820154600283015460038401546004909401546001600160a01b03909316939192909167ffffffffffffffff81169161ffff600160401b8304169163ffffffff600160501b820481169260ff600160701b8404811693600160781b8104821693600160801b8204811693600160a01b830490911692600160c01b909204909116908c565b6040516101e09c9b9a9998979695949392919061211a565b6101fc6102c83660046120cd565b610743565b6102ed6102db3660046121d1565b600b6020526000908152604090205481565b6040519081526020016101e0565b6101fc61090d565b6101fc61031136600461209b565b610a52565b6101fc6103243660046120cd565b610b60565b6101fc6103373660046120cd565b610c6d565b6102ed61034a3660046121d1565b6001600160a01b03166000908152600b602052604090205490565b6102ed6103733660046121f3565b611029565b6002546003546004546005546101c49392919084565b6103d561039c36600461226f565b6000828152600c602090815260408083206001600160a01b038516845260050190915290205460ff808216916101009004169250929050565b6040516101e092919061229b565b6102ed6103f13660046120cd565b6000908152600c602052604090206004015490565b6104976104143660046120cd565b6000908152600c602052604090208054600182015460028301546003909301546001600160a01b039092169390929167ffffffffffffffff81169161ffff600160401b8304169163ffffffff600160501b820481169260ff600160701b8404811693600160781b810490911692600160801b8204811692600160a01b9092041690565b6040516101e09a999897969594939291906122b7565b6101fc6113ac565b6101fc6104c33660046120cd565b6113be565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016101e0565b6101fc6104fb3660046120cd565b61162e565b6101fc6118d6565b6102ed61051636600461226f565b611971565b6102ed600d5481565b6101fc61053236600461226f565b611abb565b61055a6105453660046121d1565b600a6020526000908152604090205460ff1681565b60405190151581526020016101e0565b6101fc6105783660046120cd565b611d0f565b6101fc61058b3660046121d1565b611e37565b6104d57f000000000000000000000000000000000000000000000000000000000000000081565b6105bf611e72565b60648211156106155760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964207061727469616c20726566756e642070657263656e74000060448201526064015b60405180910390fd5b60648111156106665760405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420617474656e6465652073686172652070657263656e740000604482015260640161060c565b828410156106c25760405162461bcd60e51b8152602060048201526024808201527f46756c6c20726566756e6420686f757273206d757374206265203e3d207061726044820152631d1a585b60e21b606482015260840161060c565b604080516080808201835286825260208083018790528284018690526060928301859052600688905560078790556008869055600985905583518881529081018790529283018590529082018390527f96eb93ab96e9a32e925882f91deeb81d6f79574242a67a2f79969d2f1302c81491015b60405180910390a150505050565b61074b611e9f565b6000818152600c60209081526040808320338452600581019092529091208054610100900460ff166107b05760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b604482015260640161060c565b6001815460ff1660038111156107c8576107c86120e6565b146108155760405162461bcd60e51b815260206004820152601760248201527f526567697374726174696f6e206e6f7420616374697665000000000000000000604482015260640161060c565b805460ff1916600217815560038201805463ffffffff600160801b909104169060106108408361234d565b91906101000a81548163ffffffff021916908363ffffffff16021790555050600061086f838460010154611ec9565b9050801561089c57336000908152600b60205260408120805483929061089690849061236d565b90915550505b60008184600101546108ae9190612380565b905080156108d057808460040160008282546108ca919061236d565b90915550505b604051339086907f28c1ca19ece093493fee87eac2cdf7cf4b2afe22d1932b761b994129a95c90cc90600090a35050505061090a60018055565b50565b610915611e9f565b336000908152600b60205260409020548061096b5760405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b604482015260640161060c565b336000818152600b6020526040808220919091555163a9059cbb60e01b81526004810191909152602481018290526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156109ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a109190612393565b5060405181815233907f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b659060200160405180910390a250610a5060018055565b565b610a5a611e72565b82841115610aa35760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206465706f73697420626f756e647360501b604482015260640161060c565b80821115610ae95760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420626f6e6420626f756e647360681b604482015260640161060c565b604080516080808201835286825260208083018790528284018690526060928301859052600288905560038790556004869055600585905583518881529081018790529283018590529082018390527fd68221cc58e004286ec51a7c9902146c88e8fd87582bac11c4f27790fc93ead69101610735565b610b68611e9f565b6000818152600c6020526040902080546001600160a01b0316331480610b9857506000546001600160a01b031633145b610be45760405162461bcd60e51b815260206004820152601760248201527f4f6e6c79206f7267616e697a6572206f722061646d696e000000000000000000604482015260640161060c565b6001600382810154600160701b900460ff1690811115610c0657610c066120e6565b14610c235760405162461bcd60e51b815260040161060c906123b5565b60038101805460ff60701b1916600160711b17905560405182907fceaf11772900fe569752a0207c8639fb8228eb8663456dc9eaa3a08f927a870590600090a25061090a60018055565b610c75611e9f565b336000908152600a602052604090205460ff16610cd05760405162461bcd60e51b8152602060048201526019602482015278135d5cdd0818dc99585d19481858d8dbdd5b9d08199a5c9cdd603a1b604482015260640161060c565b6000818152600c602052604090206003810154600160781b900460ff16610d2f5760405162461bcd60e51b8152602060048201526013602482015272115d995b9d081b9bdd081c1d589b1a5cda1959606a1b604482015260640161060c565b6001600382810154600160701b900460ff1690811115610d5157610d516120e6565b14610d965760405162461bcd60e51b81526020600482015260156024820152742932b3b4b9ba3930ba34b7b7103737ba1037b832b760591b604482015260640161060c565b600381015463ffffffff600160501b82048116600160801b9092041610610df35760405162461bcd60e51b81526020600482015260116024820152704576656e7420617420636170616369747960781b604482015260640161060c565b336000908152600582016020526040902054610100900460ff1615610e4f5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b604482015260640161060c565b600381015467ffffffffffffffff164210610ea25760405162461bcd60e51b8152602060048201526013602482015272149959da5cdd1c985d1a5bdb8818db1bdcd959606a1b604482015260640161060c565b60018101546040516323b872dd60e01b815233600482015230602482015260448101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f9190612393565b5060408051808201825260018082526020808301829052336000908152600586019091529290922081518154929391929091839160ff191690836003811115610f8a57610f8a6120e6565b02179055506020919091015181549015156101000261ff001990911617905560038101805463ffffffff600160801b90910416906010610fc9836123df565b91906101000a81548163ffffffff021916908363ffffffff16021790555050336001600160a01b0316827fbffc23fac5cf8c1d58b292d148168dbea7741d95e8db7b124b4b2e7d5ba86a0f60405160405180910390a35061090a60018055565b6000611033611e9f565b336000908152600a602052604090205460ff1661108e5760405162461bcd60e51b8152602060048201526019602482015278135d5cdd0818dc99585d19481858d8dbdd5b9d08199a5c9cdd603a1b604482015260640161060c565b60025486108015906110a257506003548611155b6110e75760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a590819195c1bdcda5d08185b5bdd5b9d60521b604482015260640161060c565b60045485108015906110fb57506005548511155b61113d5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908189bdb9908185b5bdd5b9d606a1b604482015260640161060c565b428467ffffffffffffffff16116111965760405162461bcd60e51b815260206004820152601c60248201527f53746172742074696d65206d75737420626520696e2066757475726500000000604482015260640161060c565b6127108361ffff1611156111e55760405162461bcd60e51b8152602060048201526016602482015275496e76616c696420617474656e64616e63652042505360501b604482015260640161060c565b60008263ffffffff161161123b5760405162461bcd60e51b815260206004820152601960248201527f4361706163697479206d75737420626520706f73697469766500000000000000604482015260640161060c565b6040516323b872dd60e01b8152336004820152306024820152604481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af11580156112ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d29190612393565b50600d8054600091826112e483612402565b909155506000818152600c60205260408082208054336001600160a01b031990911681178255600182018c9055600282018b905560038201805467ffffffffffffffff8c1669ffffffffffffffffffff1990911617600160401b61ffff8c16021765ffffffffffff60501b1916600160501b63ffffffff8b160261ffff60701b1916179055915193945092909184917fe43349c008949cf6b65249356e6f918d4aaa0ca79f2b1166df4a4a98c9c16de29190a35090506113a360018055565b95945050505050565b6113b4611e72565b610a506000611f68565b6113c6611e9f565b6000818152600c602090815260408083203384526005810190925290912060038083810154600160701b900460ff1690811115611405576114056120e6565b148061143057506002600383810154600160701b900460ff169081111561142e5761142e6120e6565b145b6114725760405162461bcd60e51b8152602060048201526013602482015272115d995b9d081b9bdd08199a5b985b1a5e9959606a1b604482015260640161060c565b8054610100900460ff166114c85760405162461bcd60e51b815260206004820152601860248201527f4e6f74207265676973746572656420666f72206576656e740000000000000000604482015260640161060c565b33600090815260068301602052604090205460ff16156115235760405162461bcd60e51b815260206004820152601660248201527514185e5bdd5d08185b1c9958591e4818db185a5b595960521b604482015260640161060c565b3360009081526006830160205260408120805460ff191660011790556003825460ff166003811115611557576115576120e6565b0361158757600183015461156b908261236d565b905061157683611fb8565b611580908261236d565b90506115c0565b6002600384810154600160701b900460ff16908111156115a9576115a96120e6565b036115c05760018301546115bd908261236d565b90505b80156115eb57336000908152600b6020526040812080548392906115e590849061236d565b90915550505b604051818152339085907f3300bdb359cfb956935bca32e9db727413eab1ca84341f2e36caea85bb7969689060200160405180910390a350505061090a60018055565b611636611e9f565b6000818152600c6020526040902080546001600160a01b0316331461169d5760405162461bcd60e51b815260206004820152601b60248201527f4f6e6c79206f7267616e697a65722063616e20636f6d706c6574650000000000604482015260640161060c565b6001600382810154600160701b900460ff16908111156116bf576116bf6120e6565b146116dc5760405162461bcd60e51b815260040161060c906123b5565b6003810154600160c01b900460ff16156117305760405162461bcd60e51b8152602060048201526015602482015274109bdb9908185b1c9958591e481c995b19585cd959605a1b604482015260640161060c565b6003810180546aff000000000000000000ff60701b19166a010000000000000000000360701b179081905560009063ffffffff600160801b909104166117775760006117aa565b600382015463ffffffff600160801b82048116916117a091600160a01b9091041661271061241b565b6117aa9190612459565b600383015463ffffffff919091169150600160401b900461ffff16811061180457600282015482546001600160a01b03166000908152600b6020526040812080549091906117f990849061236d565b909155506118979050565b6003820154600090600160401b900461ffff166118218382612380565b8460020154611830919061247c565b61183a9190612493565b905080836002015461184c9190612380565b83546001600160a01b03166000908152600b60205260408120805490919061187590849061236d565b9250508190555080836004016000828254611890919061236d565b9091555050505b6118a08261200a565b60405183907fbb85ff95aded757cf3b840cc38e6e719a2915827f28e3364f62cbefa25bbe2de90600090a2505061090a60018055565b336000908152600a602052604090205460ff161561192f5760405162461bcd60e51b81526020600482015260166024820152754163636f756e7420616c72656164792065786973747360501b604482015260640161060c565b336000818152600a6020526040808220805460ff19166001179055517f805996f252884581e2f74cf3d2b03564d5ec26ccc90850ae12653dc1b72d1fa29190a2565b6000828152600c602090815260408083206001600160a01b038516845260058101909252822060038083810154600160701b900460ff16908111156119b8576119b86120e6565b141580156119e657506002600383810154600160701b900460ff16908111156119e3576119e36120e6565b14155b806119f857508054610100900460ff16155b80611a1d57506001600160a01b038416600090815260068301602052604090205460ff165b15611a2d57600092505050611ab5565b60006003825460ff166003811115611a4757611a476120e6565b03611a77576001830154611a5b908261236d565b9050611a6683611fb8565b611a70908261236d565b9050611ab0565b6002600384810154600160701b900460ff1690811115611a9957611a996120e6565b03611ab0576001830154611aad908261236d565b90505b925050505b92915050565b6000828152600c6020526040902080546001600160a01b03163314611b225760405162461bcd60e51b815260206004820152601b60248201527f4f6e6c79206f7267616e697a65722063616e20636865636b2d696e0000000000604482015260640161060c565b6001600382810154600160701b900460ff1690811115611b4457611b446120e6565b14611b615760405162461bcd60e51b815260040161060c906123b5565b600381015467ffffffffffffffff16421015611bb35760405162461bcd60e51b8152602060048201526011602482015270115d995b9d081b9bdd081cdd185c9d1959607a1b604482015260640161060c565b6001600160a01b038216600090815260058201602052604090208054610100900460ff16611c235760405162461bcd60e51b815260206004820152601a60248201527f5061727469636970616e74206e6f742072656769737465726564000000000000604482015260640161060c565b6001815460ff166003811115611c3b57611c3b6120e6565b14611c885760405162461bcd60e51b815260206004820152601a60248201527f526567697374726174696f6e206e6f7420636f6e6669726d6564000000000000604482015260640161060c565b805460ff1916600390811782558201805463ffffffff600160a01b90910416906014611cb3836123df565b91906101000a81548163ffffffff021916908363ffffffff16021790555050826001600160a01b0316847f21071e72b9a540ee79a41c3929bd97a87a8d723eb72d52ef08c603328417b58060405160405180910390a350505050565b6000818152600c6020526040902080546001600160a01b03163314611d765760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c79206f7267616e697a65722063616e207075626c697368000000000000604482015260640161060c565b6000600382810154600160701b900460ff1690811115611d9857611d986120e6565b14611df15760405162461bcd60e51b8152602060048201526024808201527f4576656e7420616c7265616479207075626c6973686564206f722066696e616c6044820152631a5e995960e21b606482015260840161060c565b60038101805461ffff60701b191661010160701b17905560405182907f07686c23176326e4145b1f2801d466c9513d225ad3c5e11a485bae9973b8084190600090a25050565b611e3f611e72565b6001600160a01b038116611e6957604051631e4fbdf760e01b81526000600482015260240161060c565b61090a81611f68565b6000546001600160a01b03163314610a505760405163118cdaa760e01b815233600482015260240161060c565b600260015403611ec257604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600382015460009081904267ffffffffffffffff90911611611eec576000611f06565b6003840154611f0690429067ffffffffffffffff16612380565b600654909150611f1890610e1061247c565b8110611f275782915050611ab5565b600754611f3690610e1061247c565b8110611f5e57600854606490611f4c908561247c565b611f569190612493565b915050611ab5565b6000915050611ab5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000816004015460001480611fdc57506003820154600160a01b900463ffffffff16155b15611fe957506000919050565b60038201546004830154611ab591600160a01b900463ffffffff1690612493565b80600401546000036120195750565b60095460009060649061202c9082612380565b836004015461203b919061247c565b6120459190612493565b905080156120975781546001600160a01b03166000908152600b60205260408120805483929061207690849061236d565b92505081905550808260040160008282546120919190612380565b90915550505b5050565b600080600080608085870312156120b157600080fd5b5050823594602084013594506040840135936060013592509050565b6000602082840312156120df57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6004811061090a57634e487b7160e01b600052602160045260246000fd5b6001600160a01b038d168152602081018c9052604081018b905267ffffffffffffffff8a16606082015261ffff8916608082015263ffffffff881660a08201526101808101612168886120fc565b8760c083015286151560e083015261218961010083018763ffffffff169052565b63ffffffff94909416610120820152911515610140830152610160909101529998505050505050505050565b80356001600160a01b03811681146121cc57600080fd5b919050565b6000602082840312156121e357600080fd5b6121ec826121b5565b9392505050565b600080600080600060a0868803121561220b57600080fd5b8535945060208601359350604086013567ffffffffffffffff8116811461223157600080fd5b9250606086013561ffff8116811461224857600080fd5b9150608086013563ffffffff8116811461226157600080fd5b809150509295509295909350565b6000806040838503121561228257600080fd5b82359150612292602084016121b5565b90509250929050565b604081016122a8846120fc565b92815290151560209091015290565b6001600160a01b038b168152602081018a90526040810189905267ffffffffffffffff8816606082015261ffff8716608082015263ffffffff86811660a0830152610140820190612307876120fc565b8660c084015285151560e0840152808516610100840152808416610120840152509b9a5050505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff82168061236357612363612337565b6000190192915050565b80820180821115611ab557611ab5612337565b81810381811115611ab557611ab5612337565b6000602082840312156123a557600080fd5b815180151581146121ec57600080fd5b60208082526010908201526f4576656e74206e6f742061637469766560801b604082015260600190565b600063ffffffff8083168181036123f8576123f8612337565b6001019392505050565b60006001820161241457612414612337565b5060010190565b63ffffffff81811683821602808216919082811461243b5761243b612337565b505092915050565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff8084168061247057612470612443565b92169190910492915050565b8082028115828204841417611ab557611ab5612337565b6000826124a2576124a2612443565b50049056fea26469706673582212208ab1d9681e7d4f3b6aef92259e66aba43d3a5296fde879f6920af440d735bd4e64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80636778ba78116100f95780639dff20ac11610097578063c8e40fbf11610071578063c8e40fbf14610537578063cfd9f3da1461056a578063f2fde38b1461057d578063fc0c546a1461059057600080fd5b80639dff20ac146105085780639f9d903a1461051b578063ad8d5eff1461052457600080fd5b80638a69614e116100d35780638a69614e146104b55780638da5cb5b146104c85780639b7aea75146104ed5780639dca362f1461050057600080fd5b80636778ba78146103e35780636d1884e014610406578063715018a6146104ad57600080fd5b80633e1458ce116101665780634773489211610140578063477348921461033c57806352a9d25b146103655780635843a5ad1461037857806364dc6de01461038e57600080fd5b80633e1458ce146103035780633f69babd14610316578063406db8431461032957600080fd5b80630505c8c9146101ae57806305ce358d146101e95780630b791430146101fe57806327c465b0146102ba57806327e235e3146102cd5780633ccfd60b146102fb575b600080fd5b6006546007546008546009546101c49392919084565b6040805194855260208501939093529183015260608201526080015b60405180910390f35b6101fc6101f736600461209b565b6105b7565b005b6102a261020c3660046120cd565b600c60205260009081526040902080546001820154600283015460038401546004909401546001600160a01b03909316939192909167ffffffffffffffff81169161ffff600160401b8304169163ffffffff600160501b820481169260ff600160701b8404811693600160781b8104821693600160801b8204811693600160a01b830490911692600160c01b909204909116908c565b6040516101e09c9b9a9998979695949392919061211a565b6101fc6102c83660046120cd565b610743565b6102ed6102db3660046121d1565b600b6020526000908152604090205481565b6040519081526020016101e0565b6101fc61090d565b6101fc61031136600461209b565b610a52565b6101fc6103243660046120cd565b610b60565b6101fc6103373660046120cd565b610c6d565b6102ed61034a3660046121d1565b6001600160a01b03166000908152600b602052604090205490565b6102ed6103733660046121f3565b611029565b6002546003546004546005546101c49392919084565b6103d561039c36600461226f565b6000828152600c602090815260408083206001600160a01b038516845260050190915290205460ff808216916101009004169250929050565b6040516101e092919061229b565b6102ed6103f13660046120cd565b6000908152600c602052604090206004015490565b6104976104143660046120cd565b6000908152600c602052604090208054600182015460028301546003909301546001600160a01b039092169390929167ffffffffffffffff81169161ffff600160401b8304169163ffffffff600160501b820481169260ff600160701b8404811693600160781b810490911692600160801b8204811692600160a01b9092041690565b6040516101e09a999897969594939291906122b7565b6101fc6113ac565b6101fc6104c33660046120cd565b6113be565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016101e0565b6101fc6104fb3660046120cd565b61162e565b6101fc6118d6565b6102ed61051636600461226f565b611971565b6102ed600d5481565b6101fc61053236600461226f565b611abb565b61055a6105453660046121d1565b600a6020526000908152604090205460ff1681565b60405190151581526020016101e0565b6101fc6105783660046120cd565b611d0f565b6101fc61058b3660046121d1565b611e37565b6104d57f000000000000000000000000000000000000000000000000000000000000000081565b6105bf611e72565b60648211156106155760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964207061727469616c20726566756e642070657263656e74000060448201526064015b60405180910390fd5b60648111156106665760405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420617474656e6465652073686172652070657263656e740000604482015260640161060c565b828410156106c25760405162461bcd60e51b8152602060048201526024808201527f46756c6c20726566756e6420686f757273206d757374206265203e3d207061726044820152631d1a585b60e21b606482015260840161060c565b604080516080808201835286825260208083018790528284018690526060928301859052600688905560078790556008869055600985905583518881529081018790529283018590529082018390527f96eb93ab96e9a32e925882f91deeb81d6f79574242a67a2f79969d2f1302c81491015b60405180910390a150505050565b61074b611e9f565b6000818152600c60209081526040808320338452600581019092529091208054610100900460ff166107b05760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b604482015260640161060c565b6001815460ff1660038111156107c8576107c86120e6565b146108155760405162461bcd60e51b815260206004820152601760248201527f526567697374726174696f6e206e6f7420616374697665000000000000000000604482015260640161060c565b805460ff1916600217815560038201805463ffffffff600160801b909104169060106108408361234d565b91906101000a81548163ffffffff021916908363ffffffff16021790555050600061086f838460010154611ec9565b9050801561089c57336000908152600b60205260408120805483929061089690849061236d565b90915550505b60008184600101546108ae9190612380565b905080156108d057808460040160008282546108ca919061236d565b90915550505b604051339086907f28c1ca19ece093493fee87eac2cdf7cf4b2afe22d1932b761b994129a95c90cc90600090a35050505061090a60018055565b50565b610915611e9f565b336000908152600b60205260409020548061096b5760405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b604482015260640161060c565b336000818152600b6020526040808220919091555163a9059cbb60e01b81526004810191909152602481018290526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156109ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a109190612393565b5060405181815233907f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b659060200160405180910390a250610a5060018055565b565b610a5a611e72565b82841115610aa35760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206465706f73697420626f756e647360501b604482015260640161060c565b80821115610ae95760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420626f6e6420626f756e647360681b604482015260640161060c565b604080516080808201835286825260208083018790528284018690526060928301859052600288905560038790556004869055600585905583518881529081018790529283018590529082018390527fd68221cc58e004286ec51a7c9902146c88e8fd87582bac11c4f27790fc93ead69101610735565b610b68611e9f565b6000818152600c6020526040902080546001600160a01b0316331480610b9857506000546001600160a01b031633145b610be45760405162461bcd60e51b815260206004820152601760248201527f4f6e6c79206f7267616e697a6572206f722061646d696e000000000000000000604482015260640161060c565b6001600382810154600160701b900460ff1690811115610c0657610c066120e6565b14610c235760405162461bcd60e51b815260040161060c906123b5565b60038101805460ff60701b1916600160711b17905560405182907fceaf11772900fe569752a0207c8639fb8228eb8663456dc9eaa3a08f927a870590600090a25061090a60018055565b610c75611e9f565b336000908152600a602052604090205460ff16610cd05760405162461bcd60e51b8152602060048201526019602482015278135d5cdd0818dc99585d19481858d8dbdd5b9d08199a5c9cdd603a1b604482015260640161060c565b6000818152600c602052604090206003810154600160781b900460ff16610d2f5760405162461bcd60e51b8152602060048201526013602482015272115d995b9d081b9bdd081c1d589b1a5cda1959606a1b604482015260640161060c565b6001600382810154600160701b900460ff1690811115610d5157610d516120e6565b14610d965760405162461bcd60e51b81526020600482015260156024820152742932b3b4b9ba3930ba34b7b7103737ba1037b832b760591b604482015260640161060c565b600381015463ffffffff600160501b82048116600160801b9092041610610df35760405162461bcd60e51b81526020600482015260116024820152704576656e7420617420636170616369747960781b604482015260640161060c565b336000908152600582016020526040902054610100900460ff1615610e4f5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b604482015260640161060c565b600381015467ffffffffffffffff164210610ea25760405162461bcd60e51b8152602060048201526013602482015272149959da5cdd1c985d1a5bdb8818db1bdcd959606a1b604482015260640161060c565b60018101546040516323b872dd60e01b815233600482015230602482015260448101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f9190612393565b5060408051808201825260018082526020808301829052336000908152600586019091529290922081518154929391929091839160ff191690836003811115610f8a57610f8a6120e6565b02179055506020919091015181549015156101000261ff001990911617905560038101805463ffffffff600160801b90910416906010610fc9836123df565b91906101000a81548163ffffffff021916908363ffffffff16021790555050336001600160a01b0316827fbffc23fac5cf8c1d58b292d148168dbea7741d95e8db7b124b4b2e7d5ba86a0f60405160405180910390a35061090a60018055565b6000611033611e9f565b336000908152600a602052604090205460ff1661108e5760405162461bcd60e51b8152602060048201526019602482015278135d5cdd0818dc99585d19481858d8dbdd5b9d08199a5c9cdd603a1b604482015260640161060c565b60025486108015906110a257506003548611155b6110e75760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a590819195c1bdcda5d08185b5bdd5b9d60521b604482015260640161060c565b60045485108015906110fb57506005548511155b61113d5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908189bdb9908185b5bdd5b9d606a1b604482015260640161060c565b428467ffffffffffffffff16116111965760405162461bcd60e51b815260206004820152601c60248201527f53746172742074696d65206d75737420626520696e2066757475726500000000604482015260640161060c565b6127108361ffff1611156111e55760405162461bcd60e51b8152602060048201526016602482015275496e76616c696420617474656e64616e63652042505360501b604482015260640161060c565b60008263ffffffff161161123b5760405162461bcd60e51b815260206004820152601960248201527f4361706163697479206d75737420626520706f73697469766500000000000000604482015260640161060c565b6040516323b872dd60e01b8152336004820152306024820152604481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af11580156112ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d29190612393565b50600d8054600091826112e483612402565b909155506000818152600c60205260408082208054336001600160a01b031990911681178255600182018c9055600282018b905560038201805467ffffffffffffffff8c1669ffffffffffffffffffff1990911617600160401b61ffff8c16021765ffffffffffff60501b1916600160501b63ffffffff8b160261ffff60701b1916179055915193945092909184917fe43349c008949cf6b65249356e6f918d4aaa0ca79f2b1166df4a4a98c9c16de29190a35090506113a360018055565b95945050505050565b6113b4611e72565b610a506000611f68565b6113c6611e9f565b6000818152600c602090815260408083203384526005810190925290912060038083810154600160701b900460ff1690811115611405576114056120e6565b148061143057506002600383810154600160701b900460ff169081111561142e5761142e6120e6565b145b6114725760405162461bcd60e51b8152602060048201526013602482015272115d995b9d081b9bdd08199a5b985b1a5e9959606a1b604482015260640161060c565b8054610100900460ff166114c85760405162461bcd60e51b815260206004820152601860248201527f4e6f74207265676973746572656420666f72206576656e740000000000000000604482015260640161060c565b33600090815260068301602052604090205460ff16156115235760405162461bcd60e51b815260206004820152601660248201527514185e5bdd5d08185b1c9958591e4818db185a5b595960521b604482015260640161060c565b3360009081526006830160205260408120805460ff191660011790556003825460ff166003811115611557576115576120e6565b0361158757600183015461156b908261236d565b905061157683611fb8565b611580908261236d565b90506115c0565b6002600384810154600160701b900460ff16908111156115a9576115a96120e6565b036115c05760018301546115bd908261236d565b90505b80156115eb57336000908152600b6020526040812080548392906115e590849061236d565b90915550505b604051818152339085907f3300bdb359cfb956935bca32e9db727413eab1ca84341f2e36caea85bb7969689060200160405180910390a350505061090a60018055565b611636611e9f565b6000818152600c6020526040902080546001600160a01b0316331461169d5760405162461bcd60e51b815260206004820152601b60248201527f4f6e6c79206f7267616e697a65722063616e20636f6d706c6574650000000000604482015260640161060c565b6001600382810154600160701b900460ff16908111156116bf576116bf6120e6565b146116dc5760405162461bcd60e51b815260040161060c906123b5565b6003810154600160c01b900460ff16156117305760405162461bcd60e51b8152602060048201526015602482015274109bdb9908185b1c9958591e481c995b19585cd959605a1b604482015260640161060c565b6003810180546aff000000000000000000ff60701b19166a010000000000000000000360701b179081905560009063ffffffff600160801b909104166117775760006117aa565b600382015463ffffffff600160801b82048116916117a091600160a01b9091041661271061241b565b6117aa9190612459565b600383015463ffffffff919091169150600160401b900461ffff16811061180457600282015482546001600160a01b03166000908152600b6020526040812080549091906117f990849061236d565b909155506118979050565b6003820154600090600160401b900461ffff166118218382612380565b8460020154611830919061247c565b61183a9190612493565b905080836002015461184c9190612380565b83546001600160a01b03166000908152600b60205260408120805490919061187590849061236d565b9250508190555080836004016000828254611890919061236d565b9091555050505b6118a08261200a565b60405183907fbb85ff95aded757cf3b840cc38e6e719a2915827f28e3364f62cbefa25bbe2de90600090a2505061090a60018055565b336000908152600a602052604090205460ff161561192f5760405162461bcd60e51b81526020600482015260166024820152754163636f756e7420616c72656164792065786973747360501b604482015260640161060c565b336000818152600a6020526040808220805460ff19166001179055517f805996f252884581e2f74cf3d2b03564d5ec26ccc90850ae12653dc1b72d1fa29190a2565b6000828152600c602090815260408083206001600160a01b038516845260058101909252822060038083810154600160701b900460ff16908111156119b8576119b86120e6565b141580156119e657506002600383810154600160701b900460ff16908111156119e3576119e36120e6565b14155b806119f857508054610100900460ff16155b80611a1d57506001600160a01b038416600090815260068301602052604090205460ff165b15611a2d57600092505050611ab5565b60006003825460ff166003811115611a4757611a476120e6565b03611a77576001830154611a5b908261236d565b9050611a6683611fb8565b611a70908261236d565b9050611ab0565b6002600384810154600160701b900460ff1690811115611a9957611a996120e6565b03611ab0576001830154611aad908261236d565b90505b925050505b92915050565b6000828152600c6020526040902080546001600160a01b03163314611b225760405162461bcd60e51b815260206004820152601b60248201527f4f6e6c79206f7267616e697a65722063616e20636865636b2d696e0000000000604482015260640161060c565b6001600382810154600160701b900460ff1690811115611b4457611b446120e6565b14611b615760405162461bcd60e51b815260040161060c906123b5565b600381015467ffffffffffffffff16421015611bb35760405162461bcd60e51b8152602060048201526011602482015270115d995b9d081b9bdd081cdd185c9d1959607a1b604482015260640161060c565b6001600160a01b038216600090815260058201602052604090208054610100900460ff16611c235760405162461bcd60e51b815260206004820152601a60248201527f5061727469636970616e74206e6f742072656769737465726564000000000000604482015260640161060c565b6001815460ff166003811115611c3b57611c3b6120e6565b14611c885760405162461bcd60e51b815260206004820152601a60248201527f526567697374726174696f6e206e6f7420636f6e6669726d6564000000000000604482015260640161060c565b805460ff1916600390811782558201805463ffffffff600160a01b90910416906014611cb3836123df565b91906101000a81548163ffffffff021916908363ffffffff16021790555050826001600160a01b0316847f21071e72b9a540ee79a41c3929bd97a87a8d723eb72d52ef08c603328417b58060405160405180910390a350505050565b6000818152600c6020526040902080546001600160a01b03163314611d765760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c79206f7267616e697a65722063616e207075626c697368000000000000604482015260640161060c565b6000600382810154600160701b900460ff1690811115611d9857611d986120e6565b14611df15760405162461bcd60e51b8152602060048201526024808201527f4576656e7420616c7265616479207075626c6973686564206f722066696e616c6044820152631a5e995960e21b606482015260840161060c565b60038101805461ffff60701b191661010160701b17905560405182907f07686c23176326e4145b1f2801d466c9513d225ad3c5e11a485bae9973b8084190600090a25050565b611e3f611e72565b6001600160a01b038116611e6957604051631e4fbdf760e01b81526000600482015260240161060c565b61090a81611f68565b6000546001600160a01b03163314610a505760405163118cdaa760e01b815233600482015260240161060c565b600260015403611ec257604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600382015460009081904267ffffffffffffffff90911611611eec576000611f06565b6003840154611f0690429067ffffffffffffffff16612380565b600654909150611f1890610e1061247c565b8110611f275782915050611ab5565b600754611f3690610e1061247c565b8110611f5e57600854606490611f4c908561247c565b611f569190612493565b915050611ab5565b6000915050611ab5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000816004015460001480611fdc57506003820154600160a01b900463ffffffff16155b15611fe957506000919050565b60038201546004830154611ab591600160a01b900463ffffffff1690612493565b80600401546000036120195750565b60095460009060649061202c9082612380565b836004015461203b919061247c565b6120459190612493565b905080156120975781546001600160a01b03166000908152600b60205260408120805483929061207690849061236d565b92505081905550808260040160008282546120919190612380565b90915550505b5050565b600080600080608085870312156120b157600080fd5b5050823594602084013594506040840135936060013592509050565b6000602082840312156120df57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6004811061090a57634e487b7160e01b600052602160045260246000fd5b6001600160a01b038d168152602081018c9052604081018b905267ffffffffffffffff8a16606082015261ffff8916608082015263ffffffff881660a08201526101808101612168886120fc565b8760c083015286151560e083015261218961010083018763ffffffff169052565b63ffffffff94909416610120820152911515610140830152610160909101529998505050505050505050565b80356001600160a01b03811681146121cc57600080fd5b919050565b6000602082840312156121e357600080fd5b6121ec826121b5565b9392505050565b600080600080600060a0868803121561220b57600080fd5b8535945060208601359350604086013567ffffffffffffffff8116811461223157600080fd5b9250606086013561ffff8116811461224857600080fd5b9150608086013563ffffffff8116811461226157600080fd5b809150509295509295909350565b6000806040838503121561228257600080fd5b82359150612292602084016121b5565b90509250929050565b604081016122a8846120fc565b92815290151560209091015290565b6001600160a01b038b168152602081018a90526040810189905267ffffffffffffffff8816606082015261ffff8716608082015263ffffffff86811660a0830152610140820190612307876120fc565b8660c084015285151560e0840152808516610100840152808416610120840152509b9a5050505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff82168061236357612363612337565b6000190192915050565b80820180821115611ab557611ab5612337565b81810381811115611ab557611ab5612337565b6000602082840312156123a557600080fd5b815180151581146121ec57600080fd5b60208082526010908201526f4576656e74206e6f742061637469766560801b604082015260600190565b600063ffffffff8083168181036123f8576123f8612337565b6001019392505050565b60006001820161241457612414612337565b5060010190565b63ffffffff81811683821602808216919082811461243b5761243b612337565b505092915050565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff8084168061247057612470612443565b92169190910492915050565b8082028115828204841417611ab557611ab5612337565b6000826124a2576124a2612443565b50049056fea26469706673582212208ab1d9681e7d4f3b6aef92259e66aba43d3a5296fde879f6920af440d735bd4e64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Decentralized Event Management Contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 944,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1030,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "bounds",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Bounds)1027_storage"
      },
      {
        "astId": 1033,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "policy",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(PolicyConfig)1050_storage"
      },
      {
        "astId": 1037,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "hasAccount",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1041,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "balances",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1106,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "events",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Event)1101_storage)"
      },
      {
        "astId": 1109,
        "contract": "contracts/EventManager.sol:EventManager",
        "label": "nextEventId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(EventStatus)1055": {
        "encoding": "inplace",
        "label": "enum EventManager.EventStatus",
        "numberOfBytes": "1"
      },
      "t_enum(RegStatus)1060": {
        "encoding": "inplace",
        "label": "enum EventManager.RegStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Registration)1066_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EventManager.Registration)",
        "numberOfBytes": "32",
        "value": "t_struct(Registration)1066_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Event)1101_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EventManager.Event)",
        "numberOfBytes": "32",
        "value": "t_struct(Event)1101_storage"
      },
      "t_struct(Bounds)1027_storage": {
        "encoding": "inplace",
        "label": "struct EventManager.Bounds",
        "members": [
          {
            "astId": 1020,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "minDeposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1022,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "maxDeposit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1024,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "minBond",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1026,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "maxBond",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Event)1101_storage": {
        "encoding": "inplace",
        "label": "struct EventManager.Event",
        "members": [
          {
            "astId": 1068,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "organizer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1070,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "deposit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1072,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "bond",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1074,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 1076,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "minAttendanceBps",
            "offset": 8,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 1078,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "capacity",
            "offset": 10,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 1081,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "status",
            "offset": 14,
            "slot": "3",
            "type": "t_enum(EventStatus)1055"
          },
          {
            "astId": 1083,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "published",
            "offset": 15,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1085,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "confirmedCount",
            "offset": 16,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 1087,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "attendedCount",
            "offset": 20,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 1089,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "bondReleased",
            "offset": 24,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1091,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "forfeitPool",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1096,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "registrations",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(Registration)1066_storage)"
          },
          {
            "astId": 1100,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "rewardsClaimed",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(PolicyConfig)1050_storage": {
        "encoding": "inplace",
        "label": "struct EventManager.PolicyConfig",
        "members": [
          {
            "astId": 1043,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "fullRefundHours",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1045,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "partialRefundHours",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1047,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "partialRefundPercent",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1049,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "attendeeSharePercent",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Registration)1066_storage": {
        "encoding": "inplace",
        "label": "struct EventManager.Registration",
        "members": [
          {
            "astId": 1063,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(RegStatus)1060"
          },
          {
            "astId": 1065,
            "contract": "contracts/EventManager.sol:EventManager",
            "label": "exists",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}